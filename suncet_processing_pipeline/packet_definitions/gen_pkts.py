# This file is automatically generated, DO NOT EDIT

import string
import struct
#import gen_states
#import gen_eus

try:
    import custom_decoders
except:
    print('No Custom Decoders Defined, import custom_decoders failed')
try:
    import general_decoders
except:
    print('No General Decoders Defined, import general_decoders failed')




def getUnsigned(packet, endian, shift, mask):
    val = int.from_bytes(packet, endian)
    val = (val >> shift) & mask
    return val


def getSigned(packet, endian, shift, mask):
    val = int.from_bytes(packet, endian, signed=True)
    subtract = 0
    if(val < 0):
        subtract = mask + 1 #python casts integers to unsigned during bitwise and, save this to ensure we can recover the true value after the mask
    val = (val >> shift) & mask
    return val - subtract

def getFloat(packet, endian):
    if endian == 'BIG':
        return struct.unpack('>f', packet)[0]
    else:
        return struct.unpack('<f', packet)[0]

class DES_HK:
    def __str__(self):
        return 'DES_HK'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_des_hk = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_des_hk = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.des_cycle_count = getUnsigned(packet[6:8], 'big', 0, 65535)
        
        self.des_over_count = getUnsigned(packet[8:10], 'big', 0, 65535)
        
        self.des_isr_count = getUnsigned(packet[10:12], 'big', 0, 65535)
        
        self.des_last_overrun = getUnsigned(packet[12:13], 'big', 0, 255)
        try:
            self.des_last_overrun = gen_states.CONVERT_des_last_overrun(self.des_last_overrun)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[13:14], 'big', 0, 255)
        
        self.des_back_count = getUnsigned(packet[14:18], 'big', 0, 4294967295)
        
        self.des_back_hwm = getUnsigned(packet[18:22], 'big', 0, 4294967295)
        
        self.des_sys_time_sec = getUnsigned(packet[22:26], 'big', 0, 4294967295)
        
        self.des_new_time_sec = getUnsigned(packet[26:30], 'big', 0, 4294967295)
        
        self.des_eff_time_sec = getUnsigned(packet[30:34], 'big', 0, 4294967295)
        
        self.des_met_time_sec = getUnsigned(packet[34:38], 'big', 0, 4294967295)
        
        self.des_met_time_subsec = getUnsigned(packet[38:42], 'big', 0, 4294967295)
        
        self.des_vtc_time_sec = getUnsigned(packet[42:46], 'big', 0, 4294967295)
        
        self.des_vtc_time_subsec = getUnsigned(packet[46:50], 'big', 0, 4294967295)
        
        self.des_prev_vtc_set_time = getUnsigned(packet[50:54], 'big', 0, 4294967295)
        
        self.des_met_vtc_set_time = getUnsigned(packet[54:58], 'big', 0, 4294967295)
        
        self.des_hk_checksum = getUnsigned(packet[58:62], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class DES_TASK:
    def __str__(self):
        return 'DES_TASK'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_des_task = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_des_task = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.des_task_count = getUnsigned(packet[6:10], 'big', 0, 4294967295)
        
        self.des_task_cycle = getUnsigned(packet[10:14], 'big', 0, 4294967295)
        
        self.des_task_exec_hk = getUnsigned(packet[14:18], 'big', 0, 4294967295)
        
        self.des_task_exec_seq = getUnsigned(packet[18:22], 'big', 0, 4294967295)
        
        self.des_task_exec_mem = getUnsigned(packet[22:26], 'big', 0, 4294967295)
        
        self.des_task_exec_log = getUnsigned(packet[26:30], 'big', 0, 4294967295)
        
        self.des_task_exec_fp = getUnsigned(packet[30:34], 'big', 0, 4294967295)
        
        self.des_task_exec_table = getUnsigned(packet[34:38], 'big', 0, 4294967295)
        
        self.des_task_exec_tlm_store = getUnsigned(packet[38:42], 'big', 0, 4294967295)
        
        self.des_task_exec_store_hk = getUnsigned(packet[42:46], 'big', 0, 4294967295)
        
        self.des_task_exec_cmd_debug = getUnsigned(packet[46:50], 'big', 0, 4294967295)
        
        self.des_task_exec_tlm_debug = getUnsigned(packet[50:54], 'big', 0, 4294967295)
        
        self.des_task_exec_flash_hk = getUnsigned(packet[54:58], 'big', 0, 4294967295)
        
        self.des_task_exec_mode = getUnsigned(packet[58:62], 'big', 0, 4294967295)
        
        self.des_task_exec_adcs = getUnsigned(packet[62:66], 'big', 0, 4294967295)
        
        self.des_task_exec_tlm_uhf = getUnsigned(packet[66:70], 'big', 0, 4294967295)
        
        self.des_task_exec_cmd_uhf = getUnsigned(packet[70:74], 'big', 0, 4294967295)
        
        self.des_task_exec_uhf_hk = getUnsigned(packet[74:78], 'big', 0, 4294967295)
        
        self.des_task_exec_eps = getUnsigned(packet[78:82], 'big', 0, 4294967295)
        
        self.des_task_exec_payload_hk = getUnsigned(packet[82:86], 'big', 0, 4294967295)
        
        self.des_task_exec_payload_time = getUnsigned(packet[86:90], 'big', 0, 4294967295)
        
        self.des_task_exec_payload_tlm = getUnsigned(packet[90:94], 'big', 0, 4294967295)
        
        self.des_task_over_hk = getUnsigned(packet[94:98], 'big', 0, 4294967295)
        
        self.des_task_over_seq = getUnsigned(packet[98:102], 'big', 0, 4294967295)
        
        self.des_task_over_mem = getUnsigned(packet[102:106], 'big', 0, 4294967295)
        
        self.des_task_over_log = getUnsigned(packet[106:110], 'big', 0, 4294967295)
        
        self.des_task_over_fp = getUnsigned(packet[110:114], 'big', 0, 4294967295)
        
        self.des_task_over_table = getUnsigned(packet[114:118], 'big', 0, 4294967295)
        
        self.des_task_over_tlm_store = getUnsigned(packet[118:122], 'big', 0, 4294967295)
        
        self.des_task_over_store_hk = getUnsigned(packet[122:126], 'big', 0, 4294967295)
        
        self.des_task_over_cmd_debug = getUnsigned(packet[126:130], 'big', 0, 4294967295)
        
        self.des_task_over_tlm_debug = getUnsigned(packet[130:134], 'big', 0, 4294967295)
        
        self.des_task_over_flash_hk = getUnsigned(packet[134:138], 'big', 0, 4294967295)
        
        self.des_task_over_mode = getUnsigned(packet[138:142], 'big', 0, 4294967295)
        
        self.des_task_over_adcs = getUnsigned(packet[142:146], 'big', 0, 4294967295)
        
        self.des_task_over_tlm_uhf = getUnsigned(packet[146:150], 'big', 0, 4294967295)
        
        self.des_task_over_cmd_uhf = getUnsigned(packet[150:154], 'big', 0, 4294967295)
        
        self.des_task_over_uhf_hk = getUnsigned(packet[154:158], 'big', 0, 4294967295)
        
        self.des_task_over_eps = getUnsigned(packet[158:162], 'big', 0, 4294967295)
        
        self.des_task_over_payload_hk = getUnsigned(packet[162:166], 'big', 0, 4294967295)
        
        self.des_task_over_payload_time = getUnsigned(packet[166:170], 'big', 0, 4294967295)
        
        self.des_task_over_payload_tlm = getUnsigned(packet[170:174], 'big', 0, 4294967295)
        
        self.des_task_back_store_read = getUnsigned(packet[174:178], 'big', 0, 4294967295)
        
        self.des_task_back_flash_back = getUnsigned(packet[178:182], 'big', 0, 4294967295)
        
        self.des_task_back_uhf_back = getUnsigned(packet[182:186], 'big', 0, 4294967295)
        
        self.des_task_back_xband_back = getUnsigned(packet[186:190], 'big', 0, 4294967295)
        
        self.des_task_checksum = getUnsigned(packet[190:194], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class DES_TIME:
    def __str__(self):
        return 'DES_TIME'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_des_time = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_des_time = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.des_time_min_hk = getUnsigned(packet[6:10], 'big', 0, 4294967295)
        
        self.des_time_max_hk = getUnsigned(packet[10:14], 'big', 0, 4294967295)
        
        self.des_time_min_seq = getUnsigned(packet[14:18], 'big', 0, 4294967295)
        
        self.des_time_max_seq = getUnsigned(packet[18:22], 'big', 0, 4294967295)
        
        self.des_time_min_mem = getUnsigned(packet[22:26], 'big', 0, 4294967295)
        
        self.des_time_max_mem = getUnsigned(packet[26:30], 'big', 0, 4294967295)
        
        self.des_time_min_log = getUnsigned(packet[30:34], 'big', 0, 4294967295)
        
        self.des_time_max_log = getUnsigned(packet[34:38], 'big', 0, 4294967295)
        
        self.des_time_min_fp = getUnsigned(packet[38:42], 'big', 0, 4294967295)
        
        self.des_time_max_fp = getUnsigned(packet[42:46], 'big', 0, 4294967295)
        
        self.des_time_min_table = getUnsigned(packet[46:50], 'big', 0, 4294967295)
        
        self.des_time_max_table = getUnsigned(packet[50:54], 'big', 0, 4294967295)
        
        self.des_time_min_tlm_store = getUnsigned(packet[54:58], 'big', 0, 4294967295)
        
        self.des_time_max_tlm_store = getUnsigned(packet[58:62], 'big', 0, 4294967295)
        
        self.des_time_min_store_hk = getUnsigned(packet[62:66], 'big', 0, 4294967295)
        
        self.des_time_max_store_hk = getUnsigned(packet[66:70], 'big', 0, 4294967295)
        
        self.des_time_min_cmd_debug = getUnsigned(packet[70:74], 'big', 0, 4294967295)
        
        self.des_time_max_cmd_debug = getUnsigned(packet[74:78], 'big', 0, 4294967295)
        
        self.des_time_min_tlm_debug = getUnsigned(packet[78:82], 'big', 0, 4294967295)
        
        self.des_time_max_tlm_debug = getUnsigned(packet[82:86], 'big', 0, 4294967295)
        
        self.des_time_min_flash_hk = getUnsigned(packet[86:90], 'big', 0, 4294967295)
        
        self.des_time_max_flash_hk = getUnsigned(packet[90:94], 'big', 0, 4294967295)
        
        self.des_time_min_mode = getUnsigned(packet[94:98], 'big', 0, 4294967295)
        
        self.des_time_max_mode = getUnsigned(packet[98:102], 'big', 0, 4294967295)
        
        self.des_time_min_adcs = getUnsigned(packet[102:106], 'big', 0, 4294967295)
        
        self.des_time_max_adcs = getUnsigned(packet[106:110], 'big', 0, 4294967295)
        
        self.des_time_min_tlm_uhf = getUnsigned(packet[110:114], 'big', 0, 4294967295)
        
        self.des_time_max_tlm_uhf = getUnsigned(packet[114:118], 'big', 0, 4294967295)
        
        self.des_time_min_cmd_uhf = getUnsigned(packet[118:122], 'big', 0, 4294967295)
        
        self.des_time_max_cmd_uhf = getUnsigned(packet[122:126], 'big', 0, 4294967295)
        
        self.des_time_min_uhf_hk = getUnsigned(packet[126:130], 'big', 0, 4294967295)
        
        self.des_time_max_uhf_hk = getUnsigned(packet[130:134], 'big', 0, 4294967295)
        
        self.des_time_min_eps = getUnsigned(packet[134:138], 'big', 0, 4294967295)
        
        self.des_time_max_eps = getUnsigned(packet[138:142], 'big', 0, 4294967295)
        
        self.des_time_min_payload_hk = getUnsigned(packet[142:146], 'big', 0, 4294967295)
        
        self.des_time_max_payload_hk = getUnsigned(packet[146:150], 'big', 0, 4294967295)
        
        self.des_time_min_payload_time = getUnsigned(packet[150:154], 'big', 0, 4294967295)
        
        self.des_time_max_payload_time = getUnsigned(packet[154:158], 'big', 0, 4294967295)
        
        self.des_time_min_payload_tlm = getUnsigned(packet[158:162], 'big', 0, 4294967295)
        
        self.des_time_max_payload_tlm = getUnsigned(packet[162:166], 'big', 0, 4294967295)
        
        self.des_time_bck_min_store_read = getUnsigned(packet[166:170], 'big', 0, 4294967295)
        
        self.des_time_bck_max_store_read = getUnsigned(packet[170:174], 'big', 0, 4294967295)
        
        self.des_time_bck_min_flash_back = getUnsigned(packet[174:178], 'big', 0, 4294967295)
        
        self.des_time_bck_max_flash_back = getUnsigned(packet[178:182], 'big', 0, 4294967295)
        
        self.des_time_bck_min_uhf_back = getUnsigned(packet[182:186], 'big', 0, 4294967295)
        
        self.des_time_bck_max_uhf_back = getUnsigned(packet[186:190], 'big', 0, 4294967295)
        
        self.des_time_bck_min_xband_back = getUnsigned(packet[190:194], 'big', 0, 4294967295)
        
        self.des_time_bck_max_xband_back = getUnsigned(packet[194:198], 'big', 0, 4294967295)
        
        self.des_time_checksum = getUnsigned(packet[198:202], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class FP_HK:
    def __str__(self):
        return 'FP_HK'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_fp_hk = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_fp_hk = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.fp_resp_count = getUnsigned(packet[6:8], 'big', 0, 65535)
        
        self.fp_passive_count = getUnsigned(packet[8:10], 'big', 0, 65535)
        
        self.fp_err_count = getUnsigned(packet[10:12], 'big', 0, 65535)
        
        self.fp_task_state = getUnsigned(packet[12:13], 'big', 0, 255)
        try:
            self.fp_task_state = gen_states.CONVERT_fp_task_state(self.fp_task_state)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[13:14], 'big', 0, 255)
        
        self.fp_wp_state_wp15 = getUnsigned(packet[14:14], 'big', 6, 3)
        try:
            self.fp_wp_state_wp15 = gen_states.CONVERT_fp_wp_state_wp15(self.fp_wp_state_wp15)
        except:
            pass
        
        self.fp_wp_state_wp14 = getUnsigned(packet[14:14], 'big', 4, 3)
        try:
            self.fp_wp_state_wp14 = gen_states.CONVERT_fp_wp_state_wp14(self.fp_wp_state_wp14)
        except:
            pass
        
        self.fp_wp_state_wp13 = getUnsigned(packet[14:14], 'big', 2, 3)
        try:
            self.fp_wp_state_wp13 = gen_states.CONVERT_fp_wp_state_wp13(self.fp_wp_state_wp13)
        except:
            pass
        
        self.fp_wp_state_wp12 = getUnsigned(packet[14:14], 'big', 0, 3)
        try:
            self.fp_wp_state_wp12 = gen_states.CONVERT_fp_wp_state_wp12(self.fp_wp_state_wp12)
        except:
            pass
        
        self.fp_wp_state_wp11 = getUnsigned(packet[15:15], 'big', 6, 3)
        try:
            self.fp_wp_state_wp11 = gen_states.CONVERT_fp_wp_state_wp11(self.fp_wp_state_wp11)
        except:
            pass
        
        self.fp_wp_state_wp10 = getUnsigned(packet[15:15], 'big', 4, 3)
        try:
            self.fp_wp_state_wp10 = gen_states.CONVERT_fp_wp_state_wp10(self.fp_wp_state_wp10)
        except:
            pass
        
        self.fp_wp_state_wp9 = getUnsigned(packet[15:15], 'big', 2, 3)
        try:
            self.fp_wp_state_wp9 = gen_states.CONVERT_fp_wp_state_wp9(self.fp_wp_state_wp9)
        except:
            pass
        
        self.fp_wp_state_wp8 = getUnsigned(packet[15:15], 'big', 0, 3)
        try:
            self.fp_wp_state_wp8 = gen_states.CONVERT_fp_wp_state_wp8(self.fp_wp_state_wp8)
        except:
            pass
        
        self.fp_wp_state_wp7 = getUnsigned(packet[16:16], 'big', 6, 3)
        try:
            self.fp_wp_state_wp7 = gen_states.CONVERT_fp_wp_state_wp7(self.fp_wp_state_wp7)
        except:
            pass
        
        self.fp_wp_state_wp6 = getUnsigned(packet[16:16], 'big', 4, 3)
        try:
            self.fp_wp_state_wp6 = gen_states.CONVERT_fp_wp_state_wp6(self.fp_wp_state_wp6)
        except:
            pass
        
        self.fp_wp_state_wp5 = getUnsigned(packet[16:16], 'big', 2, 3)
        try:
            self.fp_wp_state_wp5 = gen_states.CONVERT_fp_wp_state_wp5(self.fp_wp_state_wp5)
        except:
            pass
        
        self.fp_wp_state_wp4 = getUnsigned(packet[16:16], 'big', 0, 3)
        try:
            self.fp_wp_state_wp4 = gen_states.CONVERT_fp_wp_state_wp4(self.fp_wp_state_wp4)
        except:
            pass
        
        self.fp_wp_state_wp3 = getUnsigned(packet[17:17], 'big', 6, 3)
        try:
            self.fp_wp_state_wp3 = gen_states.CONVERT_fp_wp_state_wp3(self.fp_wp_state_wp3)
        except:
            pass
        
        self.fp_wp_state_wp2 = getUnsigned(packet[17:17], 'big', 4, 3)
        try:
            self.fp_wp_state_wp2 = gen_states.CONVERT_fp_wp_state_wp2(self.fp_wp_state_wp2)
        except:
            pass
        
        self.fp_wp_state_wp1 = getUnsigned(packet[17:17], 'big', 2, 3)
        try:
            self.fp_wp_state_wp1 = gen_states.CONVERT_fp_wp_state_wp1(self.fp_wp_state_wp1)
        except:
            pass
        
        self.fp_wp_state_wp0 = getUnsigned(packet[17:17], 'big', 0, 3)
        try:
            self.fp_wp_state_wp0 = gen_states.CONVERT_fp_wp_state_wp0(self.fp_wp_state_wp0)
        except:
            pass
        
        self.fp_hk_checksum = getUnsigned(packet[18:22], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class FP_TEST:
    def __str__(self):
        return 'FP_TEST'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_fp_test = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_fp_test = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.fp_test_uint32 = getUnsigned(packet[6:10], 'big', 0, 4294967295)
        
        self.fp_test_uint16 = getUnsigned(packet[10:12], 'big', 0, 65535)
        
        self.fp_test_uint8 = getUnsigned(packet[12:13], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[13:14], 'big', 0, 255)
        
        self.fp_test_checksum = getUnsigned(packet[14:18], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class FLASH_HK:
    def __str__(self):
        return 'FLASH_HK'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_flash_hk = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_flash_hk = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.nand_format_count = getUnsigned(packet[6:10], 'big', 0, 4294967295)
        
        self.nand_bad_count = getUnsigned(packet[10:12], 'big', 0, 65535)
        
        self.nand_timeout_count = getUnsigned(packet[12:14], 'big', 0, 65535)
        
        self.nand_read_err_count = getUnsigned(packet[14:16], 'big', 0, 65535)
        
        self.nand_write_err_count = getUnsigned(packet[16:18], 'big', 0, 65535)
        
        self.nand_bb_state = getUnsigned(packet[18:22], 'big', 0, 4294967295)
        try:
            self.nand_bb_state = gen_states.CONVERT_nand_bb_state(self.nand_bb_state)
        except:
            pass
        
        self.nand_bb_free_count = getUnsigned(packet[22:26], 'big', 0, 4294967295)
        
        self.nand_bb_free_blk = getUnsigned(packet[26:30], 'big', 0, 4294967295)
        
        self.nand_bb_remap_count = getUnsigned(packet[30:32], 'big', 0, 65535)
        
        self.nand_bb_bad_read = getUnsigned(packet[32:34], 'big', 0, 65535)
        
        self.flash_hk_checksum = getUnsigned(packet[34:38], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class SEQ_HK:
    def __str__(self):
        return 'SEQ_HK'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_seq_hk = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_seq_hk = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.seq_load_state = getUnsigned(packet[6:8], 'big', 0, 65535)
        try:
            self.seq_load_state = gen_states.CONVERT_seq_load_state(self.seq_load_state)
        except:
            pass
        
        self.seq_load_buff = getUnsigned(packet[8:10], 'big', 0, 65535)
        try:
            self.seq_load_buff = gen_states.CONVERT_seq_load_buff(self.seq_load_buff)
        except:
            pass
        
        self.seq_wait_time_auto = getUnsigned(packet[10:14], 'big', 0, 4294967295)
        
        self.seq_cmd_cnt_auto = getUnsigned(packet[14:16], 'big', 0, 65535)
        
        self.seq_int_cnt_auto = getUnsigned(packet[16:18], 'big', 0, 65535)
        
        self.seq_state_auto = getUnsigned(packet[18:19], 'big', 0, 255)
        try:
            self.seq_state_auto = gen_states.CONVERT_seq_state_auto(self.seq_state_auto)
        except:
            pass
        
        self.seq_stop_code_auto = getUnsigned(packet[19:20], 'big', 0, 255)
        try:
            self.seq_stop_code_auto = gen_states.CONVERT_seq_stop_code_auto(self.seq_stop_code_auto)
        except:
            pass
        
        self.seq_wait_type_auto = getUnsigned(packet[20:21], 'big', 0, 255)
        try:
            self.seq_wait_type_auto = gen_states.CONVERT_seq_wait_type_auto(self.seq_wait_type_auto)
        except:
            pass
        
        self.seq_nested_auto = getUnsigned(packet[21:22], 'big', 0, 255)
        
        self.seq_exec_id0_auto = getUnsigned(packet[22:26], 'big', 0, 4294967295)
        try:
            self.seq_exec_id0_auto = gen_states.CONVERT_seq_exec_id0_auto(self.seq_exec_id0_auto)
        except:
            pass
        
        self.seq_exec_buf0_auto = getUnsigned(packet[26:28], 'big', 0, 65535)
        try:
            self.seq_exec_buf0_auto = gen_states.CONVERT_seq_exec_buf0_auto(self.seq_exec_buf0_auto)
        except:
            pass
        
        self.seq_exec_pos0_auto = getUnsigned(packet[28:30], 'big', 0, 65535)
        
        self.seq_exec_len0_auto = getUnsigned(packet[30:32], 'big', 0, 65535)
        
        self.REUSABLE_SPARE_16 = getUnsigned(packet[32:34], 'big', 0, 65535)
        
        self.seq_exec_id1_auto = getUnsigned(packet[34:38], 'big', 0, 4294967295)
        try:
            self.seq_exec_id1_auto = gen_states.CONVERT_seq_exec_id1_auto(self.seq_exec_id1_auto)
        except:
            pass
        
        self.seq_exec_buf1_auto = getUnsigned(packet[38:40], 'big', 0, 65535)
        try:
            self.seq_exec_buf1_auto = gen_states.CONVERT_seq_exec_buf1_auto(self.seq_exec_buf1_auto)
        except:
            pass
        
        self.seq_exec_pos1_auto = getUnsigned(packet[40:42], 'big', 0, 65535)
        
        self.seq_exec_len1_auto = getUnsigned(packet[42:44], 'big', 0, 65535)
        
        self.REUSABLE_SPARE_16 = getUnsigned(packet[44:46], 'big', 0, 65535)
        
        self.seq_exec_id2_auto = getUnsigned(packet[46:50], 'big', 0, 4294967295)
        try:
            self.seq_exec_id2_auto = gen_states.CONVERT_seq_exec_id2_auto(self.seq_exec_id2_auto)
        except:
            pass
        
        self.seq_exec_buf2_auto = getUnsigned(packet[50:52], 'big', 0, 65535)
        try:
            self.seq_exec_buf2_auto = gen_states.CONVERT_seq_exec_buf2_auto(self.seq_exec_buf2_auto)
        except:
            pass
        
        self.seq_exec_pos2_auto = getUnsigned(packet[52:54], 'big', 0, 65535)
        
        self.seq_exec_len2_auto = getUnsigned(packet[54:56], 'big', 0, 65535)
        
        self.REUSABLE_SPARE_16 = getUnsigned(packet[56:58], 'big', 0, 65535)
        
        self.seq_wait_time_op1 = getUnsigned(packet[58:62], 'big', 0, 4294967295)
        
        self.seq_cmd_cnt_op1 = getUnsigned(packet[62:64], 'big', 0, 65535)
        
        self.seq_int_cnt_op1 = getUnsigned(packet[64:66], 'big', 0, 65535)
        
        self.seq_state_op1 = getUnsigned(packet[66:67], 'big', 0, 255)
        try:
            self.seq_state_op1 = gen_states.CONVERT_seq_state_op1(self.seq_state_op1)
        except:
            pass
        
        self.seq_stop_code_op1 = getUnsigned(packet[67:68], 'big', 0, 255)
        try:
            self.seq_stop_code_op1 = gen_states.CONVERT_seq_stop_code_op1(self.seq_stop_code_op1)
        except:
            pass
        
        self.seq_wait_type_op1 = getUnsigned(packet[68:69], 'big', 0, 255)
        try:
            self.seq_wait_type_op1 = gen_states.CONVERT_seq_wait_type_op1(self.seq_wait_type_op1)
        except:
            pass
        
        self.seq_nested_op1 = getUnsigned(packet[69:70], 'big', 0, 255)
        
        self.seq_exec_id0_op1 = getUnsigned(packet[70:74], 'big', 0, 4294967295)
        try:
            self.seq_exec_id0_op1 = gen_states.CONVERT_seq_exec_id0_op1(self.seq_exec_id0_op1)
        except:
            pass
        
        self.seq_exec_buf0_op1 = getUnsigned(packet[74:76], 'big', 0, 65535)
        try:
            self.seq_exec_buf0_op1 = gen_states.CONVERT_seq_exec_buf0_op1(self.seq_exec_buf0_op1)
        except:
            pass
        
        self.seq_exec_pos0_op1 = getUnsigned(packet[76:78], 'big', 0, 65535)
        
        self.seq_exec_len0_op1 = getUnsigned(packet[78:80], 'big', 0, 65535)
        
        self.REUSABLE_SPARE_16 = getUnsigned(packet[80:82], 'big', 0, 65535)
        
        self.seq_exec_id1_op1 = getUnsigned(packet[82:86], 'big', 0, 4294967295)
        try:
            self.seq_exec_id1_op1 = gen_states.CONVERT_seq_exec_id1_op1(self.seq_exec_id1_op1)
        except:
            pass
        
        self.seq_exec_buf1_op1 = getUnsigned(packet[86:88], 'big', 0, 65535)
        try:
            self.seq_exec_buf1_op1 = gen_states.CONVERT_seq_exec_buf1_op1(self.seq_exec_buf1_op1)
        except:
            pass
        
        self.seq_exec_pos1_op1 = getUnsigned(packet[88:90], 'big', 0, 65535)
        
        self.seq_exec_len1_op1 = getUnsigned(packet[90:92], 'big', 0, 65535)
        
        self.REUSABLE_SPARE_16 = getUnsigned(packet[92:94], 'big', 0, 65535)
        
        self.seq_exec_id2_op1 = getUnsigned(packet[94:98], 'big', 0, 4294967295)
        try:
            self.seq_exec_id2_op1 = gen_states.CONVERT_seq_exec_id2_op1(self.seq_exec_id2_op1)
        except:
            pass
        
        self.seq_exec_buf2_op1 = getUnsigned(packet[98:100], 'big', 0, 65535)
        try:
            self.seq_exec_buf2_op1 = gen_states.CONVERT_seq_exec_buf2_op1(self.seq_exec_buf2_op1)
        except:
            pass
        
        self.seq_exec_pos2_op1 = getUnsigned(packet[100:102], 'big', 0, 65535)
        
        self.seq_exec_len2_op1 = getUnsigned(packet[102:104], 'big', 0, 65535)
        
        self.REUSABLE_SPARE_16 = getUnsigned(packet[104:106], 'big', 0, 65535)
        
        self.seq_wait_time_op2 = getUnsigned(packet[106:110], 'big', 0, 4294967295)
        
        self.seq_cmd_cnt_op2 = getUnsigned(packet[110:112], 'big', 0, 65535)
        
        self.seq_int_cnt_op2 = getUnsigned(packet[112:114], 'big', 0, 65535)
        
        self.seq_state_op2 = getUnsigned(packet[114:115], 'big', 0, 255)
        try:
            self.seq_state_op2 = gen_states.CONVERT_seq_state_op2(self.seq_state_op2)
        except:
            pass
        
        self.seq_stop_code_op2 = getUnsigned(packet[115:116], 'big', 0, 255)
        try:
            self.seq_stop_code_op2 = gen_states.CONVERT_seq_stop_code_op2(self.seq_stop_code_op2)
        except:
            pass
        
        self.seq_wait_type_op2 = getUnsigned(packet[116:117], 'big', 0, 255)
        try:
            self.seq_wait_type_op2 = gen_states.CONVERT_seq_wait_type_op2(self.seq_wait_type_op2)
        except:
            pass
        
        self.seq_nested_op2 = getUnsigned(packet[117:118], 'big', 0, 255)
        
        self.seq_exec_id0_op2 = getUnsigned(packet[118:122], 'big', 0, 4294967295)
        try:
            self.seq_exec_id0_op2 = gen_states.CONVERT_seq_exec_id0_op2(self.seq_exec_id0_op2)
        except:
            pass
        
        self.seq_exec_buf0_op2 = getUnsigned(packet[122:124], 'big', 0, 65535)
        try:
            self.seq_exec_buf0_op2 = gen_states.CONVERT_seq_exec_buf0_op2(self.seq_exec_buf0_op2)
        except:
            pass
        
        self.seq_exec_pos0_op2 = getUnsigned(packet[124:126], 'big', 0, 65535)
        
        self.seq_exec_len0_op2 = getUnsigned(packet[126:128], 'big', 0, 65535)
        
        self.REUSABLE_SPARE_16 = getUnsigned(packet[128:130], 'big', 0, 65535)
        
        self.seq_exec_id1_op2 = getUnsigned(packet[130:134], 'big', 0, 4294967295)
        try:
            self.seq_exec_id1_op2 = gen_states.CONVERT_seq_exec_id1_op2(self.seq_exec_id1_op2)
        except:
            pass
        
        self.seq_exec_buf1_op2 = getUnsigned(packet[134:136], 'big', 0, 65535)
        try:
            self.seq_exec_buf1_op2 = gen_states.CONVERT_seq_exec_buf1_op2(self.seq_exec_buf1_op2)
        except:
            pass
        
        self.seq_exec_pos1_op2 = getUnsigned(packet[136:138], 'big', 0, 65535)
        
        self.seq_exec_len1_op2 = getUnsigned(packet[138:140], 'big', 0, 65535)
        
        self.REUSABLE_SPARE_16 = getUnsigned(packet[140:142], 'big', 0, 65535)
        
        self.seq_exec_id2_op2 = getUnsigned(packet[142:146], 'big', 0, 4294967295)
        try:
            self.seq_exec_id2_op2 = gen_states.CONVERT_seq_exec_id2_op2(self.seq_exec_id2_op2)
        except:
            pass
        
        self.seq_exec_buf2_op2 = getUnsigned(packet[146:148], 'big', 0, 65535)
        try:
            self.seq_exec_buf2_op2 = gen_states.CONVERT_seq_exec_buf2_op2(self.seq_exec_buf2_op2)
        except:
            pass
        
        self.seq_exec_pos2_op2 = getUnsigned(packet[148:150], 'big', 0, 65535)
        
        self.seq_exec_len2_op2 = getUnsigned(packet[150:152], 'big', 0, 65535)
        
        self.REUSABLE_SPARE_16 = getUnsigned(packet[152:154], 'big', 0, 65535)
        
        self.seq_wait_time_op3 = getUnsigned(packet[154:158], 'big', 0, 4294967295)
        
        self.seq_cmd_cnt_op3 = getUnsigned(packet[158:160], 'big', 0, 65535)
        
        self.seq_int_cnt_op3 = getUnsigned(packet[160:162], 'big', 0, 65535)
        
        self.seq_state_op3 = getUnsigned(packet[162:163], 'big', 0, 255)
        try:
            self.seq_state_op3 = gen_states.CONVERT_seq_state_op3(self.seq_state_op3)
        except:
            pass
        
        self.seq_stop_code_op3 = getUnsigned(packet[163:164], 'big', 0, 255)
        try:
            self.seq_stop_code_op3 = gen_states.CONVERT_seq_stop_code_op3(self.seq_stop_code_op3)
        except:
            pass
        
        self.seq_wait_type_op3 = getUnsigned(packet[164:165], 'big', 0, 255)
        try:
            self.seq_wait_type_op3 = gen_states.CONVERT_seq_wait_type_op3(self.seq_wait_type_op3)
        except:
            pass
        
        self.seq_nested_op3 = getUnsigned(packet[165:166], 'big', 0, 255)
        
        self.seq_exec_id0_op3 = getUnsigned(packet[166:170], 'big', 0, 4294967295)
        try:
            self.seq_exec_id0_op3 = gen_states.CONVERT_seq_exec_id0_op3(self.seq_exec_id0_op3)
        except:
            pass
        
        self.seq_exec_buf0_op3 = getUnsigned(packet[170:172], 'big', 0, 65535)
        try:
            self.seq_exec_buf0_op3 = gen_states.CONVERT_seq_exec_buf0_op3(self.seq_exec_buf0_op3)
        except:
            pass
        
        self.seq_exec_pos0_op3 = getUnsigned(packet[172:174], 'big', 0, 65535)
        
        self.seq_exec_len0_op3 = getUnsigned(packet[174:176], 'big', 0, 65535)
        
        self.REUSABLE_SPARE_16 = getUnsigned(packet[176:178], 'big', 0, 65535)
        
        self.seq_exec_id1_op3 = getUnsigned(packet[178:182], 'big', 0, 4294967295)
        try:
            self.seq_exec_id1_op3 = gen_states.CONVERT_seq_exec_id1_op3(self.seq_exec_id1_op3)
        except:
            pass
        
        self.seq_exec_buf1_op3 = getUnsigned(packet[182:184], 'big', 0, 65535)
        try:
            self.seq_exec_buf1_op3 = gen_states.CONVERT_seq_exec_buf1_op3(self.seq_exec_buf1_op3)
        except:
            pass
        
        self.seq_exec_pos1_op3 = getUnsigned(packet[184:186], 'big', 0, 65535)
        
        self.seq_exec_len1_op3 = getUnsigned(packet[186:188], 'big', 0, 65535)
        
        self.REUSABLE_SPARE_16 = getUnsigned(packet[188:190], 'big', 0, 65535)
        
        self.seq_exec_id2_op3 = getUnsigned(packet[190:194], 'big', 0, 4294967295)
        try:
            self.seq_exec_id2_op3 = gen_states.CONVERT_seq_exec_id2_op3(self.seq_exec_id2_op3)
        except:
            pass
        
        self.seq_exec_buf2_op3 = getUnsigned(packet[194:196], 'big', 0, 65535)
        try:
            self.seq_exec_buf2_op3 = gen_states.CONVERT_seq_exec_buf2_op3(self.seq_exec_buf2_op3)
        except:
            pass
        
        self.seq_exec_pos2_op3 = getUnsigned(packet[196:198], 'big', 0, 65535)
        
        self.seq_exec_len2_op3 = getUnsigned(packet[198:200], 'big', 0, 65535)
        
        self.REUSABLE_SPARE_16 = getUnsigned(packet[200:202], 'big', 0, 65535)
        
        self.seq_hk_checksum = getUnsigned(packet[202:206], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class STORAGE_HK:
    def __str__(self):
        return 'STORAGE_HK'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_storage_hk = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_storage_hk = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.store_write_cnt = getUnsigned(packet[6:8], 'big', 0, 65535)
        
        self.store_read_cnt = getUnsigned(packet[8:10], 'big', 0, 65535)
        
        self.store_write_err_cnt = getUnsigned(packet[10:12], 'big', 0, 65535)
        
        self.store_write_state = getUnsigned(packet[12:13], 'big', 0, 255)
        try:
            self.store_write_state = gen_states.CONVERT_store_write_state(self.store_write_state)
        except:
            pass
        
        self.store_sel = getUnsigned(packet[13:14], 'big', 0, 255)
        try:
            self.store_sel = gen_states.CONVERT_store_sel(self.store_sel)
        except:
            pass
        
        self.store_read_state = getUnsigned(packet[14:15], 'big', 0, 255)
        try:
            self.store_read_state = gen_states.CONVERT_store_read_state(self.store_read_state)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[15:16], 'big', 0, 255)
        
        self.store_read_stream = getUnsigned(packet[16:17], 'big', 0, 255)
        try:
            self.store_read_stream = gen_states.CONVERT_store_read_stream(self.store_read_stream)
        except:
            pass
        
        self.store_read_id = getUnsigned(packet[17:18], 'big', 0, 255)
        try:
            self.store_read_id = gen_states.CONVERT_store_read_id(self.store_read_id)
        except:
            pass
        
        self.store_read_end_time = getUnsigned(packet[18:22], 'big', 0, 4294967295)
        
        self.store_partition_start_misc = getUnsigned(packet[22:26], 'big', 0, 4294967295)
        
        self.store_partition_size_misc = getUnsigned(packet[26:30], 'big', 0, 4294967295)
        
        self.store_partition_write_misc = getUnsigned(packet[30:34], 'big', 0, 4294967295)
        
        self.store_partition_read_misc = getUnsigned(packet[34:38], 'big', 0, 4294967295)
        
        self.store_partition_pbk_misc = getUnsigned(packet[38:42], 'big', 0, 4294967295)
        
        self.store_partition_id_misc = getUnsigned(packet[42:43], 'big', 0, 255)
        try:
            self.store_partition_id_misc = gen_states.CONVERT_store_partition_id_misc(self.store_partition_id_misc)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[43:44], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[44:45], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[45:46], 'big', 0, 255)
        
        self.store_partition_start_log = getUnsigned(packet[46:50], 'big', 0, 4294967295)
        
        self.store_partition_size_log = getUnsigned(packet[50:54], 'big', 0, 4294967295)
        
        self.store_partition_write_log = getUnsigned(packet[54:58], 'big', 0, 4294967295)
        
        self.store_partition_read_log = getUnsigned(packet[58:62], 'big', 0, 4294967295)
        
        self.store_partition_pbk_log = getUnsigned(packet[62:66], 'big', 0, 4294967295)
        
        self.store_partition_id_log = getUnsigned(packet[66:67], 'big', 0, 255)
        try:
            self.store_partition_id_log = gen_states.CONVERT_store_partition_id_log(self.store_partition_id_log)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[67:68], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[68:69], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[69:70], 'big', 0, 255)
        
        self.store_partition_start_adcs = getUnsigned(packet[70:74], 'big', 0, 4294967295)
        
        self.store_partition_size_adcs = getUnsigned(packet[74:78], 'big', 0, 4294967295)
        
        self.store_partition_write_adcs = getUnsigned(packet[78:82], 'big', 0, 4294967295)
        
        self.store_partition_read_adcs = getUnsigned(packet[82:86], 'big', 0, 4294967295)
        
        self.store_partition_pbk_adcs = getUnsigned(packet[86:90], 'big', 0, 4294967295)
        
        self.store_partition_id_adcs = getUnsigned(packet[90:91], 'big', 0, 255)
        try:
            self.store_partition_id_adcs = gen_states.CONVERT_store_partition_id_adcs(self.store_partition_id_adcs)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[91:92], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[92:93], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[93:94], 'big', 0, 255)
        
        self.store_partition_start_hk = getUnsigned(packet[94:98], 'big', 0, 4294967295)
        
        self.store_partition_size_hk = getUnsigned(packet[98:102], 'big', 0, 4294967295)
        
        self.store_partition_write_hk = getUnsigned(packet[102:106], 'big', 0, 4294967295)
        
        self.store_partition_read_hk = getUnsigned(packet[106:110], 'big', 0, 4294967295)
        
        self.store_partition_pbk_hk = getUnsigned(packet[110:114], 'big', 0, 4294967295)
        
        self.store_partition_id_hk = getUnsigned(packet[114:115], 'big', 0, 255)
        try:
            self.store_partition_id_hk = gen_states.CONVERT_store_partition_id_hk(self.store_partition_id_hk)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[115:116], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[116:117], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[117:118], 'big', 0, 255)
        
        self.store_partition_start_sci = getUnsigned(packet[118:122], 'big', 0, 4294967295)
        
        self.store_partition_size_sci = getUnsigned(packet[122:126], 'big', 0, 4294967295)
        
        self.store_partition_write_sci = getUnsigned(packet[126:130], 'big', 0, 4294967295)
        
        self.store_partition_read_sci = getUnsigned(packet[130:134], 'big', 0, 4294967295)
        
        self.store_partition_pbk_sci = getUnsigned(packet[134:138], 'big', 0, 4294967295)
        
        self.store_partition_id_sci = getUnsigned(packet[138:139], 'big', 0, 255)
        try:
            self.store_partition_id_sci = gen_states.CONVERT_store_partition_id_sci(self.store_partition_id_sci)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[139:140], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[140:141], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[141:142], 'big', 0, 255)
        
        self.store_partition_start_dsps = getUnsigned(packet[142:146], 'big', 0, 4294967295)
        
        self.store_partition_size_dsps = getUnsigned(packet[146:150], 'big', 0, 4294967295)
        
        self.store_partition_write_dsps = getUnsigned(packet[150:154], 'big', 0, 4294967295)
        
        self.store_partition_read_dsps = getUnsigned(packet[154:158], 'big', 0, 4294967295)
        
        self.store_partition_pbk_dsps = getUnsigned(packet[158:162], 'big', 0, 4294967295)
        
        self.store_partition_id_dsps = getUnsigned(packet[162:163], 'big', 0, 255)
        try:
            self.store_partition_id_dsps = gen_states.CONVERT_store_partition_id_dsps(self.store_partition_id_dsps)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[163:164], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[164:165], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[165:166], 'big', 0, 255)
        
        self.store_partition_start_downlink = getUnsigned(packet[166:170], 'big', 0, 4294967295)
        
        self.store_partition_size_downlink = getUnsigned(packet[170:174], 'big', 0, 4294967295)
        
        self.store_partition_write_downlink = getUnsigned(packet[174:178], 'big', 0, 4294967295)
        
        self.store_partition_read_downlink = getUnsigned(packet[178:182], 'big', 0, 4294967295)
        
        self.store_partition_pbk_downlink = getUnsigned(packet[182:186], 'big', 0, 4294967295)
        
        self.store_partition_id_downlink = getUnsigned(packet[186:187], 'big', 0, 255)
        try:
            self.store_partition_id_downlink = gen_states.CONVERT_store_partition_id_downlink(self.store_partition_id_downlink)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[187:188], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[188:189], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[189:190], 'big', 0, 255)
        
        self.store_map_apid0 = getUnsigned(packet[190:192], 'big', 0, 65535)
        try:
            self.store_map_apid0 = gen_states.CONVERT_store_map_apid0(self.store_map_apid0)
        except:
            pass
        
        self.store_map_partition0 = getUnsigned(packet[192:194], 'big', 0, 65535)
        try:
            self.store_map_partition0 = gen_states.CONVERT_store_map_partition0(self.store_map_partition0)
        except:
            pass
        
        self.store_map_apid1 = getUnsigned(packet[194:196], 'big', 0, 65535)
        try:
            self.store_map_apid1 = gen_states.CONVERT_store_map_apid1(self.store_map_apid1)
        except:
            pass
        
        self.store_map_partition1 = getUnsigned(packet[196:198], 'big', 0, 65535)
        try:
            self.store_map_partition1 = gen_states.CONVERT_store_map_partition1(self.store_map_partition1)
        except:
            pass
        
        self.store_map_apid2 = getUnsigned(packet[198:200], 'big', 0, 65535)
        try:
            self.store_map_apid2 = gen_states.CONVERT_store_map_apid2(self.store_map_apid2)
        except:
            pass
        
        self.store_map_partition2 = getUnsigned(packet[200:202], 'big', 0, 65535)
        try:
            self.store_map_partition2 = gen_states.CONVERT_store_map_partition2(self.store_map_partition2)
        except:
            pass
        
        self.store_map_apid3 = getUnsigned(packet[202:204], 'big', 0, 65535)
        try:
            self.store_map_apid3 = gen_states.CONVERT_store_map_apid3(self.store_map_apid3)
        except:
            pass
        
        self.store_map_partition3 = getUnsigned(packet[204:206], 'big', 0, 65535)
        try:
            self.store_map_partition3 = gen_states.CONVERT_store_map_partition3(self.store_map_partition3)
        except:
            pass
        
        self.store_map_apid4 = getUnsigned(packet[206:208], 'big', 0, 65535)
        try:
            self.store_map_apid4 = gen_states.CONVERT_store_map_apid4(self.store_map_apid4)
        except:
            pass
        
        self.store_map_partition4 = getUnsigned(packet[208:210], 'big', 0, 65535)
        try:
            self.store_map_partition4 = gen_states.CONVERT_store_map_partition4(self.store_map_partition4)
        except:
            pass
        
        self.store_map_apid5 = getUnsigned(packet[210:212], 'big', 0, 65535)
        try:
            self.store_map_apid5 = gen_states.CONVERT_store_map_apid5(self.store_map_apid5)
        except:
            pass
        
        self.store_map_partition5 = getUnsigned(packet[212:214], 'big', 0, 65535)
        try:
            self.store_map_partition5 = gen_states.CONVERT_store_map_partition5(self.store_map_partition5)
        except:
            pass
        
        self.store_map_apid6 = getUnsigned(packet[214:216], 'big', 0, 65535)
        try:
            self.store_map_apid6 = gen_states.CONVERT_store_map_apid6(self.store_map_apid6)
        except:
            pass
        
        self.store_map_partition6 = getUnsigned(packet[216:218], 'big', 0, 65535)
        try:
            self.store_map_partition6 = gen_states.CONVERT_store_map_partition6(self.store_map_partition6)
        except:
            pass
        
        self.store_map_apid7 = getUnsigned(packet[218:220], 'big', 0, 65535)
        try:
            self.store_map_apid7 = gen_states.CONVERT_store_map_apid7(self.store_map_apid7)
        except:
            pass
        
        self.store_map_partition7 = getUnsigned(packet[220:222], 'big', 0, 65535)
        try:
            self.store_map_partition7 = gen_states.CONVERT_store_map_partition7(self.store_map_partition7)
        except:
            pass
        
        self.store_map_apid8 = getUnsigned(packet[222:224], 'big', 0, 65535)
        try:
            self.store_map_apid8 = gen_states.CONVERT_store_map_apid8(self.store_map_apid8)
        except:
            pass
        
        self.store_map_partition8 = getUnsigned(packet[224:226], 'big', 0, 65535)
        try:
            self.store_map_partition8 = gen_states.CONVERT_store_map_partition8(self.store_map_partition8)
        except:
            pass
        
        self.store_map_apid9 = getUnsigned(packet[226:228], 'big', 0, 65535)
        try:
            self.store_map_apid9 = gen_states.CONVERT_store_map_apid9(self.store_map_apid9)
        except:
            pass
        
        self.store_map_partition9 = getUnsigned(packet[228:230], 'big', 0, 65535)
        try:
            self.store_map_partition9 = gen_states.CONVERT_store_map_partition9(self.store_map_partition9)
        except:
            pass
        
        self.store_read_to_count = getUnsigned(packet[230:232], 'big', 0, 65535)
        
        self.store_read_err_count = getUnsigned(packet[232:234], 'big', 0, 65535)
        
        self.store_read_len_count = getUnsigned(packet[234:236], 'big', 0, 65535)
        
        self.store_read_tx_count = getUnsigned(packet[236:238], 'big', 0, 65535)
        
        self.storage_hk_checksum = getUnsigned(packet[238:242], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class UHF_HK:
    def __str__(self):
        return 'UHF_HK'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_uhf_hk = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_uhf_hk = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.uhf_tx_count = getUnsigned(packet[6:8], 'big', 0, 65535)
        
        self.uhf_rx_count = getUnsigned(packet[8:10], 'big', 0, 65535)
        
        self.uhf_rx_discard = getUnsigned(packet[10:12], 'big', 0, 65535)
        
        self.uhf_sbe_count = getUnsigned(packet[12:14], 'big', 0, 65535)
        
        self.uhf_mbe_count = getUnsigned(packet[14:16], 'big', 0, 65535)
        
        self.uhf_pass_err_cnt = getUnsigned(packet[16:18], 'big', 0, 65535)
        
        self.uhf_bad_resp_cnt = getUnsigned(packet[18:20], 'big', 0, 65535)
        
        self.uhf_uart_cmd_cnt = getUnsigned(packet[20:22], 'big', 0, 65535)
        
        self.uhf_cmd_ready = getUnsigned(packet[22:23], 'big', 0, 255)
        
        self.uhf_alive = getUnsigned(packet[23:24], 'big', 0, 255)
        
        try:
            self.uhf_channel = ''.join(filter(lambda x: x in string.printable, packet[24:25].decode("utf-8")))
        except:
            self.uhf_channel = ' '
        
        self.uhf_chksm_compare = getUnsigned(packet[25:26], 'big', 0, 255)
        
        self.uhf_watchdog_count = getUnsigned(packet[26:27], 'big', 0, 255)
        
        self.uhf_trap_count = getUnsigned(packet[27:28], 'big', 0, 255)
        
        self.uhf_pll_count = getUnsigned(packet[28:29], 'big', 0, 255)
        
        self.uhf_temp = getSigned(packet[29:30], 'big', 0, 255)
        
        try:
            self.uhf_echo_mode = ''.join(filter(lambda x: x in string.printable, packet[30:31].decode("utf-8")))
        except:
            self.uhf_echo_mode = ' '
        
        try:
            self.uhf_afc_mode = ''.join(filter(lambda x: x in string.printable, packet[31:32].decode("utf-8")))
        except:
            self.uhf_afc_mode = ' '
        
        try:
            self.uhf_swd_mode = ''.join(filter(lambda x: x in string.printable, packet[32:33].decode("utf-8")))
        except:
            self.uhf_swd_mode = ' '
        
        try:
            self.uhf_read_mode = ''.join(filter(lambda x: x in string.printable, packet[33:34].decode("utf-8")))
        except:
            self.uhf_read_mode = ' '
        
        self.uhf_locked = getUnsigned(packet[34:35], 'big', 0, 255)
        
        self.uhf_recv_fmt_err_count = getUnsigned(packet[35:36], 'big', 0, 255)
        
        self.uhf_recv_fmt_err_code = getUnsigned(packet[36:37], 'big', 0, 255)
        try:
            self.uhf_recv_fmt_err_code = gen_states.CONVERT_uhf_recv_fmt_err_code(self.uhf_recv_fmt_err_code)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[37:38], 'big', 0, 255)
        
        self.uhf_time_since_rx = getUnsigned(packet[38:42], 'big', 0, 4294967295)
        
        self.uhf_hk_checksum = getUnsigned(packet[42:46], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class UHF_PASS:
    def __str__(self):
        return 'UHF_PASS'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_uhf_pass = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_uhf_pass = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.uhf_pass_size = getUnsigned(packet[6:10], 'big', 0, 4294967295)
        
        try:
            self.uhf_pass_response_0 = ''.join(filter(lambda x: x in string.printable, packet[10:11].decode("utf-8")))
        except:
            self.uhf_pass_response_0 = ' '
        
        try:
            self.uhf_pass_response_1 = ''.join(filter(lambda x: x in string.printable, packet[11:12].decode("utf-8")))
        except:
            self.uhf_pass_response_1 = ' '
        
        try:
            self.uhf_pass_response_2 = ''.join(filter(lambda x: x in string.printable, packet[12:13].decode("utf-8")))
        except:
            self.uhf_pass_response_2 = ' '
        
        try:
            self.uhf_pass_response_3 = ''.join(filter(lambda x: x in string.printable, packet[13:14].decode("utf-8")))
        except:
            self.uhf_pass_response_3 = ' '
        
        try:
            self.uhf_pass_response_4 = ''.join(filter(lambda x: x in string.printable, packet[14:15].decode("utf-8")))
        except:
            self.uhf_pass_response_4 = ' '
        
        try:
            self.uhf_pass_response_5 = ''.join(filter(lambda x: x in string.printable, packet[15:16].decode("utf-8")))
        except:
            self.uhf_pass_response_5 = ' '
        
        try:
            self.uhf_pass_response_6 = ''.join(filter(lambda x: x in string.printable, packet[16:17].decode("utf-8")))
        except:
            self.uhf_pass_response_6 = ' '
        
        try:
            self.uhf_pass_response_7 = ''.join(filter(lambda x: x in string.printable, packet[17:18].decode("utf-8")))
        except:
            self.uhf_pass_response_7 = ' '
        
        try:
            self.uhf_pass_response_8 = ''.join(filter(lambda x: x in string.printable, packet[18:19].decode("utf-8")))
        except:
            self.uhf_pass_response_8 = ' '
        
        try:
            self.uhf_pass_response_9 = ''.join(filter(lambda x: x in string.printable, packet[19:20].decode("utf-8")))
        except:
            self.uhf_pass_response_9 = ' '
        
        try:
            self.uhf_pass_response_10 = ''.join(filter(lambda x: x in string.printable, packet[20:21].decode("utf-8")))
        except:
            self.uhf_pass_response_10 = ' '
        
        try:
            self.uhf_pass_response_11 = ''.join(filter(lambda x: x in string.printable, packet[21:22].decode("utf-8")))
        except:
            self.uhf_pass_response_11 = ' '
        
        try:
            self.uhf_pass_response_12 = ''.join(filter(lambda x: x in string.printable, packet[22:23].decode("utf-8")))
        except:
            self.uhf_pass_response_12 = ' '
        
        try:
            self.uhf_pass_response_13 = ''.join(filter(lambda x: x in string.printable, packet[23:24].decode("utf-8")))
        except:
            self.uhf_pass_response_13 = ' '
        
        try:
            self.uhf_pass_response_14 = ''.join(filter(lambda x: x in string.printable, packet[24:25].decode("utf-8")))
        except:
            self.uhf_pass_response_14 = ' '
        
        try:
            self.uhf_pass_response_15 = ''.join(filter(lambda x: x in string.printable, packet[25:26].decode("utf-8")))
        except:
            self.uhf_pass_response_15 = ' '
        
        try:
            self.uhf_pass_response_16 = ''.join(filter(lambda x: x in string.printable, packet[26:27].decode("utf-8")))
        except:
            self.uhf_pass_response_16 = ' '
        
        try:
            self.uhf_pass_response_17 = ''.join(filter(lambda x: x in string.printable, packet[27:28].decode("utf-8")))
        except:
            self.uhf_pass_response_17 = ' '
        
        try:
            self.uhf_pass_response_18 = ''.join(filter(lambda x: x in string.printable, packet[28:29].decode("utf-8")))
        except:
            self.uhf_pass_response_18 = ' '
        
        try:
            self.uhf_pass_response_19 = ''.join(filter(lambda x: x in string.printable, packet[29:30].decode("utf-8")))
        except:
            self.uhf_pass_response_19 = ' '
        
        try:
            self.uhf_pass_response_20 = ''.join(filter(lambda x: x in string.printable, packet[30:31].decode("utf-8")))
        except:
            self.uhf_pass_response_20 = ' '
        
        try:
            self.uhf_pass_response_21 = ''.join(filter(lambda x: x in string.printable, packet[31:32].decode("utf-8")))
        except:
            self.uhf_pass_response_21 = ' '
        
        try:
            self.uhf_pass_response_22 = ''.join(filter(lambda x: x in string.printable, packet[32:33].decode("utf-8")))
        except:
            self.uhf_pass_response_22 = ' '
        
        try:
            self.uhf_pass_response_23 = ''.join(filter(lambda x: x in string.printable, packet[33:34].decode("utf-8")))
        except:
            self.uhf_pass_response_23 = ' '
        
        try:
            self.uhf_pass_response_24 = ''.join(filter(lambda x: x in string.printable, packet[34:35].decode("utf-8")))
        except:
            self.uhf_pass_response_24 = ' '
        
        try:
            self.uhf_pass_response_25 = ''.join(filter(lambda x: x in string.printable, packet[35:36].decode("utf-8")))
        except:
            self.uhf_pass_response_25 = ' '
        
        try:
            self.uhf_pass_response_26 = ''.join(filter(lambda x: x in string.printable, packet[36:37].decode("utf-8")))
        except:
            self.uhf_pass_response_26 = ' '
        
        try:
            self.uhf_pass_response_27 = ''.join(filter(lambda x: x in string.printable, packet[37:38].decode("utf-8")))
        except:
            self.uhf_pass_response_27 = ' '
        
        try:
            self.uhf_pass_response_28 = ''.join(filter(lambda x: x in string.printable, packet[38:39].decode("utf-8")))
        except:
            self.uhf_pass_response_28 = ' '
        
        try:
            self.uhf_pass_response_29 = ''.join(filter(lambda x: x in string.printable, packet[39:40].decode("utf-8")))
        except:
            self.uhf_pass_response_29 = ' '
        
        try:
            self.uhf_pass_response_30 = ''.join(filter(lambda x: x in string.printable, packet[40:41].decode("utf-8")))
        except:
            self.uhf_pass_response_30 = ' '
        
        try:
            self.uhf_pass_response_31 = ''.join(filter(lambda x: x in string.printable, packet[41:42].decode("utf-8")))
        except:
            self.uhf_pass_response_31 = ' '
        
        try:
            self.uhf_pass_response_32 = ''.join(filter(lambda x: x in string.printable, packet[42:43].decode("utf-8")))
        except:
            self.uhf_pass_response_32 = ' '
        
        try:
            self.uhf_pass_response_33 = ''.join(filter(lambda x: x in string.printable, packet[43:44].decode("utf-8")))
        except:
            self.uhf_pass_response_33 = ' '
        
        try:
            self.uhf_pass_response_34 = ''.join(filter(lambda x: x in string.printable, packet[44:45].decode("utf-8")))
        except:
            self.uhf_pass_response_34 = ' '
        
        try:
            self.uhf_pass_response_35 = ''.join(filter(lambda x: x in string.printable, packet[45:46].decode("utf-8")))
        except:
            self.uhf_pass_response_35 = ' '
        
        try:
            self.uhf_pass_response_36 = ''.join(filter(lambda x: x in string.printable, packet[46:47].decode("utf-8")))
        except:
            self.uhf_pass_response_36 = ' '
        
        try:
            self.uhf_pass_response_37 = ''.join(filter(lambda x: x in string.printable, packet[47:48].decode("utf-8")))
        except:
            self.uhf_pass_response_37 = ' '
        
        try:
            self.uhf_pass_response_38 = ''.join(filter(lambda x: x in string.printable, packet[48:49].decode("utf-8")))
        except:
            self.uhf_pass_response_38 = ' '
        
        try:
            self.uhf_pass_response_39 = ''.join(filter(lambda x: x in string.printable, packet[49:50].decode("utf-8")))
        except:
            self.uhf_pass_response_39 = ' '
        
        try:
            self.uhf_pass_response_40 = ''.join(filter(lambda x: x in string.printable, packet[50:51].decode("utf-8")))
        except:
            self.uhf_pass_response_40 = ' '
        
        try:
            self.uhf_pass_response_41 = ''.join(filter(lambda x: x in string.printable, packet[51:52].decode("utf-8")))
        except:
            self.uhf_pass_response_41 = ' '
        
        try:
            self.uhf_pass_response_42 = ''.join(filter(lambda x: x in string.printable, packet[52:53].decode("utf-8")))
        except:
            self.uhf_pass_response_42 = ' '
        
        try:
            self.uhf_pass_response_43 = ''.join(filter(lambda x: x in string.printable, packet[53:54].decode("utf-8")))
        except:
            self.uhf_pass_response_43 = ' '
        
        try:
            self.uhf_pass_response_44 = ''.join(filter(lambda x: x in string.printable, packet[54:55].decode("utf-8")))
        except:
            self.uhf_pass_response_44 = ' '
        
        try:
            self.uhf_pass_response_45 = ''.join(filter(lambda x: x in string.printable, packet[55:56].decode("utf-8")))
        except:
            self.uhf_pass_response_45 = ' '
        
        try:
            self.uhf_pass_response_46 = ''.join(filter(lambda x: x in string.printable, packet[56:57].decode("utf-8")))
        except:
            self.uhf_pass_response_46 = ' '
        
        try:
            self.uhf_pass_response_47 = ''.join(filter(lambda x: x in string.printable, packet[57:58].decode("utf-8")))
        except:
            self.uhf_pass_response_47 = ' '
        
        try:
            self.uhf_pass_response_48 = ''.join(filter(lambda x: x in string.printable, packet[58:59].decode("utf-8")))
        except:
            self.uhf_pass_response_48 = ' '
        
        try:
            self.uhf_pass_response_49 = ''.join(filter(lambda x: x in string.printable, packet[59:60].decode("utf-8")))
        except:
            self.uhf_pass_response_49 = ' '
        
        try:
            self.uhf_pass_response_50 = ''.join(filter(lambda x: x in string.printable, packet[60:61].decode("utf-8")))
        except:
            self.uhf_pass_response_50 = ' '
        
        try:
            self.uhf_pass_response_51 = ''.join(filter(lambda x: x in string.printable, packet[61:62].decode("utf-8")))
        except:
            self.uhf_pass_response_51 = ' '
        
        try:
            self.uhf_pass_response_52 = ''.join(filter(lambda x: x in string.printable, packet[62:63].decode("utf-8")))
        except:
            self.uhf_pass_response_52 = ' '
        
        try:
            self.uhf_pass_response_53 = ''.join(filter(lambda x: x in string.printable, packet[63:64].decode("utf-8")))
        except:
            self.uhf_pass_response_53 = ' '
        
        try:
            self.uhf_pass_response_54 = ''.join(filter(lambda x: x in string.printable, packet[64:65].decode("utf-8")))
        except:
            self.uhf_pass_response_54 = ' '
        
        try:
            self.uhf_pass_response_55 = ''.join(filter(lambda x: x in string.printable, packet[65:66].decode("utf-8")))
        except:
            self.uhf_pass_response_55 = ' '
        
        try:
            self.uhf_pass_response_56 = ''.join(filter(lambda x: x in string.printable, packet[66:67].decode("utf-8")))
        except:
            self.uhf_pass_response_56 = ' '
        
        try:
            self.uhf_pass_response_57 = ''.join(filter(lambda x: x in string.printable, packet[67:68].decode("utf-8")))
        except:
            self.uhf_pass_response_57 = ' '
        
        try:
            self.uhf_pass_response_58 = ''.join(filter(lambda x: x in string.printable, packet[68:69].decode("utf-8")))
        except:
            self.uhf_pass_response_58 = ' '
        
        try:
            self.uhf_pass_response_59 = ''.join(filter(lambda x: x in string.printable, packet[69:70].decode("utf-8")))
        except:
            self.uhf_pass_response_59 = ' '
        
        try:
            self.uhf_pass_response_60 = ''.join(filter(lambda x: x in string.printable, packet[70:71].decode("utf-8")))
        except:
            self.uhf_pass_response_60 = ' '
        
        try:
            self.uhf_pass_response_61 = ''.join(filter(lambda x: x in string.printable, packet[71:72].decode("utf-8")))
        except:
            self.uhf_pass_response_61 = ' '
        
        try:
            self.uhf_pass_response_62 = ''.join(filter(lambda x: x in string.printable, packet[72:73].decode("utf-8")))
        except:
            self.uhf_pass_response_62 = ' '
        
        try:
            self.uhf_pass_response_63 = ''.join(filter(lambda x: x in string.printable, packet[73:74].decode("utf-8")))
        except:
            self.uhf_pass_response_63 = ' '
        
        try:
            self.uhf_pass_response_64 = ''.join(filter(lambda x: x in string.printable, packet[74:75].decode("utf-8")))
        except:
            self.uhf_pass_response_64 = ' '
        
        try:
            self.uhf_pass_response_65 = ''.join(filter(lambda x: x in string.printable, packet[75:76].decode("utf-8")))
        except:
            self.uhf_pass_response_65 = ' '
        
        try:
            self.uhf_pass_response_66 = ''.join(filter(lambda x: x in string.printable, packet[76:77].decode("utf-8")))
        except:
            self.uhf_pass_response_66 = ' '
        
        try:
            self.uhf_pass_response_67 = ''.join(filter(lambda x: x in string.printable, packet[77:78].decode("utf-8")))
        except:
            self.uhf_pass_response_67 = ' '
        
        try:
            self.uhf_pass_response_68 = ''.join(filter(lambda x: x in string.printable, packet[78:79].decode("utf-8")))
        except:
            self.uhf_pass_response_68 = ' '
        
        try:
            self.uhf_pass_response_69 = ''.join(filter(lambda x: x in string.printable, packet[79:80].decode("utf-8")))
        except:
            self.uhf_pass_response_69 = ' '
        
        try:
            self.uhf_pass_response_70 = ''.join(filter(lambda x: x in string.printable, packet[80:81].decode("utf-8")))
        except:
            self.uhf_pass_response_70 = ' '
        
        try:
            self.uhf_pass_response_71 = ''.join(filter(lambda x: x in string.printable, packet[81:82].decode("utf-8")))
        except:
            self.uhf_pass_response_71 = ' '
        
        try:
            self.uhf_pass_response_72 = ''.join(filter(lambda x: x in string.printable, packet[82:83].decode("utf-8")))
        except:
            self.uhf_pass_response_72 = ' '
        
        try:
            self.uhf_pass_response_73 = ''.join(filter(lambda x: x in string.printable, packet[83:84].decode("utf-8")))
        except:
            self.uhf_pass_response_73 = ' '
        
        try:
            self.uhf_pass_response_74 = ''.join(filter(lambda x: x in string.printable, packet[84:85].decode("utf-8")))
        except:
            self.uhf_pass_response_74 = ' '
        
        try:
            self.uhf_pass_response_75 = ''.join(filter(lambda x: x in string.printable, packet[85:86].decode("utf-8")))
        except:
            self.uhf_pass_response_75 = ' '
        
        try:
            self.uhf_pass_response_76 = ''.join(filter(lambda x: x in string.printable, packet[86:87].decode("utf-8")))
        except:
            self.uhf_pass_response_76 = ' '
        
        try:
            self.uhf_pass_response_77 = ''.join(filter(lambda x: x in string.printable, packet[87:88].decode("utf-8")))
        except:
            self.uhf_pass_response_77 = ' '
        
        try:
            self.uhf_pass_response_78 = ''.join(filter(lambda x: x in string.printable, packet[88:89].decode("utf-8")))
        except:
            self.uhf_pass_response_78 = ' '
        
        try:
            self.uhf_pass_response_79 = ''.join(filter(lambda x: x in string.printable, packet[89:90].decode("utf-8")))
        except:
            self.uhf_pass_response_79 = ' '
        
        try:
            self.uhf_pass_response_80 = ''.join(filter(lambda x: x in string.printable, packet[90:91].decode("utf-8")))
        except:
            self.uhf_pass_response_80 = ' '
        
        try:
            self.uhf_pass_response_81 = ''.join(filter(lambda x: x in string.printable, packet[91:92].decode("utf-8")))
        except:
            self.uhf_pass_response_81 = ' '
        
        try:
            self.uhf_pass_response_82 = ''.join(filter(lambda x: x in string.printable, packet[92:93].decode("utf-8")))
        except:
            self.uhf_pass_response_82 = ' '
        
        try:
            self.uhf_pass_response_83 = ''.join(filter(lambda x: x in string.printable, packet[93:94].decode("utf-8")))
        except:
            self.uhf_pass_response_83 = ' '
        
        try:
            self.uhf_pass_response_84 = ''.join(filter(lambda x: x in string.printable, packet[94:95].decode("utf-8")))
        except:
            self.uhf_pass_response_84 = ' '
        
        try:
            self.uhf_pass_response_85 = ''.join(filter(lambda x: x in string.printable, packet[95:96].decode("utf-8")))
        except:
            self.uhf_pass_response_85 = ' '
        
        try:
            self.uhf_pass_response_86 = ''.join(filter(lambda x: x in string.printable, packet[96:97].decode("utf-8")))
        except:
            self.uhf_pass_response_86 = ' '
        
        try:
            self.uhf_pass_response_87 = ''.join(filter(lambda x: x in string.printable, packet[97:98].decode("utf-8")))
        except:
            self.uhf_pass_response_87 = ' '
        
        try:
            self.uhf_pass_response_88 = ''.join(filter(lambda x: x in string.printable, packet[98:99].decode("utf-8")))
        except:
            self.uhf_pass_response_88 = ' '
        
        try:
            self.uhf_pass_response_89 = ''.join(filter(lambda x: x in string.printable, packet[99:100].decode("utf-8")))
        except:
            self.uhf_pass_response_89 = ' '
        
        try:
            self.uhf_pass_response_90 = ''.join(filter(lambda x: x in string.printable, packet[100:101].decode("utf-8")))
        except:
            self.uhf_pass_response_90 = ' '
        
        try:
            self.uhf_pass_response_91 = ''.join(filter(lambda x: x in string.printable, packet[101:102].decode("utf-8")))
        except:
            self.uhf_pass_response_91 = ' '
        
        try:
            self.uhf_pass_response_92 = ''.join(filter(lambda x: x in string.printable, packet[102:103].decode("utf-8")))
        except:
            self.uhf_pass_response_92 = ' '
        
        try:
            self.uhf_pass_response_93 = ''.join(filter(lambda x: x in string.printable, packet[103:104].decode("utf-8")))
        except:
            self.uhf_pass_response_93 = ' '
        
        try:
            self.uhf_pass_response_94 = ''.join(filter(lambda x: x in string.printable, packet[104:105].decode("utf-8")))
        except:
            self.uhf_pass_response_94 = ' '
        
        try:
            self.uhf_pass_response_95 = ''.join(filter(lambda x: x in string.printable, packet[105:106].decode("utf-8")))
        except:
            self.uhf_pass_response_95 = ' '
        
        try:
            self.uhf_pass_response_96 = ''.join(filter(lambda x: x in string.printable, packet[106:107].decode("utf-8")))
        except:
            self.uhf_pass_response_96 = ' '
        
        try:
            self.uhf_pass_response_97 = ''.join(filter(lambda x: x in string.printable, packet[107:108].decode("utf-8")))
        except:
            self.uhf_pass_response_97 = ' '
        
        try:
            self.uhf_pass_response_98 = ''.join(filter(lambda x: x in string.printable, packet[108:109].decode("utf-8")))
        except:
            self.uhf_pass_response_98 = ' '
        
        try:
            self.uhf_pass_response_99 = ''.join(filter(lambda x: x in string.printable, packet[109:110].decode("utf-8")))
        except:
            self.uhf_pass_response_99 = ' '
        
        try:
            self.uhf_pass_response_100 = ''.join(filter(lambda x: x in string.printable, packet[110:111].decode("utf-8")))
        except:
            self.uhf_pass_response_100 = ' '
        
        try:
            self.uhf_pass_response_101 = ''.join(filter(lambda x: x in string.printable, packet[111:112].decode("utf-8")))
        except:
            self.uhf_pass_response_101 = ' '
        
        try:
            self.uhf_pass_response_102 = ''.join(filter(lambda x: x in string.printable, packet[112:113].decode("utf-8")))
        except:
            self.uhf_pass_response_102 = ' '
        
        try:
            self.uhf_pass_response_103 = ''.join(filter(lambda x: x in string.printable, packet[113:114].decode("utf-8")))
        except:
            self.uhf_pass_response_103 = ' '
        
        try:
            self.uhf_pass_response_104 = ''.join(filter(lambda x: x in string.printable, packet[114:115].decode("utf-8")))
        except:
            self.uhf_pass_response_104 = ' '
        
        try:
            self.uhf_pass_response_105 = ''.join(filter(lambda x: x in string.printable, packet[115:116].decode("utf-8")))
        except:
            self.uhf_pass_response_105 = ' '
        
        try:
            self.uhf_pass_response_106 = ''.join(filter(lambda x: x in string.printable, packet[116:117].decode("utf-8")))
        except:
            self.uhf_pass_response_106 = ' '
        
        try:
            self.uhf_pass_response_107 = ''.join(filter(lambda x: x in string.printable, packet[117:118].decode("utf-8")))
        except:
            self.uhf_pass_response_107 = ' '
        
        try:
            self.uhf_pass_response_108 = ''.join(filter(lambda x: x in string.printable, packet[118:119].decode("utf-8")))
        except:
            self.uhf_pass_response_108 = ' '
        
        try:
            self.uhf_pass_response_109 = ''.join(filter(lambda x: x in string.printable, packet[119:120].decode("utf-8")))
        except:
            self.uhf_pass_response_109 = ' '
        
        try:
            self.uhf_pass_response_110 = ''.join(filter(lambda x: x in string.printable, packet[120:121].decode("utf-8")))
        except:
            self.uhf_pass_response_110 = ' '
        
        try:
            self.uhf_pass_response_111 = ''.join(filter(lambda x: x in string.printable, packet[121:122].decode("utf-8")))
        except:
            self.uhf_pass_response_111 = ' '
        
        try:
            self.uhf_pass_response_112 = ''.join(filter(lambda x: x in string.printable, packet[122:123].decode("utf-8")))
        except:
            self.uhf_pass_response_112 = ' '
        
        try:
            self.uhf_pass_response_113 = ''.join(filter(lambda x: x in string.printable, packet[123:124].decode("utf-8")))
        except:
            self.uhf_pass_response_113 = ' '
        
        try:
            self.uhf_pass_response_114 = ''.join(filter(lambda x: x in string.printable, packet[124:125].decode("utf-8")))
        except:
            self.uhf_pass_response_114 = ' '
        
        try:
            self.uhf_pass_response_115 = ''.join(filter(lambda x: x in string.printable, packet[125:126].decode("utf-8")))
        except:
            self.uhf_pass_response_115 = ' '
        
        try:
            self.uhf_pass_response_116 = ''.join(filter(lambda x: x in string.printable, packet[126:127].decode("utf-8")))
        except:
            self.uhf_pass_response_116 = ' '
        
        try:
            self.uhf_pass_response_117 = ''.join(filter(lambda x: x in string.printable, packet[127:128].decode("utf-8")))
        except:
            self.uhf_pass_response_117 = ' '
        
        try:
            self.uhf_pass_response_118 = ''.join(filter(lambda x: x in string.printable, packet[128:129].decode("utf-8")))
        except:
            self.uhf_pass_response_118 = ' '
        
        try:
            self.uhf_pass_response_119 = ''.join(filter(lambda x: x in string.printable, packet[129:130].decode("utf-8")))
        except:
            self.uhf_pass_response_119 = ' '
        
        try:
            self.uhf_pass_response_120 = ''.join(filter(lambda x: x in string.printable, packet[130:131].decode("utf-8")))
        except:
            self.uhf_pass_response_120 = ' '
        
        try:
            self.uhf_pass_response_121 = ''.join(filter(lambda x: x in string.printable, packet[131:132].decode("utf-8")))
        except:
            self.uhf_pass_response_121 = ' '
        
        try:
            self.uhf_pass_response_122 = ''.join(filter(lambda x: x in string.printable, packet[132:133].decode("utf-8")))
        except:
            self.uhf_pass_response_122 = ' '
        
        try:
            self.uhf_pass_response_123 = ''.join(filter(lambda x: x in string.printable, packet[133:134].decode("utf-8")))
        except:
            self.uhf_pass_response_123 = ' '
        
        try:
            self.uhf_pass_response_124 = ''.join(filter(lambda x: x in string.printable, packet[134:135].decode("utf-8")))
        except:
            self.uhf_pass_response_124 = ' '
        
        try:
            self.uhf_pass_response_125 = ''.join(filter(lambda x: x in string.printable, packet[135:136].decode("utf-8")))
        except:
            self.uhf_pass_response_125 = ' '
        
        try:
            self.uhf_pass_response_126 = ''.join(filter(lambda x: x in string.printable, packet[136:137].decode("utf-8")))
        except:
            self.uhf_pass_response_126 = ' '
        
        try:
            self.uhf_pass_response_127 = ''.join(filter(lambda x: x in string.printable, packet[137:138].decode("utf-8")))
        except:
            self.uhf_pass_response_127 = ' '
        
        try:
            self.uhf_pass_response_128 = ''.join(filter(lambda x: x in string.printable, packet[138:139].decode("utf-8")))
        except:
            self.uhf_pass_response_128 = ' '
        
        try:
            self.uhf_pass_response_129 = ''.join(filter(lambda x: x in string.printable, packet[139:140].decode("utf-8")))
        except:
            self.uhf_pass_response_129 = ' '
        
        try:
            self.uhf_pass_response_130 = ''.join(filter(lambda x: x in string.printable, packet[140:141].decode("utf-8")))
        except:
            self.uhf_pass_response_130 = ' '
        
        try:
            self.uhf_pass_response_131 = ''.join(filter(lambda x: x in string.printable, packet[141:142].decode("utf-8")))
        except:
            self.uhf_pass_response_131 = ' '
        
        try:
            self.uhf_pass_response_132 = ''.join(filter(lambda x: x in string.printable, packet[142:143].decode("utf-8")))
        except:
            self.uhf_pass_response_132 = ' '
        
        try:
            self.uhf_pass_response_133 = ''.join(filter(lambda x: x in string.printable, packet[143:144].decode("utf-8")))
        except:
            self.uhf_pass_response_133 = ' '
        
        try:
            self.uhf_pass_response_134 = ''.join(filter(lambda x: x in string.printable, packet[144:145].decode("utf-8")))
        except:
            self.uhf_pass_response_134 = ' '
        
        try:
            self.uhf_pass_response_135 = ''.join(filter(lambda x: x in string.printable, packet[145:146].decode("utf-8")))
        except:
            self.uhf_pass_response_135 = ' '
        
        try:
            self.uhf_pass_response_136 = ''.join(filter(lambda x: x in string.printable, packet[146:147].decode("utf-8")))
        except:
            self.uhf_pass_response_136 = ' '
        
        try:
            self.uhf_pass_response_137 = ''.join(filter(lambda x: x in string.printable, packet[147:148].decode("utf-8")))
        except:
            self.uhf_pass_response_137 = ' '
        
        try:
            self.uhf_pass_response_138 = ''.join(filter(lambda x: x in string.printable, packet[148:149].decode("utf-8")))
        except:
            self.uhf_pass_response_138 = ' '
        
        try:
            self.uhf_pass_response_139 = ''.join(filter(lambda x: x in string.printable, packet[149:150].decode("utf-8")))
        except:
            self.uhf_pass_response_139 = ' '
        
        try:
            self.uhf_pass_response_140 = ''.join(filter(lambda x: x in string.printable, packet[150:151].decode("utf-8")))
        except:
            self.uhf_pass_response_140 = ' '
        
        try:
            self.uhf_pass_response_141 = ''.join(filter(lambda x: x in string.printable, packet[151:152].decode("utf-8")))
        except:
            self.uhf_pass_response_141 = ' '
        
        try:
            self.uhf_pass_response_142 = ''.join(filter(lambda x: x in string.printable, packet[152:153].decode("utf-8")))
        except:
            self.uhf_pass_response_142 = ' '
        
        try:
            self.uhf_pass_response_143 = ''.join(filter(lambda x: x in string.printable, packet[153:154].decode("utf-8")))
        except:
            self.uhf_pass_response_143 = ' '
        
        try:
            self.uhf_pass_response_144 = ''.join(filter(lambda x: x in string.printable, packet[154:155].decode("utf-8")))
        except:
            self.uhf_pass_response_144 = ' '
        
        try:
            self.uhf_pass_response_145 = ''.join(filter(lambda x: x in string.printable, packet[155:156].decode("utf-8")))
        except:
            self.uhf_pass_response_145 = ' '
        
        try:
            self.uhf_pass_response_146 = ''.join(filter(lambda x: x in string.printable, packet[156:157].decode("utf-8")))
        except:
            self.uhf_pass_response_146 = ' '
        
        try:
            self.uhf_pass_response_147 = ''.join(filter(lambda x: x in string.printable, packet[157:158].decode("utf-8")))
        except:
            self.uhf_pass_response_147 = ' '
        
        try:
            self.uhf_pass_response_148 = ''.join(filter(lambda x: x in string.printable, packet[158:159].decode("utf-8")))
        except:
            self.uhf_pass_response_148 = ' '
        
        try:
            self.uhf_pass_response_149 = ''.join(filter(lambda x: x in string.printable, packet[159:160].decode("utf-8")))
        except:
            self.uhf_pass_response_149 = ' '
        
        try:
            self.uhf_pass_response_150 = ''.join(filter(lambda x: x in string.printable, packet[160:161].decode("utf-8")))
        except:
            self.uhf_pass_response_150 = ' '
        
        try:
            self.uhf_pass_response_151 = ''.join(filter(lambda x: x in string.printable, packet[161:162].decode("utf-8")))
        except:
            self.uhf_pass_response_151 = ' '
        
        try:
            self.uhf_pass_response_152 = ''.join(filter(lambda x: x in string.printable, packet[162:163].decode("utf-8")))
        except:
            self.uhf_pass_response_152 = ' '
        
        try:
            self.uhf_pass_response_153 = ''.join(filter(lambda x: x in string.printable, packet[163:164].decode("utf-8")))
        except:
            self.uhf_pass_response_153 = ' '
        
        try:
            self.uhf_pass_response_154 = ''.join(filter(lambda x: x in string.printable, packet[164:165].decode("utf-8")))
        except:
            self.uhf_pass_response_154 = ' '
        
        try:
            self.uhf_pass_response_155 = ''.join(filter(lambda x: x in string.printable, packet[165:166].decode("utf-8")))
        except:
            self.uhf_pass_response_155 = ' '
        
        try:
            self.uhf_pass_response_156 = ''.join(filter(lambda x: x in string.printable, packet[166:167].decode("utf-8")))
        except:
            self.uhf_pass_response_156 = ' '
        
        try:
            self.uhf_pass_response_157 = ''.join(filter(lambda x: x in string.printable, packet[167:168].decode("utf-8")))
        except:
            self.uhf_pass_response_157 = ' '
        
        try:
            self.uhf_pass_response_158 = ''.join(filter(lambda x: x in string.printable, packet[168:169].decode("utf-8")))
        except:
            self.uhf_pass_response_158 = ' '
        
        try:
            self.uhf_pass_response_159 = ''.join(filter(lambda x: x in string.printable, packet[169:170].decode("utf-8")))
        except:
            self.uhf_pass_response_159 = ' '
        
        try:
            self.uhf_pass_response_160 = ''.join(filter(lambda x: x in string.printable, packet[170:171].decode("utf-8")))
        except:
            self.uhf_pass_response_160 = ' '
        
        try:
            self.uhf_pass_response_161 = ''.join(filter(lambda x: x in string.printable, packet[171:172].decode("utf-8")))
        except:
            self.uhf_pass_response_161 = ' '
        
        try:
            self.uhf_pass_response_162 = ''.join(filter(lambda x: x in string.printable, packet[172:173].decode("utf-8")))
        except:
            self.uhf_pass_response_162 = ' '
        
        try:
            self.uhf_pass_response_163 = ''.join(filter(lambda x: x in string.printable, packet[173:174].decode("utf-8")))
        except:
            self.uhf_pass_response_163 = ' '
        
        try:
            self.uhf_pass_response_164 = ''.join(filter(lambda x: x in string.printable, packet[174:175].decode("utf-8")))
        except:
            self.uhf_pass_response_164 = ' '
        
        try:
            self.uhf_pass_response_165 = ''.join(filter(lambda x: x in string.printable, packet[175:176].decode("utf-8")))
        except:
            self.uhf_pass_response_165 = ' '
        
        try:
            self.uhf_pass_response_166 = ''.join(filter(lambda x: x in string.printable, packet[176:177].decode("utf-8")))
        except:
            self.uhf_pass_response_166 = ' '
        
        try:
            self.uhf_pass_response_167 = ''.join(filter(lambda x: x in string.printable, packet[177:178].decode("utf-8")))
        except:
            self.uhf_pass_response_167 = ' '
        
        try:
            self.uhf_pass_response_168 = ''.join(filter(lambda x: x in string.printable, packet[178:179].decode("utf-8")))
        except:
            self.uhf_pass_response_168 = ' '
        
        try:
            self.uhf_pass_response_169 = ''.join(filter(lambda x: x in string.printable, packet[179:180].decode("utf-8")))
        except:
            self.uhf_pass_response_169 = ' '
        
        try:
            self.uhf_pass_response_170 = ''.join(filter(lambda x: x in string.printable, packet[180:181].decode("utf-8")))
        except:
            self.uhf_pass_response_170 = ' '
        
        try:
            self.uhf_pass_response_171 = ''.join(filter(lambda x: x in string.printable, packet[181:182].decode("utf-8")))
        except:
            self.uhf_pass_response_171 = ' '
        
        try:
            self.uhf_pass_response_172 = ''.join(filter(lambda x: x in string.printable, packet[182:183].decode("utf-8")))
        except:
            self.uhf_pass_response_172 = ' '
        
        try:
            self.uhf_pass_response_173 = ''.join(filter(lambda x: x in string.printable, packet[183:184].decode("utf-8")))
        except:
            self.uhf_pass_response_173 = ' '
        
        try:
            self.uhf_pass_response_174 = ''.join(filter(lambda x: x in string.printable, packet[184:185].decode("utf-8")))
        except:
            self.uhf_pass_response_174 = ' '
        
        try:
            self.uhf_pass_response_175 = ''.join(filter(lambda x: x in string.printable, packet[185:186].decode("utf-8")))
        except:
            self.uhf_pass_response_175 = ' '
        
        try:
            self.uhf_pass_response_176 = ''.join(filter(lambda x: x in string.printable, packet[186:187].decode("utf-8")))
        except:
            self.uhf_pass_response_176 = ' '
        
        try:
            self.uhf_pass_response_177 = ''.join(filter(lambda x: x in string.printable, packet[187:188].decode("utf-8")))
        except:
            self.uhf_pass_response_177 = ' '
        
        try:
            self.uhf_pass_response_178 = ''.join(filter(lambda x: x in string.printable, packet[188:189].decode("utf-8")))
        except:
            self.uhf_pass_response_178 = ' '
        
        try:
            self.uhf_pass_response_179 = ''.join(filter(lambda x: x in string.printable, packet[189:190].decode("utf-8")))
        except:
            self.uhf_pass_response_179 = ' '
        
        try:
            self.uhf_pass_response_180 = ''.join(filter(lambda x: x in string.printable, packet[190:191].decode("utf-8")))
        except:
            self.uhf_pass_response_180 = ' '
        
        try:
            self.uhf_pass_response_181 = ''.join(filter(lambda x: x in string.printable, packet[191:192].decode("utf-8")))
        except:
            self.uhf_pass_response_181 = ' '
        
        try:
            self.uhf_pass_response_182 = ''.join(filter(lambda x: x in string.printable, packet[192:193].decode("utf-8")))
        except:
            self.uhf_pass_response_182 = ' '
        
        try:
            self.uhf_pass_response_183 = ''.join(filter(lambda x: x in string.printable, packet[193:194].decode("utf-8")))
        except:
            self.uhf_pass_response_183 = ' '
        
        try:
            self.uhf_pass_response_184 = ''.join(filter(lambda x: x in string.printable, packet[194:195].decode("utf-8")))
        except:
            self.uhf_pass_response_184 = ' '
        
        try:
            self.uhf_pass_response_185 = ''.join(filter(lambda x: x in string.printable, packet[195:196].decode("utf-8")))
        except:
            self.uhf_pass_response_185 = ' '
        
        try:
            self.uhf_pass_response_186 = ''.join(filter(lambda x: x in string.printable, packet[196:197].decode("utf-8")))
        except:
            self.uhf_pass_response_186 = ' '
        
        try:
            self.uhf_pass_response_187 = ''.join(filter(lambda x: x in string.printable, packet[197:198].decode("utf-8")))
        except:
            self.uhf_pass_response_187 = ' '
        
        try:
            self.uhf_pass_response_188 = ''.join(filter(lambda x: x in string.printable, packet[198:199].decode("utf-8")))
        except:
            self.uhf_pass_response_188 = ' '
        
        try:
            self.uhf_pass_response_189 = ''.join(filter(lambda x: x in string.printable, packet[199:200].decode("utf-8")))
        except:
            self.uhf_pass_response_189 = ' '
        
        try:
            self.uhf_pass_response_190 = ''.join(filter(lambda x: x in string.printable, packet[200:201].decode("utf-8")))
        except:
            self.uhf_pass_response_190 = ' '
        
        try:
            self.uhf_pass_response_191 = ''.join(filter(lambda x: x in string.printable, packet[201:202].decode("utf-8")))
        except:
            self.uhf_pass_response_191 = ' '
        
        try:
            self.uhf_pass_response_192 = ''.join(filter(lambda x: x in string.printable, packet[202:203].decode("utf-8")))
        except:
            self.uhf_pass_response_192 = ' '
        
        try:
            self.uhf_pass_response_193 = ''.join(filter(lambda x: x in string.printable, packet[203:204].decode("utf-8")))
        except:
            self.uhf_pass_response_193 = ' '
        
        try:
            self.uhf_pass_response_194 = ''.join(filter(lambda x: x in string.printable, packet[204:205].decode("utf-8")))
        except:
            self.uhf_pass_response_194 = ' '
        
        try:
            self.uhf_pass_response_195 = ''.join(filter(lambda x: x in string.printable, packet[205:206].decode("utf-8")))
        except:
            self.uhf_pass_response_195 = ' '
        
        try:
            self.uhf_pass_response_196 = ''.join(filter(lambda x: x in string.printable, packet[206:207].decode("utf-8")))
        except:
            self.uhf_pass_response_196 = ' '
        
        try:
            self.uhf_pass_response_197 = ''.join(filter(lambda x: x in string.printable, packet[207:208].decode("utf-8")))
        except:
            self.uhf_pass_response_197 = ' '
        
        try:
            self.uhf_pass_response_198 = ''.join(filter(lambda x: x in string.printable, packet[208:209].decode("utf-8")))
        except:
            self.uhf_pass_response_198 = ' '
        
        try:
            self.uhf_pass_response_199 = ''.join(filter(lambda x: x in string.printable, packet[209:210].decode("utf-8")))
        except:
            self.uhf_pass_response_199 = ' '
        
        try:
            self.uhf_pass_response_200 = ''.join(filter(lambda x: x in string.printable, packet[210:211].decode("utf-8")))
        except:
            self.uhf_pass_response_200 = ' '
        
        try:
            self.uhf_pass_response_201 = ''.join(filter(lambda x: x in string.printable, packet[211:212].decode("utf-8")))
        except:
            self.uhf_pass_response_201 = ' '
        
        try:
            self.uhf_pass_response_202 = ''.join(filter(lambda x: x in string.printable, packet[212:213].decode("utf-8")))
        except:
            self.uhf_pass_response_202 = ' '
        
        try:
            self.uhf_pass_response_203 = ''.join(filter(lambda x: x in string.printable, packet[213:214].decode("utf-8")))
        except:
            self.uhf_pass_response_203 = ' '
        
        try:
            self.uhf_pass_response_204 = ''.join(filter(lambda x: x in string.printable, packet[214:215].decode("utf-8")))
        except:
            self.uhf_pass_response_204 = ' '
        
        try:
            self.uhf_pass_response_205 = ''.join(filter(lambda x: x in string.printable, packet[215:216].decode("utf-8")))
        except:
            self.uhf_pass_response_205 = ' '
        
        try:
            self.uhf_pass_response_206 = ''.join(filter(lambda x: x in string.printable, packet[216:217].decode("utf-8")))
        except:
            self.uhf_pass_response_206 = ' '
        
        try:
            self.uhf_pass_response_207 = ''.join(filter(lambda x: x in string.printable, packet[217:218].decode("utf-8")))
        except:
            self.uhf_pass_response_207 = ' '
        
        try:
            self.uhf_pass_response_208 = ''.join(filter(lambda x: x in string.printable, packet[218:219].decode("utf-8")))
        except:
            self.uhf_pass_response_208 = ' '
        
        try:
            self.uhf_pass_response_209 = ''.join(filter(lambda x: x in string.printable, packet[219:220].decode("utf-8")))
        except:
            self.uhf_pass_response_209 = ' '
        
        try:
            self.uhf_pass_response_210 = ''.join(filter(lambda x: x in string.printable, packet[220:221].decode("utf-8")))
        except:
            self.uhf_pass_response_210 = ' '
        
        try:
            self.uhf_pass_response_211 = ''.join(filter(lambda x: x in string.printable, packet[221:222].decode("utf-8")))
        except:
            self.uhf_pass_response_211 = ' '
        
        try:
            self.uhf_pass_response_212 = ''.join(filter(lambda x: x in string.printable, packet[222:223].decode("utf-8")))
        except:
            self.uhf_pass_response_212 = ' '
        
        try:
            self.uhf_pass_response_213 = ''.join(filter(lambda x: x in string.printable, packet[223:224].decode("utf-8")))
        except:
            self.uhf_pass_response_213 = ' '
        
        try:
            self.uhf_pass_response_214 = ''.join(filter(lambda x: x in string.printable, packet[224:225].decode("utf-8")))
        except:
            self.uhf_pass_response_214 = ' '
        
        try:
            self.uhf_pass_response_215 = ''.join(filter(lambda x: x in string.printable, packet[225:226].decode("utf-8")))
        except:
            self.uhf_pass_response_215 = ' '
        
        try:
            self.uhf_pass_response_216 = ''.join(filter(lambda x: x in string.printable, packet[226:227].decode("utf-8")))
        except:
            self.uhf_pass_response_216 = ' '
        
        try:
            self.uhf_pass_response_217 = ''.join(filter(lambda x: x in string.printable, packet[227:228].decode("utf-8")))
        except:
            self.uhf_pass_response_217 = ' '
        
        try:
            self.uhf_pass_response_218 = ''.join(filter(lambda x: x in string.printable, packet[228:229].decode("utf-8")))
        except:
            self.uhf_pass_response_218 = ' '
        
        try:
            self.uhf_pass_response_219 = ''.join(filter(lambda x: x in string.printable, packet[229:230].decode("utf-8")))
        except:
            self.uhf_pass_response_219 = ' '
        
        try:
            self.uhf_pass_response_220 = ''.join(filter(lambda x: x in string.printable, packet[230:231].decode("utf-8")))
        except:
            self.uhf_pass_response_220 = ' '
        
        try:
            self.uhf_pass_response_221 = ''.join(filter(lambda x: x in string.printable, packet[231:232].decode("utf-8")))
        except:
            self.uhf_pass_response_221 = ' '
        
        try:
            self.uhf_pass_response_222 = ''.join(filter(lambda x: x in string.printable, packet[232:233].decode("utf-8")))
        except:
            self.uhf_pass_response_222 = ' '
        
        try:
            self.uhf_pass_response_223 = ''.join(filter(lambda x: x in string.printable, packet[233:234].decode("utf-8")))
        except:
            self.uhf_pass_response_223 = ' '
        
        try:
            self.uhf_pass_response_224 = ''.join(filter(lambda x: x in string.printable, packet[234:235].decode("utf-8")))
        except:
            self.uhf_pass_response_224 = ' '
        
        try:
            self.uhf_pass_response_225 = ''.join(filter(lambda x: x in string.printable, packet[235:236].decode("utf-8")))
        except:
            self.uhf_pass_response_225 = ' '
        
        try:
            self.uhf_pass_response_226 = ''.join(filter(lambda x: x in string.printable, packet[236:237].decode("utf-8")))
        except:
            self.uhf_pass_response_226 = ' '
        
        try:
            self.uhf_pass_response_227 = ''.join(filter(lambda x: x in string.printable, packet[237:238].decode("utf-8")))
        except:
            self.uhf_pass_response_227 = ' '
        
        try:
            self.uhf_pass_response_228 = ''.join(filter(lambda x: x in string.printable, packet[238:239].decode("utf-8")))
        except:
            self.uhf_pass_response_228 = ' '
        
        try:
            self.uhf_pass_response_229 = ''.join(filter(lambda x: x in string.printable, packet[239:240].decode("utf-8")))
        except:
            self.uhf_pass_response_229 = ' '
        
        try:
            self.uhf_pass_response_230 = ''.join(filter(lambda x: x in string.printable, packet[240:241].decode("utf-8")))
        except:
            self.uhf_pass_response_230 = ' '
        
        try:
            self.uhf_pass_response_231 = ''.join(filter(lambda x: x in string.printable, packet[241:242].decode("utf-8")))
        except:
            self.uhf_pass_response_231 = ' '
        
        try:
            self.uhf_pass_response_232 = ''.join(filter(lambda x: x in string.printable, packet[242:243].decode("utf-8")))
        except:
            self.uhf_pass_response_232 = ' '
        
        try:
            self.uhf_pass_response_233 = ''.join(filter(lambda x: x in string.printable, packet[243:244].decode("utf-8")))
        except:
            self.uhf_pass_response_233 = ' '
        
        try:
            self.uhf_pass_response_234 = ''.join(filter(lambda x: x in string.printable, packet[244:245].decode("utf-8")))
        except:
            self.uhf_pass_response_234 = ' '
        
        try:
            self.uhf_pass_response_235 = ''.join(filter(lambda x: x in string.printable, packet[245:246].decode("utf-8")))
        except:
            self.uhf_pass_response_235 = ' '
        
        try:
            self.uhf_pass_response_236 = ''.join(filter(lambda x: x in string.printable, packet[246:247].decode("utf-8")))
        except:
            self.uhf_pass_response_236 = ' '
        
        try:
            self.uhf_pass_response_237 = ''.join(filter(lambda x: x in string.printable, packet[247:248].decode("utf-8")))
        except:
            self.uhf_pass_response_237 = ' '
        
        try:
            self.uhf_pass_response_238 = ''.join(filter(lambda x: x in string.printable, packet[248:249].decode("utf-8")))
        except:
            self.uhf_pass_response_238 = ' '
        
        try:
            self.uhf_pass_response_239 = ''.join(filter(lambda x: x in string.printable, packet[249:250].decode("utf-8")))
        except:
            self.uhf_pass_response_239 = ' '
        
        self.uhf_pass_checksum = getUnsigned(packet[250:254], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class PAYLOAD_HK:
    def __str__(self):
        return 'PAYLOAD_HK'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_payload_hk = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_payload_hk = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.pl_pass_cnt_suncet = getUnsigned(packet[6:8], 'big', 0, 65535)
        
        self.pl_pass_err_suncet = getUnsigned(packet[8:10], 'big', 0, 65535)
        
        self.pl_pkt_cnt_suncet = getUnsigned(packet[10:12], 'big', 0, 65535)
        
        self.pl_time_cnt_suncet = getUnsigned(packet[12:14], 'big', 0, 65535)
        
        self.pl_stat_cnt_suncet = getUnsigned(packet[14:16], 'big', 0, 65535)
        
        self.REUSABLE_SPARE_2 = getUnsigned(packet[16:16], 'big', 6, 3)
        
        self.pl_pwr_cycle_suncet = getUnsigned(packet[16:16], 'big', 5, 1)
        try:
            self.pl_pwr_cycle_suncet = gen_states.CONVERT_pl_pwr_cycle_suncet(self.pl_pwr_cycle_suncet)
        except:
            pass
        
        self.pl_pwr_off_suncet = getUnsigned(packet[16:16], 'big', 4, 1)
        try:
            self.pl_pwr_off_suncet = gen_states.CONVERT_pl_pwr_off_suncet(self.pl_pwr_off_suncet)
        except:
            pass
        
        self.pl_stat_st_suncet = getUnsigned(packet[16:16], 'big', 3, 1)
        try:
            self.pl_stat_st_suncet = gen_states.CONVERT_pl_stat_st_suncet(self.pl_stat_st_suncet)
        except:
            pass
        
        self.pl_time_st_suncet = getUnsigned(packet[16:16], 'big', 2, 1)
        try:
            self.pl_time_st_suncet = gen_states.CONVERT_pl_time_st_suncet(self.pl_time_st_suncet)
        except:
            pass
        
        self.pl_alive_st_suncet = getUnsigned(packet[16:16], 'big', 0, 3)
        try:
            self.pl_alive_st_suncet = gen_states.CONVERT_pl_alive_st_suncet(self.pl_alive_st_suncet)
        except:
            pass
        
        self.pl_alive_th_suncet = getUnsigned(packet[17:18], 'big', 0, 255)
        
        self.pl_data_suncet_0 = getUnsigned(packet[18:19], 'big', 0, 255)
        
        self.pl_data_suncet_1 = getUnsigned(packet[19:20], 'big', 0, 255)
        
        self.pl_data_suncet_2 = getUnsigned(packet[20:21], 'big', 0, 255)
        
        self.pl_data_suncet_3 = getUnsigned(packet[21:22], 'big', 0, 255)
        
        self.pl_data_suncet_4 = getUnsigned(packet[22:23], 'big', 0, 255)
        
        self.pl_data_suncet_5 = getUnsigned(packet[23:24], 'big', 0, 255)
        
        self.pl_data_suncet_6 = getUnsigned(packet[24:25], 'big', 0, 255)
        
        self.pl_data_suncet_7 = getUnsigned(packet[25:26], 'big', 0, 255)
        
        self.pl_data_suncet_8 = getUnsigned(packet[26:27], 'big', 0, 255)
        
        self.pl_data_suncet_9 = getUnsigned(packet[27:28], 'big', 0, 255)
        
        self.pl_data_suncet_10 = getUnsigned(packet[28:29], 'big', 0, 255)
        
        self.pl_data_suncet_11 = getUnsigned(packet[29:30], 'big', 0, 255)
        
        self.pl_data_suncet_12 = getUnsigned(packet[30:31], 'big', 0, 255)
        
        self.pl_data_suncet_13 = getUnsigned(packet[31:32], 'big', 0, 255)
        
        self.pl_data_suncet_14 = getUnsigned(packet[32:33], 'big', 0, 255)
        
        self.pl_data_suncet_15 = getUnsigned(packet[33:34], 'big', 0, 255)
        
        self.pl_data_suncet_16 = getUnsigned(packet[34:35], 'big', 0, 255)
        
        self.pl_data_suncet_17 = getUnsigned(packet[35:36], 'big', 0, 255)
        
        self.pl_data_suncet_18 = getUnsigned(packet[36:37], 'big', 0, 255)
        
        self.pl_data_suncet_19 = getUnsigned(packet[37:38], 'big', 0, 255)
        
        self.pl_data_suncet_20 = getUnsigned(packet[38:39], 'big', 0, 255)
        
        self.pl_data_suncet_21 = getUnsigned(packet[39:40], 'big', 0, 255)
        
        self.pl_data_suncet_22 = getUnsigned(packet[40:41], 'big', 0, 255)
        
        self.pl_data_suncet_23 = getUnsigned(packet[41:42], 'big', 0, 255)
        
        self.pl_data_suncet_24 = getUnsigned(packet[42:43], 'big', 0, 255)
        
        self.pl_data_suncet_25 = getUnsigned(packet[43:44], 'big', 0, 255)
        
        self.pl_data_suncet_26 = getUnsigned(packet[44:45], 'big', 0, 255)
        
        self.pl_data_suncet_27 = getUnsigned(packet[45:46], 'big', 0, 255)
        
        self.pl_data_suncet_28 = getUnsigned(packet[46:47], 'big', 0, 255)
        
        self.pl_data_suncet_29 = getUnsigned(packet[47:48], 'big', 0, 255)
        
        self.pl_data_suncet_30 = getUnsigned(packet[48:49], 'big', 0, 255)
        
        self.pl_data_suncet_31 = getUnsigned(packet[49:50], 'big', 0, 255)
        
        self.pl_data_suncet_32 = getUnsigned(packet[50:51], 'big', 0, 255)
        
        self.pl_data_suncet_33 = getUnsigned(packet[51:52], 'big', 0, 255)
        
        self.pl_data_suncet_34 = getUnsigned(packet[52:53], 'big', 0, 255)
        
        self.pl_data_suncet_35 = getUnsigned(packet[53:54], 'big', 0, 255)
        
        self.pl_data_suncet_36 = getUnsigned(packet[54:55], 'big', 0, 255)
        
        self.pl_data_suncet_37 = getUnsigned(packet[55:56], 'big', 0, 255)
        
        self.pl_data_suncet_38 = getUnsigned(packet[56:57], 'big', 0, 255)
        
        self.pl_data_suncet_39 = getUnsigned(packet[57:58], 'big', 0, 255)
        
        self.pl_data_suncet_40 = getUnsigned(packet[58:59], 'big', 0, 255)
        
        self.pl_data_suncet_41 = getUnsigned(packet[59:60], 'big', 0, 255)
        
        self.pl_data_suncet_42 = getUnsigned(packet[60:61], 'big', 0, 255)
        
        self.pl_data_suncet_43 = getUnsigned(packet[61:62], 'big', 0, 255)
        
        self.pl_crit_time_suncet = getUnsigned(packet[62:66], 'big', 0, 4294967295)
        
        self.pl_pass_cnt_dsps = getUnsigned(packet[66:68], 'big', 0, 65535)
        
        self.pl_pass_err_dsps = getUnsigned(packet[68:70], 'big', 0, 65535)
        
        self.pl_pkt_cnt_dsps = getUnsigned(packet[70:72], 'big', 0, 65535)
        
        self.pl_time_cnt_dsps = getUnsigned(packet[72:74], 'big', 0, 65535)
        
        self.pl_stat_cnt_dsps = getUnsigned(packet[74:76], 'big', 0, 65535)
        
        self.REUSABLE_SPARE_2 = getUnsigned(packet[76:76], 'big', 6, 3)
        
        self.pl_pwr_cycle_dsps = getUnsigned(packet[76:76], 'big', 5, 1)
        try:
            self.pl_pwr_cycle_dsps = gen_states.CONVERT_pl_pwr_cycle_dsps(self.pl_pwr_cycle_dsps)
        except:
            pass
        
        self.pl_pwr_off_dsps = getUnsigned(packet[76:76], 'big', 4, 1)
        try:
            self.pl_pwr_off_dsps = gen_states.CONVERT_pl_pwr_off_dsps(self.pl_pwr_off_dsps)
        except:
            pass
        
        self.pl_stat_st_dsps = getUnsigned(packet[76:76], 'big', 3, 1)
        try:
            self.pl_stat_st_dsps = gen_states.CONVERT_pl_stat_st_dsps(self.pl_stat_st_dsps)
        except:
            pass
        
        self.pl_time_st_dsps = getUnsigned(packet[76:76], 'big', 2, 1)
        try:
            self.pl_time_st_dsps = gen_states.CONVERT_pl_time_st_dsps(self.pl_time_st_dsps)
        except:
            pass
        
        self.pl_alive_st_dsps = getUnsigned(packet[76:76], 'big', 0, 3)
        try:
            self.pl_alive_st_dsps = gen_states.CONVERT_pl_alive_st_dsps(self.pl_alive_st_dsps)
        except:
            pass
        
        self.pl_alive_th_dsps = getUnsigned(packet[77:78], 'big', 0, 255)
        
        self.pl_data_dsps_0 = getUnsigned(packet[78:79], 'big', 0, 255)
        
        self.pl_data_dsps_1 = getUnsigned(packet[79:80], 'big', 0, 255)
        
        self.pl_data_dsps_2 = getUnsigned(packet[80:81], 'big', 0, 255)
        
        self.pl_data_dsps_3 = getUnsigned(packet[81:82], 'big', 0, 255)
        
        self.pl_data_dsps_4 = getUnsigned(packet[82:83], 'big', 0, 255)
        
        self.pl_data_dsps_5 = getUnsigned(packet[83:84], 'big', 0, 255)
        
        self.pl_data_dsps_6 = getUnsigned(packet[84:85], 'big', 0, 255)
        
        self.pl_data_dsps_7 = getUnsigned(packet[85:86], 'big', 0, 255)
        
        self.pl_data_dsps_8 = getUnsigned(packet[86:87], 'big', 0, 255)
        
        self.pl_data_dsps_9 = getUnsigned(packet[87:88], 'big', 0, 255)
        
        self.pl_data_dsps_10 = getUnsigned(packet[88:89], 'big', 0, 255)
        
        self.pl_data_dsps_11 = getUnsigned(packet[89:90], 'big', 0, 255)
        
        self.pl_data_dsps_12 = getUnsigned(packet[90:91], 'big', 0, 255)
        
        self.pl_data_dsps_13 = getUnsigned(packet[91:92], 'big', 0, 255)
        
        self.pl_data_dsps_14 = getUnsigned(packet[92:93], 'big', 0, 255)
        
        self.pl_data_dsps_15 = getUnsigned(packet[93:94], 'big', 0, 255)
        
        self.pl_data_dsps_16 = getUnsigned(packet[94:95], 'big', 0, 255)
        
        self.pl_data_dsps_17 = getUnsigned(packet[95:96], 'big', 0, 255)
        
        self.pl_data_dsps_18 = getUnsigned(packet[96:97], 'big', 0, 255)
        
        self.pl_data_dsps_19 = getUnsigned(packet[97:98], 'big', 0, 255)
        
        self.pl_data_dsps_20 = getUnsigned(packet[98:99], 'big', 0, 255)
        
        self.pl_data_dsps_21 = getUnsigned(packet[99:100], 'big', 0, 255)
        
        self.pl_data_dsps_22 = getUnsigned(packet[100:101], 'big', 0, 255)
        
        self.pl_data_dsps_23 = getUnsigned(packet[101:102], 'big', 0, 255)
        
        self.pl_data_dsps_24 = getUnsigned(packet[102:103], 'big', 0, 255)
        
        self.pl_data_dsps_25 = getUnsigned(packet[103:104], 'big', 0, 255)
        
        self.pl_data_dsps_26 = getUnsigned(packet[104:105], 'big', 0, 255)
        
        self.pl_data_dsps_27 = getUnsigned(packet[105:106], 'big', 0, 255)
        
        self.pl_data_dsps_28 = getUnsigned(packet[106:107], 'big', 0, 255)
        
        self.pl_data_dsps_29 = getUnsigned(packet[107:108], 'big', 0, 255)
        
        self.pl_data_dsps_30 = getUnsigned(packet[108:109], 'big', 0, 255)
        
        self.pl_data_dsps_31 = getUnsigned(packet[109:110], 'big', 0, 255)
        
        self.pl_data_dsps_32 = getUnsigned(packet[110:111], 'big', 0, 255)
        
        self.pl_data_dsps_33 = getUnsigned(packet[111:112], 'big', 0, 255)
        
        self.pl_data_dsps_34 = getUnsigned(packet[112:113], 'big', 0, 255)
        
        self.pl_data_dsps_35 = getUnsigned(packet[113:114], 'big', 0, 255)
        
        self.pl_data_dsps_36 = getUnsigned(packet[114:115], 'big', 0, 255)
        
        self.pl_data_dsps_37 = getUnsigned(packet[115:116], 'big', 0, 255)
        
        self.pl_data_dsps_38 = getUnsigned(packet[116:117], 'big', 0, 255)
        
        self.pl_data_dsps_39 = getUnsigned(packet[117:118], 'big', 0, 255)
        
        self.pl_data_dsps_40 = getUnsigned(packet[118:119], 'big', 0, 255)
        
        self.pl_data_dsps_41 = getUnsigned(packet[119:120], 'big', 0, 255)
        
        self.pl_data_dsps_42 = getUnsigned(packet[120:121], 'big', 0, 255)
        
        self.pl_data_dsps_43 = getUnsigned(packet[121:122], 'big', 0, 255)
        
        self.pl_crit_time_dsps = getUnsigned(packet[122:126], 'big', 0, 4294967295)
        
        self.payload_hk_checksum = getUnsigned(packet[126:130], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class BATTERY_ANA_0:
    def __str__(self):
        return 'BATTERY_ANA_0'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_battery_ana_0 = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_battery_ana_0 = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.eps_bat_csp_node_0 = getUnsigned(packet[6:8], 'big', 0, 65535)
        
        self.eps_bat_csp_version_0 = getUnsigned(packet[8:10], 'big', 0, 65535)
        
        self.eps_bat_csp_dedup_0 = getUnsigned(packet[10:12], 'big', 0, 65535)
        
        self.eps_bat_csp_debug_0_0 = getUnsigned(packet[12:14], 'big', 0, 65535)
        
        self.eps_bat_csp_debug_0_1 = getUnsigned(packet[14:16], 'big', 0, 65535)
        
        self.eps_bat_csp_debug_0_2 = getUnsigned(packet[16:18], 'big', 0, 65535)
        
        self.eps_bat_csp_debug_0_3 = getUnsigned(packet[18:20], 'big', 0, 65535)
        
        self.eps_bat_csp_debug_0_4 = getUnsigned(packet[20:22], 'big', 0, 65535)
        
        self.eps_bat_csp_debug_0_5 = getUnsigned(packet[22:24], 'big', 0, 65535)
        
        self.eps_bat_csp_debug_0_6 = getUnsigned(packet[24:26], 'big', 0, 65535)
        
        self.eps_bat_boot_img1_0 = getUnsigned(packet[26:28], 'big', 0, 65535)
        
        self.eps_bat_boot_img0_0 = getUnsigned(packet[28:30], 'big', 0, 65535)
        
        self.eps_bat_boot_cur_0 = getUnsigned(packet[30:32], 'big', 0, 65535)
        
        self.eps_bat_boot_cnt_0 = getUnsigned(packet[32:34], 'big', 0, 65535)
        
        self.eps_bat_boot_err_0 = getUnsigned(packet[34:36], 'big', 0, 65535)
        
        self.eps_bat_stdbuf_in_0 = getUnsigned(packet[36:38], 'big', 0, 65535)
        
        self.eps_bat_stdbuf_out_0 = getUnsigned(packet[38:40], 'big', 0, 65535)
        
        self.REUSABLE_SPARE_16 = getUnsigned(packet[40:42], 'big', 0, 65535)
        
        self.eps_bat_tlm_bat1_temp_0 = getUnsigned(packet[42:46], 'big', 0, 4294967295)
        try:
            self.eps_bat_tlm_bat1_temp_0 = gen_eus.CONVERT_eps_bat_tlm_bat1_temp_0(self.eps_bat_tlm_bat1_temp_0)
        except:
            pass
        
        self.eps_bat_tlm_bat2_temp_0 = getUnsigned(packet[46:50], 'big', 0, 4294967295)
        try:
            self.eps_bat_tlm_bat2_temp_0 = gen_eus.CONVERT_eps_bat_tlm_bat2_temp_0(self.eps_bat_tlm_bat2_temp_0)
        except:
            pass
        
        self.eps_bat_temp_0 = getUnsigned(packet[50:54], 'big', 0, 4294967295)
        try:
            self.eps_bat_temp_0 = gen_eus.CONVERT_eps_bat_temp_0(self.eps_bat_temp_0)
        except:
            pass
        
        self.eps_int_temp_0 = getUnsigned(packet[54:58], 'big', 0, 4294967295)
        try:
            self.eps_int_temp_0 = gen_eus.CONVERT_eps_int_temp_0(self.eps_int_temp_0)
        except:
            pass
        
        self.eps_bat_tlm_vcell_0_0 = getUnsigned(packet[58:60], 'big', 0, 65535)
        try:
            self.eps_bat_tlm_vcell_0_0 = gen_eus.CONVERT_eps_bat_tlm_vcell_0_0(self.eps_bat_tlm_vcell_0_0)
        except:
            pass
        
        self.eps_bat_tlm_vcell_0_1 = getUnsigned(packet[60:62], 'big', 0, 65535)
        try:
            self.eps_bat_tlm_vcell_0_1 = gen_eus.CONVERT_eps_bat_tlm_vcell_0_1(self.eps_bat_tlm_vcell_0_1)
        except:
            pass
        
        self.eps_bat_tlm_vcell_0_2 = getUnsigned(packet[62:64], 'big', 0, 65535)
        try:
            self.eps_bat_tlm_vcell_0_2 = gen_eus.CONVERT_eps_bat_tlm_vcell_0_2(self.eps_bat_tlm_vcell_0_2)
        except:
            pass
        
        self.eps_bat_tlm_vcell_0_3 = getUnsigned(packet[64:66], 'big', 0, 65535)
        try:
            self.eps_bat_tlm_vcell_0_3 = gen_eus.CONVERT_eps_bat_tlm_vcell_0_3(self.eps_bat_tlm_vcell_0_3)
        except:
            pass
        
        self.eps_bat_tlm_vin_0 = getUnsigned(packet[66:70], 'big', 0, 4294967295)
        try:
            self.eps_bat_tlm_vin_0 = gen_eus.CONVERT_eps_bat_tlm_vin_0(self.eps_bat_tlm_vin_0)
        except:
            pass
        
        self.eps_bat_tlm_vout_0 = getUnsigned(packet[70:74], 'big', 0, 4294967295)
        try:
            self.eps_bat_tlm_vout_0 = gen_eus.CONVERT_eps_bat_tlm_vout_0(self.eps_bat_tlm_vout_0)
        except:
            pass
        
        self.eps_bat_tlm_iin_0 = getSigned(packet[74:76], 'big', 0, 65535)
        try:
            self.eps_bat_tlm_iin_0 = gen_eus.CONVERT_eps_bat_tlm_iin_0(self.eps_bat_tlm_iin_0)
        except:
            pass
        
        self.eps_bat_ina_fault_io_0 = getUnsigned(packet[76:78], 'big', 0, 65535)
        
        self.eps_bat_tlm_iout_0 = getUnsigned(packet[78:80], 'big', 0, 65535)
        try:
            self.eps_bat_tlm_iout_0 = gen_eus.CONVERT_eps_bat_tlm_iout_0(self.eps_bat_tlm_iout_0)
        except:
            pass
        
        self.eps_bat_heater_auto_0 = getUnsigned(packet[80:82], 'big', 0, 65535)
        
        self.eps_bat_heater_auto_on_at_0 = getUnsigned(packet[82:84], 'big', 0, 65535)
        
        self.eps_bat_heater_auto_off_at_0 = getUnsigned(packet[84:86], 'big', 0, 65535)
        
        self.eps_bat_balance_auto_0 = getUnsigned(packet[86:88], 'big', 0, 65535)
        
        self.eps_bat_balance_thr_0 = getUnsigned(packet[88:90], 'big', 0, 65535)
        
        try:
            self.eps_bat_rsense_in_0 = getFloat(packet[90:94], 'BIG')
        except:
            print('Could not decode floating point item "eps_bat_rsense_in_0" in "battery_ana_0"')
            self.eps_bat_rsense_in_0 = 0
        
        try:
            self.eps_bat_rsense_out_0 = getFloat(packet[94:98], 'BIG')
        except:
            print('Could not decode floating point item "eps_bat_rsense_out_0" in "battery_ana_0"')
            self.eps_bat_rsense_out_0 = 0
        
        self.eps_bat_heater_on_0 = getUnsigned(packet[98:100], 'big', 0, 65535)
        
        self.eps_bat_balance_cell_0 = getUnsigned(packet[100:102], 'big', 0, 65535)
        
        self.eps_bat_powercycle_0 = getUnsigned(packet[102:104], 'big', 0, 65535)
        
        self.eps_bat_bal_fault_io_0 = getUnsigned(packet[104:106], 'big', 0, 65535)
        
        self.eps_bat_gndwdt_0 = getUnsigned(packet[106:110], 'big', 0, 4294967295)
        
        try:
            self.eps_bat_time_factor_0 = getFloat(packet[110:118], 'BIG')
        except:
            print('Could not decode floating point item "eps_bat_time_factor_0" in "battery_ana_0"')
            self.eps_bat_time_factor_0 = 0
        
        self.battery_ana_checksum_0 = getUnsigned(packet[118:122], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class ADCS_HK:
    def __str__(self):
        return 'ADCS_HK'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_adcs_hk = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_adcs_hk = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.adcs_read_sent_cnt = getUnsigned(packet[6:8], 'big', 0, 65535)
        
        self.adcs_write_sent_cnt = getUnsigned(packet[8:10], 'big', 0, 65535)
        
        self.adcs_length_err_count = getUnsigned(packet[10:12], 'big', 0, 65535)
        
        self.adcs_hk_pkt_cnt = getUnsigned(packet[12:14], 'big', 0, 65535)
        
        self.adcs_alive = getUnsigned(packet[14:15], 'big', 0, 255)
        try:
            self.adcs_alive = gen_states.CONVERT_adcs_alive(self.adcs_alive)
        except:
            pass
        
        self.adcs_eclipse = getUnsigned(packet[15:16], 'big', 0, 255)
        
        self.adcs_eclipse_threshold = getUnsigned(packet[16:18], 'big', 0, 65535)
        
        self.adcs_eclipse_count = getUnsigned(packet[18:20], 'big', 0, 65535)
        
        self.adcs_msg_recv_count = getUnsigned(packet[20:22], 'big', 0, 65535)
        
        self.adcs_msg_rjct_count = getUnsigned(packet[22:24], 'big', 0, 65535)
        
        self.adcs_msg_fmt_count = getUnsigned(packet[24:26], 'big', 0, 65535)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[26:27], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[27:28], 'big', 0, 255)
        
        self.tlm_adcs_unframed_bytes = getUnsigned(packet[28:30], 'big', 0, 65535)
        
        self.tlm_adcs_unframed_packets = getUnsigned(packet[30:32], 'big', 0, 65535)
        
        self.tlm_adcs_crc_err = getUnsigned(packet[32:34], 'big', 0, 65535)
        
        self.tlm_adcs_timeout_err = getUnsigned(packet[34:36], 'big', 0, 65535)
        
        self.tlm_adcs_tx_err = getUnsigned(packet[36:38], 'big', 0, 65535)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[38:39], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[39:40], 'big', 0, 255)
        
        self.adcs_img_dump_line_0 = getUnsigned(packet[40:42], 'big', 0, 65535)
        
        self.adcs_img_dump_state_0 = getUnsigned(packet[42:43], 'big', 0, 255)
        try:
            self.adcs_img_dump_state_0 = gen_states.CONVERT_adcs_img_dump_state_0(self.adcs_img_dump_state_0)
        except:
            pass
        
        self.adcs_img_dump_trkr_0 = getUnsigned(packet[43:44], 'big', 0, 255)
        
        self.adcs_img_dump_img_0 = getUnsigned(packet[44:45], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[45:46], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[46:47], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[47:48], 'big', 0, 255)
        
        self.adcs_hk_checksum = getUnsigned(packet[48:52], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class ADCS_L0:
    def __str__(self):
        return 'ADCS_L0'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_adcs_l0 = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_adcs_l0 = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.adcs_l0_sec_cnt = getUnsigned(packet[6:7], 'big', 0, 255)
        
        self.adcs_l0_rjct_cnt = getUnsigned(packet[7:8], 'big', 0, 255)
        
        self.adcs_l0_acpt_cnt = getUnsigned(packet[8:9], 'big', 0, 255)
        
        self.adcs_l0_wdog_2sec_count = getUnsigned(packet[9:9], 'big', 5, 7)
        
        self.adcs_l0_rst_arm_status = getUnsigned(packet[9:9], 'big', 4, 1)
        try:
            self.adcs_l0_rst_arm_status = gen_states.CONVERT_adcs_l0_rst_arm_status(self.adcs_l0_rst_arm_status)
        except:
            pass
        
        self.adcs_l0_wdog_evt_status = getUnsigned(packet[9:9], 'big', 3, 1)
        try:
            self.adcs_l0_wdog_evt_status = gen_states.CONVERT_adcs_l0_wdog_evt_status(self.adcs_l0_wdog_evt_status)
        except:
            pass
        
        self.adcs_l0_wdog_ena_status = getUnsigned(packet[9:9], 'big', 2, 1)
        try:
            self.adcs_l0_wdog_ena_status = gen_states.CONVERT_adcs_l0_wdog_ena_status(self.adcs_l0_wdog_ena_status)
        except:
            pass
        
        self.adcs_l0_boot_relay_status = getUnsigned(packet[9:9], 'big', 0, 3)
        try:
            self.adcs_l0_boot_relay_status = gen_states.CONVERT_adcs_l0_boot_relay_status(self.adcs_l0_boot_relay_status)
        except:
            pass
        
        self.adcs_l0_hvbus_volt = getUnsigned(packet[10:12], 'big', 0, 65535)
        try:
            self.adcs_l0_hvbus_volt = gen_eus.CONVERT_adcs_l0_hvbus_volt(self.adcs_l0_hvbus_volt)
        except:
            pass
        
        self.adcs_l0_lvbus_volt = getUnsigned(packet[12:14], 'big', 0, 65535)
        try:
            self.adcs_l0_lvbus_volt = gen_eus.CONVERT_adcs_l0_lvbus_volt(self.adcs_l0_lvbus_volt)
        except:
            pass
        
        self.adcs_l0_1p8_volt = getUnsigned(packet[14:16], 'big', 0, 65535)
        try:
            self.adcs_l0_1p8_volt = gen_eus.CONVERT_adcs_l0_1p8_volt(self.adcs_l0_1p8_volt)
        except:
            pass
        
        self.adcs_l0_2p5_volt = getUnsigned(packet[16:18], 'big', 0, 65535)
        try:
            self.adcs_l0_2p5_volt = gen_eus.CONVERT_adcs_l0_2p5_volt(self.adcs_l0_2p5_volt)
        except:
            pass
        
        self.adcs_l0_det_temp = getUnsigned(packet[18:20], 'big', 0, 65535)
        try:
            self.adcs_l0_det_temp = gen_eus.CONVERT_adcs_l0_det_temp(self.adcs_l0_det_temp)
        except:
            pass
        
        self.adcs_l0_1p0_volt = getUnsigned(packet[20:22], 'big', 0, 65535)
        try:
            self.adcs_l0_1p0_volt = gen_eus.CONVERT_adcs_l0_1p0_volt(self.adcs_l0_1p0_volt)
        except:
            pass
        
        self.adcs_l0_flash_pwr = getUnsigned(packet[22:24], 'big', 0, 65535)
        try:
            self.adcs_l0_flash_pwr = gen_eus.CONVERT_adcs_l0_flash_pwr(self.adcs_l0_flash_pwr)
        except:
            pass
        
        self.adcs_l0_box_temp = getUnsigned(packet[24:26], 'big', 0, 65535)
        try:
            self.adcs_l0_box_temp = gen_eus.CONVERT_adcs_l0_box_temp(self.adcs_l0_box_temp)
        except:
            pass
        
        self.adcs_l0_cmd_time = getUnsigned(packet[26:30], 'big', 0, 4294967295)
        
        self.REUSABLE_SPARE_7 = getUnsigned(packet[30:30], 'big', 1, 127)
        
        self.adcs_l0_boot_table = getUnsigned(packet[30:30], 'big', 0, 1)
        try:
            self.adcs_l0_boot_table = gen_states.CONVERT_adcs_l0_boot_table(self.adcs_l0_boot_table)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[31:32], 'big', 0, 255)
        
        self.REUSABLE_SPARE_16 = getUnsigned(packet[32:34], 'big', 0, 65535)
        
        self.REUSABLE_SPARE_16 = getUnsigned(packet[34:36], 'big', 0, 65535)
        
        self.adcs_l0_sync = getUnsigned(packet[36:38], 'big', 0, 65535)
        
        self.adcs_l0_checksum = getUnsigned(packet[38:42], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class CMD_HK:
    def __str__(self):
        return 'CMD_HK'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_cmd_hk = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_cmd_hk = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.cmd_recv_count = getUnsigned(packet[6:8], 'big', 0, 65535)
        
        self.cmd_fmt_count = getUnsigned(packet[8:10], 'big', 0, 65535)
        
        self.cmd_rjct_count = getUnsigned(packet[10:12], 'big', 0, 65535)
        
        self.cmd_succ_count = getUnsigned(packet[12:14], 'big', 0, 65535)
        
        self.cmd_succ_op = getUnsigned(packet[14:16], 'big', 0, 65535)
        try:
            self.cmd_succ_op = gen_states.CONVERT_cmd_succ_op(self.cmd_succ_op)
        except:
            pass
        
        self.cmd_rjct_op = getUnsigned(packet[16:18], 'big', 0, 65535)
        try:
            self.cmd_rjct_op = gen_states.CONVERT_cmd_rjct_op(self.cmd_rjct_op)
        except:
            pass
        
        self.cmd_fail_code = getUnsigned(packet[18:19], 'big', 0, 255)
        try:
            self.cmd_fail_code = gen_states.CONVERT_cmd_fail_code(self.cmd_fail_code)
        except:
            pass
        
        self.cmd_xsum_state = getUnsigned(packet[19:20], 'big', 0, 255)
        try:
            self.cmd_xsum_state = gen_states.CONVERT_cmd_xsum_state(self.cmd_xsum_state)
        except:
            pass
        
        self.REUSABLE_SPARE_1 = getUnsigned(packet[20:20], 'big', 7, 1)
        try:
            self.REUSABLE_SPARE_1 = gen_states.CONVERT_REUSABLE_SPARE_1(self.REUSABLE_SPARE_1)
        except:
            pass
        
        self.REUSABLE_SPARE_1 = getUnsigned(packet[20:20], 'big', 6, 1)
        try:
            self.REUSABLE_SPARE_1 = gen_states.CONVERT_REUSABLE_SPARE_1(self.REUSABLE_SPARE_1)
        except:
            pass
        
        self.REUSABLE_SPARE_1 = getUnsigned(packet[20:20], 'big', 5, 1)
        try:
            self.REUSABLE_SPARE_1 = gen_states.CONVERT_REUSABLE_SPARE_1(self.REUSABLE_SPARE_1)
        except:
            pass
        
        self.REUSABLE_SPARE_1 = getUnsigned(packet[20:20], 'big', 4, 1)
        try:
            self.REUSABLE_SPARE_1 = gen_states.CONVERT_REUSABLE_SPARE_1(self.REUSABLE_SPARE_1)
        except:
            pass
        
        self.REUSABLE_SPARE_1 = getUnsigned(packet[20:20], 'big', 3, 1)
        try:
            self.REUSABLE_SPARE_1 = gen_states.CONVERT_REUSABLE_SPARE_1(self.REUSABLE_SPARE_1)
        except:
            pass
        
        self.cmd_arm_state_uhf = getUnsigned(packet[20:20], 'big', 2, 1)
        try:
            self.cmd_arm_state_uhf = gen_states.CONVERT_cmd_arm_state_uhf(self.cmd_arm_state_uhf)
        except:
            pass
        
        self.cmd_arm_state_seq = getUnsigned(packet[20:20], 'big', 1, 1)
        try:
            self.cmd_arm_state_seq = gen_states.CONVERT_cmd_arm_state_seq(self.cmd_arm_state_seq)
        except:
            pass
        
        self.cmd_arm_state_dbg = getUnsigned(packet[20:20], 'big', 0, 1)
        try:
            self.cmd_arm_state_dbg = gen_states.CONVERT_cmd_arm_state_dbg(self.cmd_arm_state_dbg)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[21:22], 'big', 0, 255)
        
        self.cmd_reg_count = getUnsigned(packet[22:26], 'big', 0, 4294967295)
        
        self.cmd_src_cnt_dbg = getUnsigned(packet[26:30], 'big', 0, 4294967295)
        
        self.cmd_src_cnt_seq = getUnsigned(packet[30:34], 'big', 0, 4294967295)
        
        self.cmd_src_cnt_uhf = getUnsigned(packet[34:38], 'big', 0, 4294967295)
        
        self.cmd_bad_apid_count = getUnsigned(packet[38:39], 'big', 0, 255)
        
        self.cmd_bad_type_count = getUnsigned(packet[39:40], 'big', 0, 255)
        
        self.cmd_hk_checksum = getUnsigned(packet[42:46], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin


class LIB_HK:
    def __str__(self):
        return 'LIB_HK'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_lib_hk = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_lib_hk = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.lib_reg_err_max = getUnsigned(packet[6:7], 'big', 0, 255)
        
        self.lib_reg_err_size = getUnsigned(packet[7:8], 'big', 0, 255)
        
        self.lib_reg_err_dup = getUnsigned(packet[8:9], 'big', 0, 255)
        
        self.lib_id_err = getUnsigned(packet[9:10], 'big', 0, 255)
        
        self.lib_entry_num = getUnsigned(packet[10:12], 'big', 0, 65535)
        
        self.lib_entry_store = getUnsigned(packet[12:14], 'big', 0, 65535)
        
        self.lib_hk_checksum = getUnsigned(packet[14:18], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class LOG_MSG:
    def __str__(self):
        return 'LOG_MSG'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_log_msg = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_log_msg = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.log_time_sec_hdr = getUnsigned(packet[6:10], 'big', 0, 4294967295)
        
        self.log_time_sub_hdr = getUnsigned(packet[10:12], 'big', 0, 65535)
        
        self.log_msgid_hdr = getUnsigned(packet[12:14], 'big', 0, 65535)
        try:
            self.log_msgid_hdr = gen_states.CONVERT_log_msgid_hdr(self.log_msgid_hdr)
        except:
            pass
        
        self.log_slice_hdr = getUnsigned(packet[14:15], 'big', 0, 255)
        
        self.log_logid_hdr = getUnsigned(packet[15:16], 'big', 0, 255)
        try:
            self.log_logid_hdr = gen_states.CONVERT_log_logid_hdr(self.log_logid_hdr)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[16:17], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[17:18], 'big', 0, 255)
        
        self.log_params_0 = getUnsigned(packet[18:19], 'big', 0, 255)
        
        self.log_params_1 = getUnsigned(packet[19:20], 'big', 0, 255)
        
        self.log_params_2 = getUnsigned(packet[20:21], 'big', 0, 255)
        
        self.log_params_3 = getUnsigned(packet[21:22], 'big', 0, 255)
        
        self.log_msg_checksum = getUnsigned(packet[22:26], 'big', 0, 4294967295)

        try:
            self.log_msg = custom_decoders.decode_log_msg(self, packet)
        except:
            try:
                self.log_msg = general_decoders.decode_log_msg(self, packet)
            except:
                print('Could not decode log_msg, no custom or general decoder found')

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class LOG_HK:
    def __str__(self):
        return 'LOG_HK'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_log_hk = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_log_hk = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.log_reg_cnt = getUnsigned(packet[6:10], 'big', 0, 4294967295)
        
        self.log_evt_cnt = getUnsigned(packet[10:14], 'big', 0, 4294967295)
        
        self.log_unknown_cnt = getUnsigned(packet[14:15], 'big', 0, 255)
        
        self.log_dup_id_cnt = getUnsigned(packet[15:16], 'big', 0, 255)
        
        self.log_unreg_id_cnt = getUnsigned(packet[16:17], 'big', 0, 255)
        
        self.log_err_cnt = getUnsigned(packet[17:18], 'big', 0, 255)
        
        self.log_write_cnt_evt = getUnsigned(packet[18:20], 'big', 0, 65535)
        
        self.log_size_evt = getUnsigned(packet[20:22], 'big', 0, 65535)
        
        self.log_drop_cnt_evt = getUnsigned(packet[22:24], 'big', 0, 65535)
        
        self.log_state_evt = getUnsigned(packet[24:25], 'big', 0, 255)
        try:
            self.log_state_evt = gen_states.CONVERT_log_state_evt(self.log_state_evt)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[25:26], 'big', 0, 255)
        
        self.log_write_cnt_pm = getUnsigned(packet[26:28], 'big', 0, 65535)
        
        self.log_size_pm = getUnsigned(packet[28:30], 'big', 0, 65535)
        
        self.log_drop_cnt_pm = getUnsigned(packet[30:32], 'big', 0, 65535)
        
        self.log_state_pm = getUnsigned(packet[32:33], 'big', 0, 255)
        try:
            self.log_state_pm = gen_states.CONVERT_log_state_pm(self.log_state_pm)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[33:34], 'big', 0, 255)
        
        self.REUSABLE_SPARE_16 = getUnsigned(packet[34:36], 'big', 0, 65535)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[36:37], 'big', 0, 255)
        
        self.REUSABLE_SPARE_1 = getUnsigned(packet[37:37], 'big', 7, 1)
        try:
            self.REUSABLE_SPARE_1 = gen_states.CONVERT_REUSABLE_SPARE_1(self.REUSABLE_SPARE_1)
        except:
            pass
        
        self.REUSABLE_SPARE_1 = getUnsigned(packet[37:37], 'big', 6, 1)
        try:
            self.REUSABLE_SPARE_1 = gen_states.CONVERT_REUSABLE_SPARE_1(self.REUSABLE_SPARE_1)
        except:
            pass
        
        self.REUSABLE_SPARE_1 = getUnsigned(packet[37:37], 'big', 5, 1)
        try:
            self.REUSABLE_SPARE_1 = gen_states.CONVERT_REUSABLE_SPARE_1(self.REUSABLE_SPARE_1)
        except:
            pass
        
        self.REUSABLE_SPARE_1 = getUnsigned(packet[37:37], 'big', 4, 1)
        try:
            self.REUSABLE_SPARE_1 = gen_states.CONVERT_REUSABLE_SPARE_1(self.REUSABLE_SPARE_1)
        except:
            pass
        
        self.REUSABLE_SPARE_1 = getUnsigned(packet[37:37], 'big', 3, 1)
        try:
            self.REUSABLE_SPARE_1 = gen_states.CONVERT_REUSABLE_SPARE_1(self.REUSABLE_SPARE_1)
        except:
            pass
        
        self.REUSABLE_SPARE_1 = getUnsigned(packet[37:37], 'big', 2, 1)
        try:
            self.REUSABLE_SPARE_1 = gen_states.CONVERT_REUSABLE_SPARE_1(self.REUSABLE_SPARE_1)
        except:
            pass
        
        self.log_pub_state_pm = getUnsigned(packet[37:37], 'big', 1, 1)
        try:
            self.log_pub_state_pm = gen_states.CONVERT_log_pub_state_pm(self.log_pub_state_pm)
        except:
            pass
        
        self.log_pub_state_evt = getUnsigned(packet[37:37], 'big', 0, 1)
        try:
            self.log_pub_state_evt = gen_states.CONVERT_log_pub_state_evt(self.log_pub_state_evt)
        except:
            pass
        
        self.log_hk_checksum = getUnsigned(packet[38:42], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class MEM_HK:
    def __str__(self):
        return 'MEM_HK'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_mem_hk = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_mem_hk = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.mem_op_type = getUnsigned(packet[6:7], 'big', 0, 255)
        try:
            self.mem_op_type = gen_states.CONVERT_mem_op_type(self.mem_op_type)
        except:
            pass
        
        self.mem_section = getUnsigned(packet[7:8], 'big', 0, 255)
        try:
            self.mem_section = gen_states.CONVERT_mem_section(self.mem_section)
        except:
            pass
        
        self.mem_fail_count = getUnsigned(packet[8:9], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[9:10], 'big', 0, 255)
        
        self.mem_start_offset = getUnsigned(packet[10:14], 'big', 0, 4294967295)
        
        self.mem_curr_offset = getUnsigned(packet[14:18], 'big', 0, 4294967295)
        
        self.mem_curr_bytes = getUnsigned(packet[18:22], 'big', 0, 4294967295)
        
        self.mem_total_bytes = getUnsigned(packet[22:26], 'big', 0, 4294967295)
        
        self.mem_checksum = getUnsigned(packet[26:30], 'big', 0, 4294967295)
        
        self.mem_hk_checksum = getUnsigned(packet[30:34], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class MEM_DUMP:
    def __str__(self):
        return 'MEM_DUMP'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_mem_dump = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_mem_dump = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        try:
            self.mem_dump_name_0 = ''.join(filter(lambda x: x in string.printable, packet[6:7].decode("utf-8")))
        except:
            self.mem_dump_name_0 = ' '
        
        try:
            self.mem_dump_name_1 = ''.join(filter(lambda x: x in string.printable, packet[7:8].decode("utf-8")))
        except:
            self.mem_dump_name_1 = ' '
        
        try:
            self.mem_dump_name_2 = ''.join(filter(lambda x: x in string.printable, packet[8:9].decode("utf-8")))
        except:
            self.mem_dump_name_2 = ' '
        
        try:
            self.mem_dump_name_3 = ''.join(filter(lambda x: x in string.printable, packet[9:10].decode("utf-8")))
        except:
            self.mem_dump_name_3 = ' '
        
        try:
            self.mem_dump_name_4 = ''.join(filter(lambda x: x in string.printable, packet[10:11].decode("utf-8")))
        except:
            self.mem_dump_name_4 = ' '
        
        try:
            self.mem_dump_name_5 = ''.join(filter(lambda x: x in string.printable, packet[11:12].decode("utf-8")))
        except:
            self.mem_dump_name_5 = ' '
        
        try:
            self.mem_dump_name_6 = ''.join(filter(lambda x: x in string.printable, packet[12:13].decode("utf-8")))
        except:
            self.mem_dump_name_6 = ' '
        
        try:
            self.mem_dump_name_7 = ''.join(filter(lambda x: x in string.printable, packet[13:14].decode("utf-8")))
        except:
            self.mem_dump_name_7 = ' '
        
        self.mem_dump_offset = getUnsigned(packet[14:18], 'big', 0, 4294967295)
        
        self.mem_dump_length = getUnsigned(packet[18:22], 'big', 0, 4294967295)
        
        self.mem_dump_trans = getUnsigned(packet[22:24], 'big', 0, 65535)
        
        self.mem_dump_flags = getUnsigned(packet[24:26], 'big', 0, 65535)
        try:
            self.mem_dump_flags = gen_states.CONVERT_mem_dump_flags(self.mem_dump_flags)
        except:
            pass
        
        self.mem_dump_data_0 = getUnsigned(packet[26:27], 'big', 0, 255)
        
        self.mem_dump_data_1 = getUnsigned(packet[27:28], 'big', 0, 255)
        
        self.mem_dump_data_2 = getUnsigned(packet[28:29], 'big', 0, 255)
        
        self.mem_dump_data_3 = getUnsigned(packet[29:30], 'big', 0, 255)
        
        self.mem_dump_data_4 = getUnsigned(packet[30:31], 'big', 0, 255)
        
        self.mem_dump_data_5 = getUnsigned(packet[31:32], 'big', 0, 255)
        
        self.mem_dump_data_6 = getUnsigned(packet[32:33], 'big', 0, 255)
        
        self.mem_dump_data_7 = getUnsigned(packet[33:34], 'big', 0, 255)
        
        self.mem_dump_data_8 = getUnsigned(packet[34:35], 'big', 0, 255)
        
        self.mem_dump_data_9 = getUnsigned(packet[35:36], 'big', 0, 255)
        
        self.mem_dump_data_10 = getUnsigned(packet[36:37], 'big', 0, 255)
        
        self.mem_dump_data_11 = getUnsigned(packet[37:38], 'big', 0, 255)
        
        self.mem_dump_data_12 = getUnsigned(packet[38:39], 'big', 0, 255)
        
        self.mem_dump_data_13 = getUnsigned(packet[39:40], 'big', 0, 255)
        
        self.mem_dump_data_14 = getUnsigned(packet[40:41], 'big', 0, 255)
        
        self.mem_dump_data_15 = getUnsigned(packet[41:42], 'big', 0, 255)
        
        self.mem_dump_data_16 = getUnsigned(packet[42:43], 'big', 0, 255)
        
        self.mem_dump_data_17 = getUnsigned(packet[43:44], 'big', 0, 255)
        
        self.mem_dump_data_18 = getUnsigned(packet[44:45], 'big', 0, 255)
        
        self.mem_dump_data_19 = getUnsigned(packet[45:46], 'big', 0, 255)
        
        self.mem_dump_data_20 = getUnsigned(packet[46:47], 'big', 0, 255)
        
        self.mem_dump_data_21 = getUnsigned(packet[47:48], 'big', 0, 255)
        
        self.mem_dump_data_22 = getUnsigned(packet[48:49], 'big', 0, 255)
        
        self.mem_dump_data_23 = getUnsigned(packet[49:50], 'big', 0, 255)
        
        self.mem_dump_data_24 = getUnsigned(packet[50:51], 'big', 0, 255)
        
        self.mem_dump_data_25 = getUnsigned(packet[51:52], 'big', 0, 255)
        
        self.mem_dump_data_26 = getUnsigned(packet[52:53], 'big', 0, 255)
        
        self.mem_dump_data_27 = getUnsigned(packet[53:54], 'big', 0, 255)
        
        self.mem_dump_data_28 = getUnsigned(packet[54:55], 'big', 0, 255)
        
        self.mem_dump_data_29 = getUnsigned(packet[55:56], 'big', 0, 255)
        
        self.mem_dump_data_30 = getUnsigned(packet[56:57], 'big', 0, 255)
        
        self.mem_dump_data_31 = getUnsigned(packet[57:58], 'big', 0, 255)
        
        self.mem_dump_data_32 = getUnsigned(packet[58:59], 'big', 0, 255)
        
        self.mem_dump_data_33 = getUnsigned(packet[59:60], 'big', 0, 255)
        
        self.mem_dump_data_34 = getUnsigned(packet[60:61], 'big', 0, 255)
        
        self.mem_dump_data_35 = getUnsigned(packet[61:62], 'big', 0, 255)
        
        self.mem_dump_data_36 = getUnsigned(packet[62:63], 'big', 0, 255)
        
        self.mem_dump_data_37 = getUnsigned(packet[63:64], 'big', 0, 255)
        
        self.mem_dump_data_38 = getUnsigned(packet[64:65], 'big', 0, 255)
        
        self.mem_dump_data_39 = getUnsigned(packet[65:66], 'big', 0, 255)
        
        self.mem_dump_data_40 = getUnsigned(packet[66:67], 'big', 0, 255)
        
        self.mem_dump_data_41 = getUnsigned(packet[67:68], 'big', 0, 255)
        
        self.mem_dump_data_42 = getUnsigned(packet[68:69], 'big', 0, 255)
        
        self.mem_dump_data_43 = getUnsigned(packet[69:70], 'big', 0, 255)
        
        self.mem_dump_data_44 = getUnsigned(packet[70:71], 'big', 0, 255)
        
        self.mem_dump_data_45 = getUnsigned(packet[71:72], 'big', 0, 255)
        
        self.mem_dump_data_46 = getUnsigned(packet[72:73], 'big', 0, 255)
        
        self.mem_dump_data_47 = getUnsigned(packet[73:74], 'big', 0, 255)
        
        self.mem_dump_data_48 = getUnsigned(packet[74:75], 'big', 0, 255)
        
        self.mem_dump_data_49 = getUnsigned(packet[75:76], 'big', 0, 255)
        
        self.mem_dump_data_50 = getUnsigned(packet[76:77], 'big', 0, 255)
        
        self.mem_dump_data_51 = getUnsigned(packet[77:78], 'big', 0, 255)
        
        self.mem_dump_data_52 = getUnsigned(packet[78:79], 'big', 0, 255)
        
        self.mem_dump_data_53 = getUnsigned(packet[79:80], 'big', 0, 255)
        
        self.mem_dump_data_54 = getUnsigned(packet[80:81], 'big', 0, 255)
        
        self.mem_dump_data_55 = getUnsigned(packet[81:82], 'big', 0, 255)
        
        self.mem_dump_data_56 = getUnsigned(packet[82:83], 'big', 0, 255)
        
        self.mem_dump_data_57 = getUnsigned(packet[83:84], 'big', 0, 255)
        
        self.mem_dump_data_58 = getUnsigned(packet[84:85], 'big', 0, 255)
        
        self.mem_dump_data_59 = getUnsigned(packet[85:86], 'big', 0, 255)
        
        self.mem_dump_data_60 = getUnsigned(packet[86:87], 'big', 0, 255)
        
        self.mem_dump_data_61 = getUnsigned(packet[87:88], 'big', 0, 255)
        
        self.mem_dump_data_62 = getUnsigned(packet[88:89], 'big', 0, 255)
        
        self.mem_dump_data_63 = getUnsigned(packet[89:90], 'big', 0, 255)
        
        self.mem_dump_data_64 = getUnsigned(packet[90:91], 'big', 0, 255)
        
        self.mem_dump_data_65 = getUnsigned(packet[91:92], 'big', 0, 255)
        
        self.mem_dump_data_66 = getUnsigned(packet[92:93], 'big', 0, 255)
        
        self.mem_dump_data_67 = getUnsigned(packet[93:94], 'big', 0, 255)
        
        self.mem_dump_data_68 = getUnsigned(packet[94:95], 'big', 0, 255)
        
        self.mem_dump_data_69 = getUnsigned(packet[95:96], 'big', 0, 255)
        
        self.mem_dump_data_70 = getUnsigned(packet[96:97], 'big', 0, 255)
        
        self.mem_dump_data_71 = getUnsigned(packet[97:98], 'big', 0, 255)
        
        self.mem_dump_data_72 = getUnsigned(packet[98:99], 'big', 0, 255)
        
        self.mem_dump_data_73 = getUnsigned(packet[99:100], 'big', 0, 255)
        
        self.mem_dump_data_74 = getUnsigned(packet[100:101], 'big', 0, 255)
        
        self.mem_dump_data_75 = getUnsigned(packet[101:102], 'big', 0, 255)
        
        self.mem_dump_data_76 = getUnsigned(packet[102:103], 'big', 0, 255)
        
        self.mem_dump_data_77 = getUnsigned(packet[103:104], 'big', 0, 255)
        
        self.mem_dump_data_78 = getUnsigned(packet[104:105], 'big', 0, 255)
        
        self.mem_dump_data_79 = getUnsigned(packet[105:106], 'big', 0, 255)
        
        self.mem_dump_data_80 = getUnsigned(packet[106:107], 'big', 0, 255)
        
        self.mem_dump_data_81 = getUnsigned(packet[107:108], 'big', 0, 255)
        
        self.mem_dump_data_82 = getUnsigned(packet[108:109], 'big', 0, 255)
        
        self.mem_dump_data_83 = getUnsigned(packet[109:110], 'big', 0, 255)
        
        self.mem_dump_data_84 = getUnsigned(packet[110:111], 'big', 0, 255)
        
        self.mem_dump_data_85 = getUnsigned(packet[111:112], 'big', 0, 255)
        
        self.mem_dump_data_86 = getUnsigned(packet[112:113], 'big', 0, 255)
        
        self.mem_dump_data_87 = getUnsigned(packet[113:114], 'big', 0, 255)
        
        self.mem_dump_data_88 = getUnsigned(packet[114:115], 'big', 0, 255)
        
        self.mem_dump_data_89 = getUnsigned(packet[115:116], 'big', 0, 255)
        
        self.mem_dump_data_90 = getUnsigned(packet[116:117], 'big', 0, 255)
        
        self.mem_dump_data_91 = getUnsigned(packet[117:118], 'big', 0, 255)
        
        self.mem_dump_data_92 = getUnsigned(packet[118:119], 'big', 0, 255)
        
        self.mem_dump_data_93 = getUnsigned(packet[119:120], 'big', 0, 255)
        
        self.mem_dump_data_94 = getUnsigned(packet[120:121], 'big', 0, 255)
        
        self.mem_dump_data_95 = getUnsigned(packet[121:122], 'big', 0, 255)
        
        self.mem_dump_data_96 = getUnsigned(packet[122:123], 'big', 0, 255)
        
        self.mem_dump_data_97 = getUnsigned(packet[123:124], 'big', 0, 255)
        
        self.mem_dump_data_98 = getUnsigned(packet[124:125], 'big', 0, 255)
        
        self.mem_dump_data_99 = getUnsigned(packet[125:126], 'big', 0, 255)
        
        self.mem_dump_data_100 = getUnsigned(packet[126:127], 'big', 0, 255)
        
        self.mem_dump_data_101 = getUnsigned(packet[127:128], 'big', 0, 255)
        
        self.mem_dump_data_102 = getUnsigned(packet[128:129], 'big', 0, 255)
        
        self.mem_dump_data_103 = getUnsigned(packet[129:130], 'big', 0, 255)
        
        self.mem_dump_data_104 = getUnsigned(packet[130:131], 'big', 0, 255)
        
        self.mem_dump_data_105 = getUnsigned(packet[131:132], 'big', 0, 255)
        
        self.mem_dump_data_106 = getUnsigned(packet[132:133], 'big', 0, 255)
        
        self.mem_dump_data_107 = getUnsigned(packet[133:134], 'big', 0, 255)
        
        self.mem_dump_data_108 = getUnsigned(packet[134:135], 'big', 0, 255)
        
        self.mem_dump_data_109 = getUnsigned(packet[135:136], 'big', 0, 255)
        
        self.mem_dump_data_110 = getUnsigned(packet[136:137], 'big', 0, 255)
        
        self.mem_dump_data_111 = getUnsigned(packet[137:138], 'big', 0, 255)
        
        self.mem_dump_data_112 = getUnsigned(packet[138:139], 'big', 0, 255)
        
        self.mem_dump_data_113 = getUnsigned(packet[139:140], 'big', 0, 255)
        
        self.mem_dump_data_114 = getUnsigned(packet[140:141], 'big', 0, 255)
        
        self.mem_dump_data_115 = getUnsigned(packet[141:142], 'big', 0, 255)
        
        self.mem_dump_data_116 = getUnsigned(packet[142:143], 'big', 0, 255)
        
        self.mem_dump_data_117 = getUnsigned(packet[143:144], 'big', 0, 255)
        
        self.mem_dump_data_118 = getUnsigned(packet[144:145], 'big', 0, 255)
        
        self.mem_dump_data_119 = getUnsigned(packet[145:146], 'big', 0, 255)
        
        self.mem_dump_data_120 = getUnsigned(packet[146:147], 'big', 0, 255)
        
        self.mem_dump_data_121 = getUnsigned(packet[147:148], 'big', 0, 255)
        
        self.mem_dump_data_122 = getUnsigned(packet[148:149], 'big', 0, 255)
        
        self.mem_dump_data_123 = getUnsigned(packet[149:150], 'big', 0, 255)
        
        self.mem_dump_data_124 = getUnsigned(packet[150:151], 'big', 0, 255)
        
        self.mem_dump_data_125 = getUnsigned(packet[151:152], 'big', 0, 255)
        
        self.mem_dump_data_126 = getUnsigned(packet[152:153], 'big', 0, 255)
        
        self.mem_dump_data_127 = getUnsigned(packet[153:154], 'big', 0, 255)
        
        self.mem_dump_checksum = getUnsigned(packet[154:158], 'big', 0, 4294967295)

        try:
            self.mem_dump = custom_decoders.decode_mem_dump(self, packet)
        except:
            try:
                self.mem_dump = general_decoders.decode_mem_dump(self, packet)
            except:
                print('Could not decode mem_dump, no custom or general decoder found')

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class TLM_HK:
    def __str__(self):
        return 'TLM_HK'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_tlm_hk = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_tlm_hk = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.tlm_sent_cnt_dbg = getUnsigned(packet[6:8], 'big', 0, 65535)
        
        self.tlm_err_cnt_dbg = getUnsigned(packet[8:10], 'big', 0, 65535)
        
        self.tlm_busy_cnt_dbg = getUnsigned(packet[10:12], 'big', 0, 65535)
        
        self.tlm_len_cnt_dbg = getUnsigned(packet[12:14], 'big', 0, 65535)
        
        self.tlm_len_apid_dbg = getUnsigned(packet[14:16], 'big', 0, 65535)
        try:
            self.tlm_len_apid_dbg = gen_states.CONVERT_tlm_len_apid_dbg(self.tlm_len_apid_dbg)
        except:
            pass
        
        self.tlm_stream_st_dbg = getUnsigned(packet[16:17], 'big', 0, 255)
        try:
            self.tlm_stream_st_dbg = gen_states.CONVERT_tlm_stream_st_dbg(self.tlm_stream_st_dbg)
        except:
            pass
        
        self.tlm_apid_cnt_dbg = getUnsigned(packet[17:18], 'big', 0, 255)
        
        self.tlm_sent_cnt_store = getUnsigned(packet[18:20], 'big', 0, 65535)
        
        self.tlm_err_cnt_store = getUnsigned(packet[20:22], 'big', 0, 65535)
        
        self.tlm_busy_cnt_store = getUnsigned(packet[22:24], 'big', 0, 65535)
        
        self.tlm_len_cnt_store = getUnsigned(packet[24:26], 'big', 0, 65535)
        
        self.tlm_len_apid_store = getUnsigned(packet[26:28], 'big', 0, 65535)
        try:
            self.tlm_len_apid_store = gen_states.CONVERT_tlm_len_apid_store(self.tlm_len_apid_store)
        except:
            pass
        
        self.tlm_stream_st_store = getUnsigned(packet[28:29], 'big', 0, 255)
        try:
            self.tlm_stream_st_store = gen_states.CONVERT_tlm_stream_st_store(self.tlm_stream_st_store)
        except:
            pass
        
        self.tlm_apid_cnt_store = getUnsigned(packet[29:30], 'big', 0, 255)
        
        self.tlm_sent_cnt_uhf = getUnsigned(packet[30:32], 'big', 0, 65535)
        
        self.tlm_err_cnt_uhf = getUnsigned(packet[32:34], 'big', 0, 65535)
        
        self.tlm_busy_cnt_uhf = getUnsigned(packet[34:36], 'big', 0, 65535)
        
        self.tlm_len_cnt_uhf = getUnsigned(packet[36:38], 'big', 0, 65535)
        
        self.tlm_len_apid_uhf = getUnsigned(packet[38:40], 'big', 0, 65535)
        try:
            self.tlm_len_apid_uhf = gen_states.CONVERT_tlm_len_apid_uhf(self.tlm_len_apid_uhf)
        except:
            pass
        
        self.tlm_stream_st_uhf = getUnsigned(packet[40:41], 'big', 0, 255)
        try:
            self.tlm_stream_st_uhf = gen_states.CONVERT_tlm_stream_st_uhf(self.tlm_stream_st_uhf)
        except:
            pass
        
        self.tlm_apid_cnt_uhf = getUnsigned(packet[41:42], 'big', 0, 255)
        
        self.tlm_id_err_cnt = getUnsigned(packet[42:43], 'big', 0, 255)
        
        self.tlm_stream_err_cnt = getUnsigned(packet[43:44], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[44:45], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[45:46], 'big', 0, 255)
        
        self.tlm_hk_checksum = getUnsigned(packet[46:50], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class TBL_HK:
    def __str__(self):
        return 'TBL_HK'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_tbl_hk = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_tbl_hk = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.tbl_unreg_err_cnt = getUnsigned(packet[6:8], 'big', 0, 65535)
        
        self.tbl_inv_err_cnt = getUnsigned(packet[8:10], 'big', 0, 65535)
        
        self.tbl_check_err_cnt = getUnsigned(packet[10:12], 'big', 0, 65535)
        
        self.tbl_match_err_cnt = getUnsigned(packet[12:14], 'big', 0, 65535)
        
        self.tbl_read_err_cnt = getUnsigned(packet[14:16], 'big', 0, 65535)
        
        self.tbl_load_state = getUnsigned(packet[16:17], 'big', 0, 255)
        try:
            self.tbl_load_state = gen_states.CONVERT_tbl_load_state(self.tbl_load_state)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[17:18], 'big', 0, 255)
        
        self.tbl_size_table = getUnsigned(packet[18:22], 'big', 0, 4294967295)
        
        self.tbl_up_tm_table = getUnsigned(packet[22:26], 'big', 0, 4294967295)
        
        self.tbl_query_table = getUnsigned(packet[26:30], 'big', 0, 4294967295)
        
        self.tbl_cksm_table = getUnsigned(packet[30:34], 'big', 0, 4294967295)
        
        self.tbl_pri_table = getUnsigned(packet[34:35], 'big', 0, 255)
        
        self.tbl_bck_table = getUnsigned(packet[35:36], 'big', 0, 255)
        
        self.tbl_pend_table = getUnsigned(packet[36:37], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[37:38], 'big', 0, 255)
        
        self.tbl_size_stream_dbg = getUnsigned(packet[38:42], 'big', 0, 4294967295)
        
        self.tbl_up_tm_stream_dbg = getUnsigned(packet[42:46], 'big', 0, 4294967295)
        
        self.tbl_query_stream_dbg = getUnsigned(packet[46:50], 'big', 0, 4294967295)
        
        self.tbl_cksm_stream_dbg = getUnsigned(packet[50:54], 'big', 0, 4294967295)
        
        self.tbl_pri_stream_dbg = getUnsigned(packet[54:55], 'big', 0, 255)
        
        self.tbl_bck_stream_dbg = getUnsigned(packet[55:56], 'big', 0, 255)
        
        self.tbl_pend_stream_dbg = getUnsigned(packet[56:57], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[57:58], 'big', 0, 255)
        
        self.tbl_size_stream_store = getUnsigned(packet[58:62], 'big', 0, 4294967295)
        
        self.tbl_up_tm_stream_store = getUnsigned(packet[62:66], 'big', 0, 4294967295)
        
        self.tbl_query_stream_store = getUnsigned(packet[66:70], 'big', 0, 4294967295)
        
        self.tbl_cksm_stream_store = getUnsigned(packet[70:74], 'big', 0, 4294967295)
        
        self.tbl_pri_stream_store = getUnsigned(packet[74:75], 'big', 0, 255)
        
        self.tbl_bck_stream_store = getUnsigned(packet[75:76], 'big', 0, 255)
        
        self.tbl_pend_stream_store = getUnsigned(packet[76:77], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[77:78], 'big', 0, 255)
        
        self.tbl_size_stream_uhf = getUnsigned(packet[78:82], 'big', 0, 4294967295)
        
        self.tbl_up_tm_stream_uhf = getUnsigned(packet[82:86], 'big', 0, 4294967295)
        
        self.tbl_query_stream_uhf = getUnsigned(packet[86:90], 'big', 0, 4294967295)
        
        self.tbl_cksm_stream_uhf = getUnsigned(packet[90:94], 'big', 0, 4294967295)
        
        self.tbl_pri_stream_uhf = getUnsigned(packet[94:95], 'big', 0, 255)
        
        self.tbl_bck_stream_uhf = getUnsigned(packet[95:96], 'big', 0, 255)
        
        self.tbl_pend_stream_uhf = getUnsigned(packet[96:97], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[97:98], 'big', 0, 255)
        
        self.tbl_size_fpw = getUnsigned(packet[98:102], 'big', 0, 4294967295)
        
        self.tbl_up_tm_fpw = getUnsigned(packet[102:106], 'big', 0, 4294967295)
        
        self.tbl_query_fpw = getUnsigned(packet[106:110], 'big', 0, 4294967295)
        
        self.tbl_cksm_fpw = getUnsigned(packet[110:114], 'big', 0, 4294967295)
        
        self.tbl_pri_fpw = getUnsigned(packet[114:115], 'big', 0, 255)
        
        self.tbl_bck_fpw = getUnsigned(packet[115:116], 'big', 0, 255)
        
        self.tbl_pend_fpw = getUnsigned(packet[116:117], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[117:118], 'big', 0, 255)
        
        self.tbl_size_storage = getUnsigned(packet[118:122], 'big', 0, 4294967295)
        
        self.tbl_up_tm_storage = getUnsigned(packet[122:126], 'big', 0, 4294967295)
        
        self.tbl_query_storage = getUnsigned(packet[126:130], 'big', 0, 4294967295)
        
        self.tbl_cksm_storage = getUnsigned(packet[130:134], 'big', 0, 4294967295)
        
        self.tbl_pri_storage = getUnsigned(packet[134:135], 'big', 0, 255)
        
        self.tbl_bck_storage = getUnsigned(packet[135:136], 'big', 0, 255)
        
        self.tbl_pend_storage = getUnsigned(packet[136:137], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[137:138], 'big', 0, 255)
        
        self.tbl_size_mode = getUnsigned(packet[138:142], 'big', 0, 4294967295)
        
        self.tbl_up_tm_mode = getUnsigned(packet[142:146], 'big', 0, 4294967295)
        
        self.tbl_query_mode = getUnsigned(packet[146:150], 'big', 0, 4294967295)
        
        self.tbl_cksm_mode = getUnsigned(packet[150:154], 'big', 0, 4294967295)
        
        self.tbl_pri_mode = getUnsigned(packet[154:155], 'big', 0, 255)
        
        self.tbl_bck_mode = getUnsigned(packet[155:156], 'big', 0, 255)
        
        self.tbl_pend_mode = getUnsigned(packet[156:157], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[157:158], 'big', 0, 255)
        
        self.tbl_size_adcs = getUnsigned(packet[158:162], 'big', 0, 4294967295)
        
        self.tbl_up_tm_adcs = getUnsigned(packet[162:166], 'big', 0, 4294967295)
        
        self.tbl_query_adcs = getUnsigned(packet[166:170], 'big', 0, 4294967295)
        
        self.tbl_cksm_adcs = getUnsigned(packet[170:174], 'big', 0, 4294967295)
        
        self.tbl_pri_adcs = getUnsigned(packet[174:175], 'big', 0, 255)
        
        self.tbl_bck_adcs = getUnsigned(packet[175:176], 'big', 0, 255)
        
        self.tbl_pend_adcs = getUnsigned(packet[176:177], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[177:178], 'big', 0, 255)
        
        self.tbl_hk_checksum = getUnsigned(packet[178:182], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class ADCS_TLM_PROC:
    def __str__(self):
        return 'ADCS_TLM_PROC'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_adcs_tlm_proc = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_adcs_tlm_proc = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.adcs_tlm_proc_tlm_map_id = getUnsigned(packet[6:10], 'big', 0, 4294967295)
        
        self.adcs_tlm_proc_tlm_map_size = getUnsigned(packet[10:14], 'big', 0, 4294967295)
        
        self.adcs_tlm_proc_tlm_table_used = getUnsigned(packet[14:15], 'big', 0, 255)
        
        self.adcs_tlm_proc_file_pointer = getUnsigned(packet[15:19], 'big', 0, 4294967295)
        
        self.adcs_tlm_proc_buffer_index = getUnsigned(packet[19:20], 'big', 0, 255)
        
        self.adcs_tlm_proc_streaming = getUnsigned(packet[20:21], 'big', 0, 255)
        try:
            self.adcs_tlm_proc_streaming = gen_states.CONVERT_adcs_tlm_proc_streaming(self.adcs_tlm_proc_streaming)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[21:22], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[22:23], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[23:24], 'big', 0, 255)
        
        self.adcs_tlm_proc_checksum = getUnsigned(packet[24:28], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin


class ADCS_GENERAL:
    def __str__(self):
        return 'ADCS_GENERAL'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_adcs_general = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_adcs_general = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.adcs_general_version_code_0 = getUnsigned(packet[6:10], 'big', 0, 4294967295)
        
        self.adcs_general_version_code_1 = getUnsigned(packet[10:14], 'big', 0, 4294967295)
        
        self.adcs_general_version_type = getUnsigned(packet[14:15], 'big', 0, 255)
        
        self.adcs_general_async_running = getUnsigned(packet[15:16], 'big', 0, 255)
        
        self.adcs_general_inertia_index = getUnsigned(packet[16:17], 'big', 0, 255)
        
        self.adcs_general_inertia0_0 = getSigned(packet[17:21], 'big', 0, 4294967295)
        try:
            self.adcs_general_inertia0_0 = gen_eus.CONVERT_adcs_general_inertia0_0(self.adcs_general_inertia0_0)
        except:
            pass
        
        self.adcs_general_inertia1_0 = getSigned(packet[21:25], 'big', 0, 4294967295)
        try:
            self.adcs_general_inertia1_0 = gen_eus.CONVERT_adcs_general_inertia1_0(self.adcs_general_inertia1_0)
        except:
            pass
        
        self.adcs_general_inertia2_0 = getSigned(packet[25:29], 'big', 0, 4294967295)
        try:
            self.adcs_general_inertia2_0 = gen_eus.CONVERT_adcs_general_inertia2_0(self.adcs_general_inertia2_0)
        except:
            pass
        
        self.adcs_general_inertia0_1 = getSigned(packet[29:33], 'big', 0, 4294967295)
        try:
            self.adcs_general_inertia0_1 = gen_eus.CONVERT_adcs_general_inertia0_1(self.adcs_general_inertia0_1)
        except:
            pass
        
        self.adcs_general_inertia1_1 = getSigned(packet[33:37], 'big', 0, 4294967295)
        try:
            self.adcs_general_inertia1_1 = gen_eus.CONVERT_adcs_general_inertia1_1(self.adcs_general_inertia1_1)
        except:
            pass
        
        self.adcs_general_inertia2_1 = getSigned(packet[37:41], 'big', 0, 4294967295)
        try:
            self.adcs_general_inertia2_1 = gen_eus.CONVERT_adcs_general_inertia2_1(self.adcs_general_inertia2_1)
        except:
            pass
        
        self.adcs_general_inertia0_2 = getSigned(packet[41:45], 'big', 0, 4294967295)
        try:
            self.adcs_general_inertia0_2 = gen_eus.CONVERT_adcs_general_inertia0_2(self.adcs_general_inertia0_2)
        except:
            pass
        
        self.adcs_general_inertia1_2 = getSigned(packet[45:49], 'big', 0, 4294967295)
        try:
            self.adcs_general_inertia1_2 = gen_eus.CONVERT_adcs_general_inertia1_2(self.adcs_general_inertia1_2)
        except:
            pass
        
        self.adcs_general_inertia2_2 = getSigned(packet[49:53], 'big', 0, 4294967295)
        try:
            self.adcs_general_inertia2_2 = gen_eus.CONVERT_adcs_general_inertia2_2(self.adcs_general_inertia2_2)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[53:54], 'big', 0, 255)
        
        self.adcs_general_checksum = getUnsigned(packet[54:58], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class ADCS_TIME:
    def __str__(self):
        return 'ADCS_TIME'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_adcs_time = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_adcs_time = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.adcs_time_tai_seconds = getUnsigned(packet[6:14], 'big', 0, 18446744073709551615)
        try:
            self.adcs_time_tai_seconds = gen_eus.CONVERT_adcs_time_tai_seconds(self.adcs_time_tai_seconds)
        except:
            pass
        
        self.adcs_time_jd_of_now_wrt_tai = getUnsigned(packet[14:18], 'big', 0, 4294967295)
        
        self.adcs_time_gps_update_cycle_period = getUnsigned(packet[18:22], 'big', 0, 4294967295)
        
        self.adcs_time_gps_update_cycle_count = getUnsigned(packet[22:26], 'big', 0, 4294967295)
        
        self.adcs_time_time_valid = getUnsigned(packet[26:27], 'big', 0, 255)
        try:
            self.adcs_time_time_valid = gen_states.CONVERT_adcs_time_time_valid(self.adcs_time_time_valid)
        except:
            pass
        
        self.adcs_time_utc_to_tai = getSigned(packet[27:28], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[28:29], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[29:30], 'big', 0, 255)
        
        self.adcs_time_checksum = getUnsigned(packet[30:34], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class ADCS_REFS:
    def __str__(self):
        return 'ADCS_REFS'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_adcs_refs = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_adcs_refs = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.adcs_refs_gps_timer = getUnsigned(packet[6:10], 'big', 0, 4294967295)
        
        self.adcs_refs_time_now = getUnsigned(packet[10:18], 'big', 0, 18446744073709551615)
        try:
            self.adcs_refs_time_now = gen_eus.CONVERT_adcs_refs_time_now(self.adcs_refs_time_now)
        except:
            pass
        
        self.adcs_refs_q_ecef_wrt_eci_0 = getUnsigned(packet[18:22], 'big', 0, 4294967295)
        try:
            self.adcs_refs_q_ecef_wrt_eci_0 = gen_eus.CONVERT_adcs_refs_q_ecef_wrt_eci_0(self.adcs_refs_q_ecef_wrt_eci_0)
        except:
            pass
        
        self.adcs_refs_q_ecef_wrt_eci_1 = getUnsigned(packet[22:26], 'big', 0, 4294967295)
        try:
            self.adcs_refs_q_ecef_wrt_eci_1 = gen_eus.CONVERT_adcs_refs_q_ecef_wrt_eci_1(self.adcs_refs_q_ecef_wrt_eci_1)
        except:
            pass
        
        self.adcs_refs_q_ecef_wrt_eci_2 = getUnsigned(packet[26:30], 'big', 0, 4294967295)
        try:
            self.adcs_refs_q_ecef_wrt_eci_2 = gen_eus.CONVERT_adcs_refs_q_ecef_wrt_eci_2(self.adcs_refs_q_ecef_wrt_eci_2)
        except:
            pass
        
        self.adcs_refs_q_ecef_wrt_eci_3 = getUnsigned(packet[30:34], 'big', 0, 4294967295)
        try:
            self.adcs_refs_q_ecef_wrt_eci_3 = gen_eus.CONVERT_adcs_refs_q_ecef_wrt_eci_3(self.adcs_refs_q_ecef_wrt_eci_3)
        except:
            pass
        
        self.adcs_refs_position_wrt_eci_0 = getUnsigned(packet[34:42], 'big', 0, 18446744073709551615)
        try:
            self.adcs_refs_position_wrt_eci_0 = gen_eus.CONVERT_adcs_refs_position_wrt_eci_0(self.adcs_refs_position_wrt_eci_0)
        except:
            pass
        
        self.adcs_refs_position_wrt_eci_1 = getUnsigned(packet[42:50], 'big', 0, 18446744073709551615)
        try:
            self.adcs_refs_position_wrt_eci_1 = gen_eus.CONVERT_adcs_refs_position_wrt_eci_1(self.adcs_refs_position_wrt_eci_1)
        except:
            pass
        
        self.adcs_refs_position_wrt_eci_2 = getUnsigned(packet[50:58], 'big', 0, 18446744073709551615)
        try:
            self.adcs_refs_position_wrt_eci_2 = gen_eus.CONVERT_adcs_refs_position_wrt_eci_2(self.adcs_refs_position_wrt_eci_2)
        except:
            pass
        
        self.adcs_refs_position_wrt_ecef_0 = getUnsigned(packet[58:66], 'big', 0, 18446744073709551615)
        try:
            self.adcs_refs_position_wrt_ecef_0 = gen_eus.CONVERT_adcs_refs_position_wrt_ecef_0(self.adcs_refs_position_wrt_ecef_0)
        except:
            pass
        
        self.adcs_refs_position_wrt_ecef_1 = getUnsigned(packet[66:74], 'big', 0, 18446744073709551615)
        try:
            self.adcs_refs_position_wrt_ecef_1 = gen_eus.CONVERT_adcs_refs_position_wrt_ecef_1(self.adcs_refs_position_wrt_ecef_1)
        except:
            pass
        
        self.adcs_refs_position_wrt_ecef_2 = getUnsigned(packet[74:82], 'big', 0, 18446744073709551615)
        try:
            self.adcs_refs_position_wrt_ecef_2 = gen_eus.CONVERT_adcs_refs_position_wrt_ecef_2(self.adcs_refs_position_wrt_ecef_2)
        except:
            pass
        
        self.adcs_refs_velocity_wrt_eci_0 = getUnsigned(packet[82:90], 'big', 0, 18446744073709551615)
        try:
            self.adcs_refs_velocity_wrt_eci_0 = gen_eus.CONVERT_adcs_refs_velocity_wrt_eci_0(self.adcs_refs_velocity_wrt_eci_0)
        except:
            pass
        
        self.adcs_refs_velocity_wrt_eci_1 = getUnsigned(packet[90:98], 'big', 0, 18446744073709551615)
        try:
            self.adcs_refs_velocity_wrt_eci_1 = gen_eus.CONVERT_adcs_refs_velocity_wrt_eci_1(self.adcs_refs_velocity_wrt_eci_1)
        except:
            pass
        
        self.adcs_refs_velocity_wrt_eci_2 = getUnsigned(packet[98:106], 'big', 0, 18446744073709551615)
        try:
            self.adcs_refs_velocity_wrt_eci_2 = gen_eus.CONVERT_adcs_refs_velocity_wrt_eci_2(self.adcs_refs_velocity_wrt_eci_2)
        except:
            pass
        
        self.adcs_refs_velocity_wrt_ecef_0 = getUnsigned(packet[106:114], 'big', 0, 18446744073709551615)
        try:
            self.adcs_refs_velocity_wrt_ecef_0 = gen_eus.CONVERT_adcs_refs_velocity_wrt_ecef_0(self.adcs_refs_velocity_wrt_ecef_0)
        except:
            pass
        
        self.adcs_refs_velocity_wrt_ecef_1 = getUnsigned(packet[114:122], 'big', 0, 18446744073709551615)
        try:
            self.adcs_refs_velocity_wrt_ecef_1 = gen_eus.CONVERT_adcs_refs_velocity_wrt_ecef_1(self.adcs_refs_velocity_wrt_ecef_1)
        except:
            pass
        
        self.adcs_refs_velocity_wrt_ecef_2 = getUnsigned(packet[122:130], 'big', 0, 18446744073709551615)
        try:
            self.adcs_refs_velocity_wrt_ecef_2 = gen_eus.CONVERT_adcs_refs_velocity_wrt_ecef_2(self.adcs_refs_velocity_wrt_ecef_2)
        except:
            pass
        
        self.adcs_refs_nadir_vector_body_0 = getSigned(packet[130:132], 'big', 0, 65535)
        try:
            self.adcs_refs_nadir_vector_body_0 = gen_eus.CONVERT_adcs_refs_nadir_vector_body_0(self.adcs_refs_nadir_vector_body_0)
        except:
            pass
        
        self.adcs_refs_nadir_vector_body_1 = getSigned(packet[132:134], 'big', 0, 65535)
        try:
            self.adcs_refs_nadir_vector_body_1 = gen_eus.CONVERT_adcs_refs_nadir_vector_body_1(self.adcs_refs_nadir_vector_body_1)
        except:
            pass
        
        self.adcs_refs_nadir_vector_body_2 = getSigned(packet[134:136], 'big', 0, 65535)
        try:
            self.adcs_refs_nadir_vector_body_2 = gen_eus.CONVERT_adcs_refs_nadir_vector_body_2(self.adcs_refs_nadir_vector_body_2)
        except:
            pass
        
        self.adcs_refs_gd_nadir_vector_body_0 = getSigned(packet[136:138], 'big', 0, 65535)
        try:
            self.adcs_refs_gd_nadir_vector_body_0 = gen_eus.CONVERT_adcs_refs_gd_nadir_vector_body_0(self.adcs_refs_gd_nadir_vector_body_0)
        except:
            pass
        
        self.adcs_refs_gd_nadir_vector_body_1 = getSigned(packet[138:140], 'big', 0, 65535)
        try:
            self.adcs_refs_gd_nadir_vector_body_1 = gen_eus.CONVERT_adcs_refs_gd_nadir_vector_body_1(self.adcs_refs_gd_nadir_vector_body_1)
        except:
            pass
        
        self.adcs_refs_gd_nadir_vector_body_2 = getSigned(packet[140:142], 'big', 0, 65535)
        try:
            self.adcs_refs_gd_nadir_vector_body_2 = gen_eus.CONVERT_adcs_refs_gd_nadir_vector_body_2(self.adcs_refs_gd_nadir_vector_body_2)
        except:
            pass
        
        self.adcs_refs_modeled_sun_vector_body_0 = getSigned(packet[142:144], 'big', 0, 65535)
        try:
            self.adcs_refs_modeled_sun_vector_body_0 = gen_eus.CONVERT_adcs_refs_modeled_sun_vector_body_0(self.adcs_refs_modeled_sun_vector_body_0)
        except:
            pass
        
        self.adcs_refs_modeled_sun_vector_body_1 = getSigned(packet[144:146], 'big', 0, 65535)
        try:
            self.adcs_refs_modeled_sun_vector_body_1 = gen_eus.CONVERT_adcs_refs_modeled_sun_vector_body_1(self.adcs_refs_modeled_sun_vector_body_1)
        except:
            pass
        
        self.adcs_refs_modeled_sun_vector_body_2 = getSigned(packet[146:148], 'big', 0, 65535)
        try:
            self.adcs_refs_modeled_sun_vector_body_2 = gen_eus.CONVERT_adcs_refs_modeled_sun_vector_body_2(self.adcs_refs_modeled_sun_vector_body_2)
        except:
            pass
        
        self.adcs_refs_moon_vector_body_0 = getSigned(packet[148:150], 'big', 0, 65535)
        try:
            self.adcs_refs_moon_vector_body_0 = gen_eus.CONVERT_adcs_refs_moon_vector_body_0(self.adcs_refs_moon_vector_body_0)
        except:
            pass
        
        self.adcs_refs_moon_vector_body_1 = getSigned(packet[150:152], 'big', 0, 65535)
        try:
            self.adcs_refs_moon_vector_body_1 = gen_eus.CONVERT_adcs_refs_moon_vector_body_1(self.adcs_refs_moon_vector_body_1)
        except:
            pass
        
        self.adcs_refs_moon_vector_body_2 = getSigned(packet[152:154], 'big', 0, 65535)
        try:
            self.adcs_refs_moon_vector_body_2 = gen_eus.CONVERT_adcs_refs_moon_vector_body_2(self.adcs_refs_moon_vector_body_2)
        except:
            pass
        
        self.adcs_refs_mag_model_vector_eci_0 = getSigned(packet[154:156], 'big', 0, 65535)
        try:
            self.adcs_refs_mag_model_vector_eci_0 = gen_eus.CONVERT_adcs_refs_mag_model_vector_eci_0(self.adcs_refs_mag_model_vector_eci_0)
        except:
            pass
        
        self.adcs_refs_mag_model_vector_eci_1 = getSigned(packet[156:158], 'big', 0, 65535)
        try:
            self.adcs_refs_mag_model_vector_eci_1 = gen_eus.CONVERT_adcs_refs_mag_model_vector_eci_1(self.adcs_refs_mag_model_vector_eci_1)
        except:
            pass
        
        self.adcs_refs_mag_model_vector_eci_2 = getSigned(packet[158:160], 'big', 0, 65535)
        try:
            self.adcs_refs_mag_model_vector_eci_2 = gen_eus.CONVERT_adcs_refs_mag_model_vector_eci_2(self.adcs_refs_mag_model_vector_eci_2)
        except:
            pass
        
        self.adcs_refs_mag_model_vector_body_0 = getSigned(packet[160:162], 'big', 0, 65535)
        try:
            self.adcs_refs_mag_model_vector_body_0 = gen_eus.CONVERT_adcs_refs_mag_model_vector_body_0(self.adcs_refs_mag_model_vector_body_0)
        except:
            pass
        
        self.adcs_refs_mag_model_vector_body_1 = getSigned(packet[162:164], 'big', 0, 65535)
        try:
            self.adcs_refs_mag_model_vector_body_1 = gen_eus.CONVERT_adcs_refs_mag_model_vector_body_1(self.adcs_refs_mag_model_vector_body_1)
        except:
            pass
        
        self.adcs_refs_mag_model_vector_body_2 = getSigned(packet[164:166], 'big', 0, 65535)
        try:
            self.adcs_refs_mag_model_vector_body_2 = gen_eus.CONVERT_adcs_refs_mag_model_vector_body_2(self.adcs_refs_mag_model_vector_body_2)
        except:
            pass
        
        self.adcs_refs_sun_position_wrt_eci_0 = getUnsigned(packet[166:170], 'big', 0, 4294967295)
        try:
            self.adcs_refs_sun_position_wrt_eci_0 = gen_eus.CONVERT_adcs_refs_sun_position_wrt_eci_0(self.adcs_refs_sun_position_wrt_eci_0)
        except:
            pass
        
        self.adcs_refs_sun_position_wrt_eci_1 = getUnsigned(packet[170:174], 'big', 0, 4294967295)
        try:
            self.adcs_refs_sun_position_wrt_eci_1 = gen_eus.CONVERT_adcs_refs_sun_position_wrt_eci_1(self.adcs_refs_sun_position_wrt_eci_1)
        except:
            pass
        
        self.adcs_refs_sun_position_wrt_eci_2 = getUnsigned(packet[174:178], 'big', 0, 4294967295)
        try:
            self.adcs_refs_sun_position_wrt_eci_2 = gen_eus.CONVERT_adcs_refs_sun_position_wrt_eci_2(self.adcs_refs_sun_position_wrt_eci_2)
        except:
            pass
        
        self.adcs_refs_moon_position_wrt_eci_0 = getUnsigned(packet[178:182], 'big', 0, 4294967295)
        try:
            self.adcs_refs_moon_position_wrt_eci_0 = gen_eus.CONVERT_adcs_refs_moon_position_wrt_eci_0(self.adcs_refs_moon_position_wrt_eci_0)
        except:
            pass
        
        self.adcs_refs_moon_position_wrt_eci_1 = getUnsigned(packet[182:186], 'big', 0, 4294967295)
        try:
            self.adcs_refs_moon_position_wrt_eci_1 = gen_eus.CONVERT_adcs_refs_moon_position_wrt_eci_1(self.adcs_refs_moon_position_wrt_eci_1)
        except:
            pass
        
        self.adcs_refs_moon_position_wrt_eci_2 = getUnsigned(packet[186:190], 'big', 0, 4294967295)
        try:
            self.adcs_refs_moon_position_wrt_eci_2 = gen_eus.CONVERT_adcs_refs_moon_position_wrt_eci_2(self.adcs_refs_moon_position_wrt_eci_2)
        except:
            pass
        
        self.adcs_refs_latitude = getSigned(packet[190:192], 'big', 0, 65535)
        try:
            self.adcs_refs_latitude = gen_eus.CONVERT_adcs_refs_latitude(self.adcs_refs_latitude)
        except:
            pass
        
        self.adcs_refs_longitude = getUnsigned(packet[192:194], 'big', 0, 65535)
        try:
            self.adcs_refs_longitude = gen_eus.CONVERT_adcs_refs_longitude(self.adcs_refs_longitude)
        except:
            pass
        
        self.adcs_refs_altitude = getUnsigned(packet[194:198], 'big', 0, 4294967295)
        try:
            self.adcs_refs_altitude = gen_eus.CONVERT_adcs_refs_altitude(self.adcs_refs_altitude)
        except:
            pass
        
        self.adcs_refs_beta_angle = getSigned(packet[198:200], 'big', 0, 65535)
        try:
            self.adcs_refs_beta_angle = gen_eus.CONVERT_adcs_refs_beta_angle(self.adcs_refs_beta_angle)
        except:
            pass
        
        self.adcs_refs_orbit_method = getUnsigned(packet[200:201], 'big', 0, 255)
        try:
            self.adcs_refs_orbit_method = gen_states.CONVERT_adcs_refs_orbit_method(self.adcs_refs_orbit_method)
        except:
            pass
        
        self.adcs_refs_esm_valid = getUnsigned(packet[201:202], 'big', 0, 255)
        try:
            self.adcs_refs_esm_valid = gen_states.CONVERT_adcs_refs_esm_valid(self.adcs_refs_esm_valid)
        except:
            pass
        
        self.adcs_refs_sun_eclipse_moon_penumbra_flag = getUnsigned(packet[202:203], 'big', 0, 255)
        try:
            self.adcs_refs_sun_eclipse_moon_penumbra_flag = gen_states.CONVERT_adcs_refs_sun_eclipse_moon_penumbra_flag(self.adcs_refs_sun_eclipse_moon_penumbra_flag)
        except:
            pass
        
        self.adcs_refs_sun_eclipse_moon_umbra_flag = getUnsigned(packet[203:204], 'big', 0, 255)
        try:
            self.adcs_refs_sun_eclipse_moon_umbra_flag = gen_states.CONVERT_adcs_refs_sun_eclipse_moon_umbra_flag(self.adcs_refs_sun_eclipse_moon_umbra_flag)
        except:
            pass
        
        self.adcs_refs_sun_avoid_eclipse_flag = getUnsigned(packet[204:204], 'big', 7, 1)
        try:
            self.adcs_refs_sun_avoid_eclipse_flag = gen_states.CONVERT_adcs_refs_sun_avoid_eclipse_flag(self.adcs_refs_sun_avoid_eclipse_flag)
        except:
            pass
        
        self.adcs_refs_earth_umbra_flag = getUnsigned(packet[204:204], 'big', 6, 1)
        try:
            self.adcs_refs_earth_umbra_flag = gen_states.CONVERT_adcs_refs_earth_umbra_flag(self.adcs_refs_earth_umbra_flag)
        except:
            pass
        
        self.adcs_run_low_rate_task = getUnsigned(packet[204:204], 'big', 5, 1)
        try:
            self.adcs_run_low_rate_task = gen_states.CONVERT_adcs_run_low_rate_task(self.adcs_run_low_rate_task)
        except:
            pass
        
        self.adcs_refs_gps_auto_sync_enabled = getUnsigned(packet[204:204], 'big', 4, 1)
        try:
            self.adcs_refs_gps_auto_sync_enabled = gen_states.CONVERT_adcs_refs_gps_auto_sync_enabled(self.adcs_refs_gps_auto_sync_enabled)
        except:
            pass
        
        self.adcs_refs_gps_valid = getUnsigned(packet[204:204], 'big', 3, 1)
        try:
            self.adcs_refs_gps_valid = gen_states.CONVERT_adcs_refs_gps_valid(self.adcs_refs_gps_valid)
        except:
            pass
        
        self.adcs_refs_time_valid = getUnsigned(packet[204:204], 'big', 2, 1)
        try:
            self.adcs_refs_time_valid = gen_states.CONVERT_adcs_refs_time_valid(self.adcs_refs_time_valid)
        except:
            pass
        
        self.adcs_refs_refs_valid = getUnsigned(packet[204:204], 'big', 1, 1)
        try:
            self.adcs_refs_refs_valid = gen_states.CONVERT_adcs_refs_refs_valid(self.adcs_refs_refs_valid)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[204:205], 'big', 7, 255)
        
        self.adcs_refs_checksum = getUnsigned(packet[205:209], 'big', 7, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class ADCS_ATT_DET:
    def __str__(self):
        return 'ADCS_ATT_DET'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_adcs_att_det = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_adcs_att_det = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.adcs_att_det_q_body_wrt_eci_0 = getSigned(packet[6:10], 'big', 0, 4294967295)
        try:
            self.adcs_att_det_q_body_wrt_eci_0 = gen_eus.CONVERT_adcs_att_det_q_body_wrt_eci_0(self.adcs_att_det_q_body_wrt_eci_0)
        except:
            pass
        
        self.adcs_att_det_q_body_wrt_eci_1 = getSigned(packet[10:14], 'big', 0, 4294967295)
        try:
            self.adcs_att_det_q_body_wrt_eci_1 = gen_eus.CONVERT_adcs_att_det_q_body_wrt_eci_1(self.adcs_att_det_q_body_wrt_eci_1)
        except:
            pass
        
        self.adcs_att_det_q_body_wrt_eci_2 = getSigned(packet[14:18], 'big', 0, 4294967295)
        try:
            self.adcs_att_det_q_body_wrt_eci_2 = gen_eus.CONVERT_adcs_att_det_q_body_wrt_eci_2(self.adcs_att_det_q_body_wrt_eci_2)
        except:
            pass
        
        self.adcs_att_det_q_body_wrt_eci_3 = getSigned(packet[18:22], 'big', 0, 4294967295)
        try:
            self.adcs_att_det_q_body_wrt_eci_3 = gen_eus.CONVERT_adcs_att_det_q_body_wrt_eci_3(self.adcs_att_det_q_body_wrt_eci_3)
        except:
            pass
        
        self.adcs_att_det_residual_0 = getSigned(packet[22:26], 'big', 0, 4294967295)
        try:
            self.adcs_att_det_residual_0 = gen_eus.CONVERT_adcs_att_det_residual_0(self.adcs_att_det_residual_0)
        except:
            pass
        
        self.adcs_att_det_residual_1 = getSigned(packet[26:30], 'big', 0, 4294967295)
        try:
            self.adcs_att_det_residual_1 = gen_eus.CONVERT_adcs_att_det_residual_1(self.adcs_att_det_residual_1)
        except:
            pass
        
        self.adcs_att_det_residual_2 = getSigned(packet[30:34], 'big', 0, 4294967295)
        try:
            self.adcs_att_det_residual_2 = gen_eus.CONVERT_adcs_att_det_residual_2(self.adcs_att_det_residual_2)
        except:
            pass
        
        self.adcs_att_det_body_rate_0 = getSigned(packet[34:38], 'big', 0, 4294967295)
        try:
            self.adcs_att_det_body_rate_0 = gen_eus.CONVERT_adcs_att_det_body_rate_0(self.adcs_att_det_body_rate_0)
        except:
            pass
        
        self.adcs_att_det_body_rate_1 = getSigned(packet[38:42], 'big', 0, 4294967295)
        try:
            self.adcs_att_det_body_rate_1 = gen_eus.CONVERT_adcs_att_det_body_rate_1(self.adcs_att_det_body_rate_1)
        except:
            pass
        
        self.adcs_att_det_body_rate_2 = getSigned(packet[42:46], 'big', 0, 4294967295)
        try:
            self.adcs_att_det_body_rate_2 = gen_eus.CONVERT_adcs_att_det_body_rate_2(self.adcs_att_det_body_rate_2)
        except:
            pass
        
        self.adcs_att_det_gyro_bias_est_0 = getSigned(packet[46:48], 'big', 0, 65535)
        try:
            self.adcs_att_det_gyro_bias_est_0 = gen_eus.CONVERT_adcs_att_det_gyro_bias_est_0(self.adcs_att_det_gyro_bias_est_0)
        except:
            pass
        
        self.adcs_att_det_gyro_bias_est_1 = getSigned(packet[48:50], 'big', 0, 65535)
        try:
            self.adcs_att_det_gyro_bias_est_1 = gen_eus.CONVERT_adcs_att_det_gyro_bias_est_1(self.adcs_att_det_gyro_bias_est_1)
        except:
            pass
        
        self.adcs_att_det_gyro_bias_est_2 = getSigned(packet[50:52], 'big', 0, 65535)
        try:
            self.adcs_att_det_gyro_bias_est_2 = gen_eus.CONVERT_adcs_att_det_gyro_bias_est_2(self.adcs_att_det_gyro_bias_est_2)
        except:
            pass
        
        self.adcs_att_det_attitude_alg = getUnsigned(packet[52:53], 'big', 0, 255)
        try:
            self.adcs_att_det_attitude_alg = gen_states.CONVERT_adcs_att_det_attitude_alg(self.adcs_att_det_attitude_alg)
        except:
            pass
        
        self.adcs_att_det_good_att_rate_timer = getUnsigned(packet[53:57], 'big', 0, 4294967295)
        
        self.adcs_att_det_bad_att_timer = getUnsigned(packet[57:61], 'big', 0, 4294967295)
        
        self.adcs_att_det_bad_rate_timer = getUnsigned(packet[61:65], 'big', 0, 4294967295)
        
        self.adcs_att_det_reinit_count = getUnsigned(packet[65:69], 'big', 0, 4294967295)
        
        self.adcs_att_det_tracker_used = getUnsigned(packet[69:70], 'big', 0, 255)
        
        self.adcs_att_det_tracker_preference = getUnsigned(packet[70:71], 'big', 0, 255)
        
        self.adcs_att_det_attitude_valid = getUnsigned(packet[71:71], 'big', 7, 1)
        try:
            self.adcs_att_det_attitude_valid = gen_states.CONVERT_adcs_att_det_attitude_valid(self.adcs_att_det_attitude_valid)
        except:
            pass
        
        self.adcs_att_det_meas_att_valid = getUnsigned(packet[71:71], 'big', 6, 1)
        try:
            self.adcs_att_det_meas_att_valid = gen_states.CONVERT_adcs_att_det_meas_att_valid(self.adcs_att_det_meas_att_valid)
        except:
            pass
        
        self.adcs_att_det_meas_rate_valid = getUnsigned(packet[71:71], 'big', 5, 1)
        try:
            self.adcs_att_det_meas_rate_valid = gen_states.CONVERT_adcs_att_det_meas_rate_valid(self.adcs_att_det_meas_rate_valid)
        except:
            pass
        
        self.adcs_att_det_imu_data_valid = getUnsigned(packet[71:71], 'big', 4, 1)
        try:
            self.adcs_att_det_imu_data_valid = gen_states.CONVERT_adcs_att_det_imu_data_valid(self.adcs_att_det_imu_data_valid)
        except:
            pass
        
        self.adcs_att_det_tracker_1data_valid = getUnsigned(packet[71:71], 'big', 3, 1)
        try:
            self.adcs_att_det_tracker_1data_valid = gen_states.CONVERT_adcs_att_det_tracker_1data_valid(self.adcs_att_det_tracker_1data_valid)
        except:
            pass
        
        self.adcs_att_det_tracker_2data_valid = getUnsigned(packet[71:71], 'big', 2, 1)
        try:
            self.adcs_att_det_tracker_2data_valid = gen_states.CONVERT_adcs_att_det_tracker_2data_valid(self.adcs_att_det_tracker_2data_valid)
        except:
            pass
        
        self.adcs_att_det_spare = getUnsigned(packet[71:71], 'big', 1, 1)
        
        self.adcs_att_det_tracker_sol_mixed = getUnsigned(packet[71:71], 'big', 0, 1)
        try:
            self.adcs_att_det_tracker_sol_mixed = gen_states.CONVERT_adcs_att_det_tracker_sol_mixed(self.adcs_att_det_tracker_sol_mixed)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[72:73], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[73:74], 'big', 0, 255)
        
        self.adcs_att_det_checksum = getUnsigned(packet[74:78], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class ADCS_ATT_CMD:
    def __str__(self):
        return 'ADCS_ATT_CMD'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_adcs_att_cmd = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_adcs_att_cmd = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.adcs_att_cmd_cmd_q_body_wrt_eci_0 = getSigned(packet[6:10], 'big', 0, 4294967295)
        try:
            self.adcs_att_cmd_cmd_q_body_wrt_eci_0 = gen_eus.CONVERT_adcs_att_cmd_cmd_q_body_wrt_eci_0(self.adcs_att_cmd_cmd_q_body_wrt_eci_0)
        except:
            pass
        
        self.adcs_att_cmd_cmd_q_body_wrt_eci_1 = getSigned(packet[10:14], 'big', 0, 4294967295)
        try:
            self.adcs_att_cmd_cmd_q_body_wrt_eci_1 = gen_eus.CONVERT_adcs_att_cmd_cmd_q_body_wrt_eci_1(self.adcs_att_cmd_cmd_q_body_wrt_eci_1)
        except:
            pass
        
        self.adcs_att_cmd_cmd_q_body_wrt_eci_2 = getSigned(packet[14:18], 'big', 0, 4294967295)
        try:
            self.adcs_att_cmd_cmd_q_body_wrt_eci_2 = gen_eus.CONVERT_adcs_att_cmd_cmd_q_body_wrt_eci_2(self.adcs_att_cmd_cmd_q_body_wrt_eci_2)
        except:
            pass
        
        self.adcs_att_cmd_cmd_q_body_wrt_eci_3 = getSigned(packet[18:22], 'big', 0, 4294967295)
        try:
            self.adcs_att_cmd_cmd_q_body_wrt_eci_3 = gen_eus.CONVERT_adcs_att_cmd_cmd_q_body_wrt_eci_3(self.adcs_att_cmd_cmd_q_body_wrt_eci_3)
        except:
            pass
        
        self.adcs_att_cmd_pri_ref_dir = getUnsigned(packet[22:23], 'big', 0, 255)
        try:
            self.adcs_att_cmd_pri_ref_dir = gen_states.CONVERT_adcs_att_cmd_pri_ref_dir(self.adcs_att_cmd_pri_ref_dir)
        except:
            pass
        
        self.adcs_att_cmd_sec_ref_dir = getUnsigned(packet[23:24], 'big', 0, 255)
        try:
            self.adcs_att_cmd_sec_ref_dir = gen_states.CONVERT_adcs_att_cmd_sec_ref_dir(self.adcs_att_cmd_sec_ref_dir)
        except:
            pass
        
        self.adcs_att_cmd_cmd_target_0 = getUnsigned(packet[24:28], 'big', 0, 4294967295)
        try:
            self.adcs_att_cmd_cmd_target_0 = gen_eus.CONVERT_adcs_att_cmd_cmd_target_0(self.adcs_att_cmd_cmd_target_0)
        except:
            pass
        
        self.adcs_att_cmd_cmd_target_1 = getUnsigned(packet[28:32], 'big', 0, 4294967295)
        try:
            self.adcs_att_cmd_cmd_target_1 = gen_eus.CONVERT_adcs_att_cmd_cmd_target_1(self.adcs_att_cmd_cmd_target_1)
        except:
            pass
        
        self.adcs_att_cmd_cmd_target_2 = getUnsigned(packet[32:36], 'big', 0, 4294967295)
        try:
            self.adcs_att_cmd_cmd_target_2 = gen_eus.CONVERT_adcs_att_cmd_cmd_target_2(self.adcs_att_cmd_cmd_target_2)
        except:
            pass
        
        self.adcs_att_cmd_pri_cmd_vec_body_0 = getSigned(packet[36:38], 'big', 0, 65535)
        try:
            self.adcs_att_cmd_pri_cmd_vec_body_0 = gen_eus.CONVERT_adcs_att_cmd_pri_cmd_vec_body_0(self.adcs_att_cmd_pri_cmd_vec_body_0)
        except:
            pass
        
        self.adcs_att_cmd_pri_cmd_vec_body_1 = getSigned(packet[38:40], 'big', 0, 65535)
        try:
            self.adcs_att_cmd_pri_cmd_vec_body_1 = gen_eus.CONVERT_adcs_att_cmd_pri_cmd_vec_body_1(self.adcs_att_cmd_pri_cmd_vec_body_1)
        except:
            pass
        
        self.adcs_att_cmd_pri_cmd_vec_body_2 = getSigned(packet[40:42], 'big', 0, 65535)
        try:
            self.adcs_att_cmd_pri_cmd_vec_body_2 = gen_eus.CONVERT_adcs_att_cmd_pri_cmd_vec_body_2(self.adcs_att_cmd_pri_cmd_vec_body_2)
        except:
            pass
        
        self.adcs_att_cmd_sec_cmd_vec_body_0 = getSigned(packet[42:44], 'big', 0, 65535)
        try:
            self.adcs_att_cmd_sec_cmd_vec_body_0 = gen_eus.CONVERT_adcs_att_cmd_sec_cmd_vec_body_0(self.adcs_att_cmd_sec_cmd_vec_body_0)
        except:
            pass
        
        self.adcs_att_cmd_sec_cmd_vec_body_1 = getSigned(packet[44:46], 'big', 0, 65535)
        try:
            self.adcs_att_cmd_sec_cmd_vec_body_1 = gen_eus.CONVERT_adcs_att_cmd_sec_cmd_vec_body_1(self.adcs_att_cmd_sec_cmd_vec_body_1)
        except:
            pass
        
        self.adcs_att_cmd_sec_cmd_vec_body_2 = getSigned(packet[46:48], 'big', 0, 65535)
        try:
            self.adcs_att_cmd_sec_cmd_vec_body_2 = gen_eus.CONVERT_adcs_att_cmd_sec_cmd_vec_body_2(self.adcs_att_cmd_sec_cmd_vec_body_2)
        except:
            pass
        
        self.adcs_att_cmd_q_target_wrt_ref0_0 = getSigned(packet[48:50], 'big', 0, 65535)
        try:
            self.adcs_att_cmd_q_target_wrt_ref0_0 = gen_eus.CONVERT_adcs_att_cmd_q_target_wrt_ref0_0(self.adcs_att_cmd_q_target_wrt_ref0_0)
        except:
            pass
        
        self.adcs_att_cmd_q_target_wrt_ref0_1 = getSigned(packet[50:52], 'big', 0, 65535)
        try:
            self.adcs_att_cmd_q_target_wrt_ref0_1 = gen_eus.CONVERT_adcs_att_cmd_q_target_wrt_ref0_1(self.adcs_att_cmd_q_target_wrt_ref0_1)
        except:
            pass
        
        self.adcs_att_cmd_q_target_wrt_ref0_2 = getSigned(packet[52:54], 'big', 0, 65535)
        try:
            self.adcs_att_cmd_q_target_wrt_ref0_2 = gen_eus.CONVERT_adcs_att_cmd_q_target_wrt_ref0_2(self.adcs_att_cmd_q_target_wrt_ref0_2)
        except:
            pass
        
        self.adcs_att_cmd_q_target_wrt_ref0_3 = getSigned(packet[54:56], 'big', 0, 65535)
        try:
            self.adcs_att_cmd_q_target_wrt_ref0_3 = gen_eus.CONVERT_adcs_att_cmd_q_target_wrt_ref0_3(self.adcs_att_cmd_q_target_wrt_ref0_3)
        except:
            pass
        
        self.adcs_att_cmd_cmd_body_rate_0 = getSigned(packet[56:60], 'big', 0, 4294967295)
        try:
            self.adcs_att_cmd_cmd_body_rate_0 = gen_eus.CONVERT_adcs_att_cmd_cmd_body_rate_0(self.adcs_att_cmd_cmd_body_rate_0)
        except:
            pass
        
        self.adcs_att_cmd_cmd_body_rate_1 = getSigned(packet[60:64], 'big', 0, 4294967295)
        try:
            self.adcs_att_cmd_cmd_body_rate_1 = gen_eus.CONVERT_adcs_att_cmd_cmd_body_rate_1(self.adcs_att_cmd_cmd_body_rate_1)
        except:
            pass
        
        self.adcs_att_cmd_cmd_body_rate_2 = getSigned(packet[64:68], 'big', 0, 4294967295)
        try:
            self.adcs_att_cmd_cmd_body_rate_2 = gen_eus.CONVERT_adcs_att_cmd_cmd_body_rate_2(self.adcs_att_cmd_cmd_body_rate_2)
        except:
            pass
        
        self.adcs_att_cmd_cmd_body_accel_0 = getSigned(packet[68:72], 'big', 0, 4294967295)
        try:
            self.adcs_att_cmd_cmd_body_accel_0 = gen_eus.CONVERT_adcs_att_cmd_cmd_body_accel_0(self.adcs_att_cmd_cmd_body_accel_0)
        except:
            pass
        
        self.adcs_att_cmd_cmd_body_accel_1 = getSigned(packet[72:76], 'big', 0, 4294967295)
        try:
            self.adcs_att_cmd_cmd_body_accel_1 = gen_eus.CONVERT_adcs_att_cmd_cmd_body_accel_1(self.adcs_att_cmd_cmd_body_accel_1)
        except:
            pass
        
        self.adcs_att_cmd_cmd_body_accel_2 = getSigned(packet[76:80], 'big', 0, 4294967295)
        try:
            self.adcs_att_cmd_cmd_body_accel_2 = gen_eus.CONVERT_adcs_att_cmd_cmd_body_accel_2(self.adcs_att_cmd_cmd_body_accel_2)
        except:
            pass
        
        self.adcs_att_cmd_commanded_sun_0 = getSigned(packet[80:82], 'big', 0, 65535)
        try:
            self.adcs_att_cmd_commanded_sun_0 = gen_eus.CONVERT_adcs_att_cmd_commanded_sun_0(self.adcs_att_cmd_commanded_sun_0)
        except:
            pass
        
        self.adcs_att_cmd_commanded_sun_1 = getSigned(packet[82:84], 'big', 0, 65535)
        try:
            self.adcs_att_cmd_commanded_sun_1 = gen_eus.CONVERT_adcs_att_cmd_commanded_sun_1(self.adcs_att_cmd_commanded_sun_1)
        except:
            pass
        
        self.adcs_att_cmd_commanded_sun_2 = getSigned(packet[84:86], 'big', 0, 65535)
        try:
            self.adcs_att_cmd_commanded_sun_2 = gen_eus.CONVERT_adcs_att_cmd_commanded_sun_2(self.adcs_att_cmd_commanded_sun_2)
        except:
            pass
        
        self.adcs_att_cmd_hrcycle_safe_mode = getUnsigned(packet[86:90], 'big', 0, 4294967295)
        
        self.adcs_att_cmd_rotisserie_rate = getSigned(packet[90:92], 'big', 0, 65535)
        try:
            self.adcs_att_cmd_rotisserie_rate = gen_eus.CONVERT_adcs_att_cmd_rotisserie_rate(self.adcs_att_cmd_rotisserie_rate)
        except:
            pass
        
        self.adcs_att_cmd_spare2 = getUnsigned(packet[92:92], 'big', 7, 1)
        
        self.adcs_att_cmd_sun_point_reason = getUnsigned(packet[92:92], 'big', 4, 7)
        try:
            self.adcs_att_cmd_sun_point_reason = gen_states.CONVERT_adcs_att_cmd_sun_point_reason(self.adcs_att_cmd_sun_point_reason)
        except:
            pass
        
        self.adcs_att_cmd_recommended_sun_point = getUnsigned(packet[92:92], 'big', 3, 1)
        try:
            self.adcs_att_cmd_recommended_sun_point = gen_states.CONVERT_adcs_att_cmd_recommended_sun_point(self.adcs_att_cmd_recommended_sun_point)
        except:
            pass
        
        self.adcs_att_cmd_spare1 = getUnsigned(packet[92:92], 'big', 2, 1)
        
        self.adcs_att_cmd_spare0 = getUnsigned(packet[92:92], 'big', 1, 1)
        
        self.adcs_att_cmd_adcs_mode = getUnsigned(packet[92:92], 'big', 0, 1)
        try:
            self.adcs_att_cmd_adcs_mode = gen_states.CONVERT_adcs_att_cmd_adcs_mode(self.adcs_att_cmd_adcs_mode)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[93:94], 'big', 0, 255)
        
        self.adcs_att_cmd_checksum = getUnsigned(packet[94:98], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class ADCS_RW_DRIVE:
    def __str__(self):
        return 'ADCS_RW_DRIVE'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_adcs_rw_drive = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_adcs_rw_drive = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.adcs_rw_drive_theta_err_0 = getSigned(packet[6:8], 'big', 0, 65535)
        try:
            self.adcs_rw_drive_theta_err_0 = gen_eus.CONVERT_adcs_rw_drive_theta_err_0(self.adcs_rw_drive_theta_err_0)
        except:
            pass
        
        self.adcs_rw_drive_theta_err_1 = getSigned(packet[8:10], 'big', 0, 65535)
        try:
            self.adcs_rw_drive_theta_err_1 = gen_eus.CONVERT_adcs_rw_drive_theta_err_1(self.adcs_rw_drive_theta_err_1)
        except:
            pass
        
        self.adcs_rw_drive_theta_err_2 = getSigned(packet[10:12], 'big', 0, 65535)
        try:
            self.adcs_rw_drive_theta_err_2 = gen_eus.CONVERT_adcs_rw_drive_theta_err_2(self.adcs_rw_drive_theta_err_2)
        except:
            pass
        
        self.adcs_rw_drive_theta_err_3 = getSigned(packet[12:14], 'big', 0, 65535)
        try:
            self.adcs_rw_drive_theta_err_3 = gen_eus.CONVERT_adcs_rw_drive_theta_err_3(self.adcs_rw_drive_theta_err_3)
        except:
            pass
        
        self.adcs_rw_drive_drag_est_0 = getSigned(packet[14:16], 'big', 0, 65535)
        try:
            self.adcs_rw_drive_drag_est_0 = gen_eus.CONVERT_adcs_rw_drive_drag_est_0(self.adcs_rw_drive_drag_est_0)
        except:
            pass
        
        self.adcs_rw_drive_drag_est_1 = getSigned(packet[16:18], 'big', 0, 65535)
        try:
            self.adcs_rw_drive_drag_est_1 = gen_eus.CONVERT_adcs_rw_drive_drag_est_1(self.adcs_rw_drive_drag_est_1)
        except:
            pass
        
        self.adcs_rw_drive_drag_est_2 = getSigned(packet[18:20], 'big', 0, 65535)
        try:
            self.adcs_rw_drive_drag_est_2 = gen_eus.CONVERT_adcs_rw_drive_drag_est_2(self.adcs_rw_drive_drag_est_2)
        except:
            pass
        
        self.adcs_rw_drive_drag_est_3 = getSigned(packet[20:22], 'big', 0, 65535)
        try:
            self.adcs_rw_drive_drag_est_3 = gen_eus.CONVERT_adcs_rw_drive_drag_est_3(self.adcs_rw_drive_drag_est_3)
        except:
            pass
        
        self.adcs_rw_drive_obs_angle_residual_0 = getSigned(packet[22:24], 'big', 0, 65535)
        try:
            self.adcs_rw_drive_obs_angle_residual_0 = gen_eus.CONVERT_adcs_rw_drive_obs_angle_residual_0(self.adcs_rw_drive_obs_angle_residual_0)
        except:
            pass
        
        self.adcs_rw_drive_obs_angle_residual_1 = getSigned(packet[24:26], 'big', 0, 65535)
        try:
            self.adcs_rw_drive_obs_angle_residual_1 = gen_eus.CONVERT_adcs_rw_drive_obs_angle_residual_1(self.adcs_rw_drive_obs_angle_residual_1)
        except:
            pass
        
        self.adcs_rw_drive_obs_angle_residual_2 = getSigned(packet[26:28], 'big', 0, 65535)
        try:
            self.adcs_rw_drive_obs_angle_residual_2 = gen_eus.CONVERT_adcs_rw_drive_obs_angle_residual_2(self.adcs_rw_drive_obs_angle_residual_2)
        except:
            pass
        
        self.adcs_rw_drive_obs_angle_residual_3 = getSigned(packet[28:30], 'big', 0, 65535)
        try:
            self.adcs_rw_drive_obs_angle_residual_3 = gen_eus.CONVERT_adcs_rw_drive_obs_angle_residual_3(self.adcs_rw_drive_obs_angle_residual_3)
        except:
            pass
        
        self.adcs_rw_drive_filtered_speed_rpm_0 = getSigned(packet[30:34], 'big', 0, 4294967295)
        try:
            self.adcs_rw_drive_filtered_speed_rpm_0 = gen_eus.CONVERT_adcs_rw_drive_filtered_speed_rpm_0(self.adcs_rw_drive_filtered_speed_rpm_0)
        except:
            pass
        
        self.adcs_rw_drive_filtered_speed_rpm_1 = getSigned(packet[34:38], 'big', 0, 4294967295)
        try:
            self.adcs_rw_drive_filtered_speed_rpm_1 = gen_eus.CONVERT_adcs_rw_drive_filtered_speed_rpm_1(self.adcs_rw_drive_filtered_speed_rpm_1)
        except:
            pass
        
        self.adcs_rw_drive_filtered_speed_rpm_2 = getSigned(packet[38:42], 'big', 0, 4294967295)
        try:
            self.adcs_rw_drive_filtered_speed_rpm_2 = gen_eus.CONVERT_adcs_rw_drive_filtered_speed_rpm_2(self.adcs_rw_drive_filtered_speed_rpm_2)
        except:
            pass
        
        self.adcs_rw_drive_filtered_speed_rpm_3 = getSigned(packet[42:46], 'big', 0, 4294967295)
        try:
            self.adcs_rw_drive_filtered_speed_rpm_3 = gen_eus.CONVERT_adcs_rw_drive_filtered_speed_rpm_3(self.adcs_rw_drive_filtered_speed_rpm_3)
        except:
            pass
        
        self.adcs_rw_drive_speed_cmd_rpm_0 = getSigned(packet[46:48], 'big', 0, 65535)
        try:
            self.adcs_rw_drive_speed_cmd_rpm_0 = gen_eus.CONVERT_adcs_rw_drive_speed_cmd_rpm_0(self.adcs_rw_drive_speed_cmd_rpm_0)
        except:
            pass
        
        self.adcs_rw_drive_speed_cmd_rpm_1 = getSigned(packet[48:50], 'big', 0, 65535)
        try:
            self.adcs_rw_drive_speed_cmd_rpm_1 = gen_eus.CONVERT_adcs_rw_drive_speed_cmd_rpm_1(self.adcs_rw_drive_speed_cmd_rpm_1)
        except:
            pass
        
        self.adcs_rw_drive_speed_cmd_rpm_2 = getSigned(packet[50:52], 'big', 0, 65535)
        try:
            self.adcs_rw_drive_speed_cmd_rpm_2 = gen_eus.CONVERT_adcs_rw_drive_speed_cmd_rpm_2(self.adcs_rw_drive_speed_cmd_rpm_2)
        except:
            pass
        
        self.adcs_rw_drive_speed_cmd_rpm_3 = getSigned(packet[52:54], 'big', 0, 65535)
        try:
            self.adcs_rw_drive_speed_cmd_rpm_3 = gen_eus.CONVERT_adcs_rw_drive_speed_cmd_rpm_3(self.adcs_rw_drive_speed_cmd_rpm_3)
        except:
            pass
        
        self.adcs_rw_drive_torque_command_0 = getSigned(packet[54:58], 'big', 0, 4294967295)
        try:
            self.adcs_rw_drive_torque_command_0 = gen_eus.CONVERT_adcs_rw_drive_torque_command_0(self.adcs_rw_drive_torque_command_0)
        except:
            pass
        
        self.adcs_rw_drive_torque_command_1 = getSigned(packet[58:62], 'big', 0, 4294967295)
        try:
            self.adcs_rw_drive_torque_command_1 = gen_eus.CONVERT_adcs_rw_drive_torque_command_1(self.adcs_rw_drive_torque_command_1)
        except:
            pass
        
        self.adcs_rw_drive_torque_command_2 = getSigned(packet[62:66], 'big', 0, 4294967295)
        try:
            self.adcs_rw_drive_torque_command_2 = gen_eus.CONVERT_adcs_rw_drive_torque_command_2(self.adcs_rw_drive_torque_command_2)
        except:
            pass
        
        self.adcs_rw_drive_torque_command_3 = getSigned(packet[66:70], 'big', 0, 4294967295)
        try:
            self.adcs_rw_drive_torque_command_3 = gen_eus.CONVERT_adcs_rw_drive_torque_command_3(self.adcs_rw_drive_torque_command_3)
        except:
            pass
        
        self.adcs_rw_drive_meas_wheel_current_0 = getSigned(packet[70:72], 'big', 0, 65535)
        try:
            self.adcs_rw_drive_meas_wheel_current_0 = gen_eus.CONVERT_adcs_rw_drive_meas_wheel_current_0(self.adcs_rw_drive_meas_wheel_current_0)
        except:
            pass
        
        self.adcs_rw_drive_meas_wheel_current_1 = getSigned(packet[72:74], 'big', 0, 65535)
        try:
            self.adcs_rw_drive_meas_wheel_current_1 = gen_eus.CONVERT_adcs_rw_drive_meas_wheel_current_1(self.adcs_rw_drive_meas_wheel_current_1)
        except:
            pass
        
        self.adcs_rw_drive_meas_wheel_current_2 = getSigned(packet[74:76], 'big', 0, 65535)
        try:
            self.adcs_rw_drive_meas_wheel_current_2 = gen_eus.CONVERT_adcs_rw_drive_meas_wheel_current_2(self.adcs_rw_drive_meas_wheel_current_2)
        except:
            pass
        
        self.adcs_rw_drive_meas_wheel_current_3 = getSigned(packet[76:78], 'big', 0, 65535)
        try:
            self.adcs_rw_drive_meas_wheel_current_3 = gen_eus.CONVERT_adcs_rw_drive_meas_wheel_current_3(self.adcs_rw_drive_meas_wheel_current_3)
        except:
            pass
        
        self.adcs_rw_drive_rw_time = getUnsigned(packet[78:82], 'big', 0, 4294967295)
        
        self.adcs_rw_drive_pwm_counts_0 = getUnsigned(packet[82:86], 'big', 0, 4294967295)
        
        self.adcs_rw_drive_pwm_counts_1 = getUnsigned(packet[86:90], 'big', 0, 4294967295)
        
        self.adcs_rw_drive_pwm_counts_2 = getUnsigned(packet[90:94], 'big', 0, 4294967295)
        
        self.adcs_rw_drive_pwm_counts_3 = getUnsigned(packet[94:98], 'big', 0, 4294967295)
        
        self.adcs_rw_drive_pwmcmd_ct_0 = getUnsigned(packet[98:102], 'big', 0, 4294967295)
        
        self.adcs_rw_drive_pwmcmd_ct_1 = getUnsigned(packet[102:106], 'big', 0, 4294967295)
        
        self.adcs_rw_drive_pwmcmd_ct_2 = getUnsigned(packet[106:110], 'big', 0, 4294967295)
        
        self.adcs_rw_drive_pwmcmd_ct_3 = getUnsigned(packet[110:114], 'big', 0, 4294967295)
        
        self.adcs_rw_drive_motor_tach_counts_0 = getUnsigned(packet[114:116], 'big', 0, 65535)
        
        self.adcs_rw_drive_motor_tach_counts_1 = getUnsigned(packet[116:118], 'big', 0, 65535)
        
        self.adcs_rw_drive_motor_tach_counts_2 = getUnsigned(packet[118:120], 'big', 0, 65535)
        
        self.adcs_rw_drive_motor_tach_counts_3 = getUnsigned(packet[120:122], 'big', 0, 65535)
        
        self.adcs_rw_drive_operating_mode_0 = getUnsigned(packet[122:123], 'big', 0, 255)
        try:
            self.adcs_rw_drive_operating_mode_0 = gen_states.CONVERT_adcs_rw_drive_operating_mode_0(self.adcs_rw_drive_operating_mode_0)
        except:
            pass
        
        self.adcs_rw_drive_operating_mode_1 = getUnsigned(packet[123:124], 'big', 0, 255)
        try:
            self.adcs_rw_drive_operating_mode_1 = gen_states.CONVERT_adcs_rw_drive_operating_mode_1(self.adcs_rw_drive_operating_mode_1)
        except:
            pass
        
        self.adcs_rw_drive_operating_mode_2 = getUnsigned(packet[124:125], 'big', 0, 255)
        try:
            self.adcs_rw_drive_operating_mode_2 = gen_states.CONVERT_adcs_rw_drive_operating_mode_2(self.adcs_rw_drive_operating_mode_2)
        except:
            pass
        
        self.adcs_rw_drive_operating_mode_3 = getUnsigned(packet[125:126], 'big', 0, 255)
        try:
            self.adcs_rw_drive_operating_mode_3 = gen_states.CONVERT_adcs_rw_drive_operating_mode_3(self.adcs_rw_drive_operating_mode_3)
        except:
            pass
        
        self.adcs_rw_drive_control_mode_0 = getUnsigned(packet[126:127], 'big', 0, 255)
        try:
            self.adcs_rw_drive_control_mode_0 = gen_states.CONVERT_adcs_rw_drive_control_mode_0(self.adcs_rw_drive_control_mode_0)
        except:
            pass
        
        self.adcs_rw_drive_control_mode_1 = getUnsigned(packet[127:128], 'big', 0, 255)
        try:
            self.adcs_rw_drive_control_mode_1 = gen_states.CONVERT_adcs_rw_drive_control_mode_1(self.adcs_rw_drive_control_mode_1)
        except:
            pass
        
        self.adcs_rw_drive_control_mode_2 = getUnsigned(packet[128:129], 'big', 0, 255)
        try:
            self.adcs_rw_drive_control_mode_2 = gen_states.CONVERT_adcs_rw_drive_control_mode_2(self.adcs_rw_drive_control_mode_2)
        except:
            pass
        
        self.adcs_rw_drive_control_mode_3 = getUnsigned(packet[129:130], 'big', 0, 255)
        try:
            self.adcs_rw_drive_control_mode_3 = gen_states.CONVERT_adcs_rw_drive_control_mode_3(self.adcs_rw_drive_control_mode_3)
        except:
            pass
        
        self.adcs_rw_drive_motor_fault_count_0 = getUnsigned(packet[130:131], 'big', 0, 255)
        
        self.adcs_rw_drive_motor_fault_count_1 = getUnsigned(packet[131:132], 'big', 0, 255)
        
        self.adcs_rw_drive_motor_fault_count_2 = getUnsigned(packet[132:133], 'big', 0, 255)
        
        self.adcs_rw_drive_motor_fault_count_3 = getUnsigned(packet[133:134], 'big', 0, 255)
        
        self.adcs_rw_drive_motor_hall_state_0 = getUnsigned(packet[134:135], 'big', 0, 255)
        
        self.adcs_rw_drive_motor_hall_state_1 = getUnsigned(packet[135:136], 'big', 0, 255)
        
        self.adcs_rw_drive_motor_hall_state_2 = getUnsigned(packet[136:137], 'big', 0, 255)
        
        self.adcs_rw_drive_motor_hall_state_3 = getUnsigned(packet[137:138], 'big', 0, 255)
        
        self.adcs_rw_drive_pwmenable_0 = getUnsigned(packet[138:139], 'big', 0, 255)
        try:
            self.adcs_rw_drive_pwmenable_0 = gen_states.CONVERT_adcs_rw_drive_pwmenable_0(self.adcs_rw_drive_pwmenable_0)
        except:
            pass
        
        self.adcs_rw_drive_pwmenable_1 = getUnsigned(packet[139:140], 'big', 0, 255)
        try:
            self.adcs_rw_drive_pwmenable_1 = gen_states.CONVERT_adcs_rw_drive_pwmenable_1(self.adcs_rw_drive_pwmenable_1)
        except:
            pass
        
        self.adcs_rw_drive_pwmenable_2 = getUnsigned(packet[140:141], 'big', 0, 255)
        try:
            self.adcs_rw_drive_pwmenable_2 = gen_states.CONVERT_adcs_rw_drive_pwmenable_2(self.adcs_rw_drive_pwmenable_2)
        except:
            pass
        
        self.adcs_rw_drive_pwmenable_3 = getUnsigned(packet[141:142], 'big', 0, 255)
        try:
            self.adcs_rw_drive_pwmenable_3 = gen_states.CONVERT_adcs_rw_drive_pwmenable_3(self.adcs_rw_drive_pwmenable_3)
        except:
            pass
        
        self.adcs_rw_drive_pwmdirection_0 = getUnsigned(packet[142:143], 'big', 0, 255)
        try:
            self.adcs_rw_drive_pwmdirection_0 = gen_states.CONVERT_adcs_rw_drive_pwmdirection_0(self.adcs_rw_drive_pwmdirection_0)
        except:
            pass
        
        self.adcs_rw_drive_pwmdirection_1 = getUnsigned(packet[143:144], 'big', 0, 255)
        try:
            self.adcs_rw_drive_pwmdirection_1 = gen_states.CONVERT_adcs_rw_drive_pwmdirection_1(self.adcs_rw_drive_pwmdirection_1)
        except:
            pass
        
        self.adcs_rw_drive_pwmdirection_2 = getUnsigned(packet[144:145], 'big', 0, 255)
        try:
            self.adcs_rw_drive_pwmdirection_2 = gen_states.CONVERT_adcs_rw_drive_pwmdirection_2(self.adcs_rw_drive_pwmdirection_2)
        except:
            pass
        
        self.adcs_rw_drive_pwmdirection_3 = getUnsigned(packet[145:146], 'big', 0, 255)
        try:
            self.adcs_rw_drive_pwmdirection_3 = gen_states.CONVERT_adcs_rw_drive_pwmdirection_3(self.adcs_rw_drive_pwmdirection_3)
        except:
            pass
        
        self.adcs_rw_drive_pwmcmd_dir_0 = getUnsigned(packet[146:147], 'big', 0, 255)
        try:
            self.adcs_rw_drive_pwmcmd_dir_0 = gen_states.CONVERT_adcs_rw_drive_pwmcmd_dir_0(self.adcs_rw_drive_pwmcmd_dir_0)
        except:
            pass
        
        self.adcs_rw_drive_pwmcmd_dir_1 = getUnsigned(packet[147:148], 'big', 0, 255)
        try:
            self.adcs_rw_drive_pwmcmd_dir_1 = gen_states.CONVERT_adcs_rw_drive_pwmcmd_dir_1(self.adcs_rw_drive_pwmcmd_dir_1)
        except:
            pass
        
        self.adcs_rw_drive_pwmcmd_dir_2 = getUnsigned(packet[148:149], 'big', 0, 255)
        try:
            self.adcs_rw_drive_pwmcmd_dir_2 = gen_states.CONVERT_adcs_rw_drive_pwmcmd_dir_2(self.adcs_rw_drive_pwmcmd_dir_2)
        except:
            pass
        
        self.adcs_rw_drive_pwmcmd_dir_3 = getUnsigned(packet[149:150], 'big', 0, 255)
        try:
            self.adcs_rw_drive_pwmcmd_dir_3 = gen_states.CONVERT_adcs_rw_drive_pwmcmd_dir_3(self.adcs_rw_drive_pwmcmd_dir_3)
        except:
            pass
        
        self.adcs_rw_drive_rw_test_mode = getUnsigned(packet[150:151], 'big', 0, 255)
        try:
            self.adcs_rw_drive_rw_test_mode = gen_states.CONVERT_adcs_rw_drive_rw_test_mode(self.adcs_rw_drive_rw_test_mode)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[151:152], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[152:153], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[153:154], 'big', 0, 255)
        
        self.adcs_rw_drive_checksum = getUnsigned(packet[154:158], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class ADCS_TRACKER:
    def __str__(self):
        return 'ADCS_TRACKER'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_adcs_tracker = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_adcs_tracker = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.adcs_tracker_attitude_st_0 = getSigned(packet[6:10], 'big', 0, 4294967295)
        try:
            self.adcs_tracker_attitude_st_0 = gen_eus.CONVERT_adcs_tracker_attitude_st_0(self.adcs_tracker_attitude_st_0)
        except:
            pass
        
        self.adcs_tracker_attitude_st_1 = getSigned(packet[10:14], 'big', 0, 4294967295)
        try:
            self.adcs_tracker_attitude_st_1 = gen_eus.CONVERT_adcs_tracker_attitude_st_1(self.adcs_tracker_attitude_st_1)
        except:
            pass
        
        self.adcs_tracker_attitude_st_2 = getSigned(packet[14:18], 'big', 0, 4294967295)
        try:
            self.adcs_tracker_attitude_st_2 = gen_eus.CONVERT_adcs_tracker_attitude_st_2(self.adcs_tracker_attitude_st_2)
        except:
            pass
        
        self.adcs_tracker_attitude_st_3 = getSigned(packet[18:22], 'big', 0, 4294967295)
        try:
            self.adcs_tracker_attitude_st_3 = gen_eus.CONVERT_adcs_tracker_attitude_st_3(self.adcs_tracker_attitude_st_3)
        except:
            pass
        
        self.adcs_tracker_rate_est_0 = getSigned(packet[22:24], 'big', 0, 65535)
        try:
            self.adcs_tracker_rate_est_0 = gen_eus.CONVERT_adcs_tracker_rate_est_0(self.adcs_tracker_rate_est_0)
        except:
            pass
        
        self.adcs_tracker_rate_est_1 = getSigned(packet[24:26], 'big', 0, 65535)
        try:
            self.adcs_tracker_rate_est_1 = gen_eus.CONVERT_adcs_tracker_rate_est_1(self.adcs_tracker_rate_est_1)
        except:
            pass
        
        self.adcs_tracker_rate_est_2 = getSigned(packet[26:28], 'big', 0, 65535)
        try:
            self.adcs_tracker_rate_est_2 = gen_eus.CONVERT_adcs_tracker_rate_est_2(self.adcs_tracker_rate_est_2)
        except:
            pass
        
        self.adcs_tracker_right_asc = getUnsigned(packet[28:30], 'big', 0, 65535)
        try:
            self.adcs_tracker_right_asc = gen_eus.CONVERT_adcs_tracker_right_asc(self.adcs_tracker_right_asc)
        except:
            pass
        
        self.adcs_tracker_declination = getSigned(packet[30:32], 'big', 0, 65535)
        try:
            self.adcs_tracker_declination = gen_eus.CONVERT_adcs_tracker_declination(self.adcs_tracker_declination)
        except:
            pass
        
        self.adcs_tracker_roll = getSigned(packet[32:34], 'big', 0, 65535)
        try:
            self.adcs_tracker_roll = gen_eus.CONVERT_adcs_tracker_roll(self.adcs_tracker_roll)
        except:
            pass
        
        self.adcs_tracker_att_covariance_0 = getSigned(packet[34:38], 'big', 0, 4294967295)
        try:
            self.adcs_tracker_att_covariance_0 = gen_eus.CONVERT_adcs_tracker_att_covariance_0(self.adcs_tracker_att_covariance_0)
        except:
            pass
        
        self.adcs_tracker_att_covariance_1 = getSigned(packet[38:42], 'big', 0, 4294967295)
        try:
            self.adcs_tracker_att_covariance_1 = gen_eus.CONVERT_adcs_tracker_att_covariance_1(self.adcs_tracker_att_covariance_1)
        except:
            pass
        
        self.adcs_tracker_att_covariance_2 = getSigned(packet[42:46], 'big', 0, 4294967295)
        try:
            self.adcs_tracker_att_covariance_2 = gen_eus.CONVERT_adcs_tracker_att_covariance_2(self.adcs_tracker_att_covariance_2)
        except:
            pass
        
        self.adcs_tracker_att_covariance_3 = getSigned(packet[46:50], 'big', 0, 4294967295)
        try:
            self.adcs_tracker_att_covariance_3 = gen_eus.CONVERT_adcs_tracker_att_covariance_3(self.adcs_tracker_att_covariance_3)
        except:
            pass
        
        self.adcs_tracker_att_covariance_4 = getSigned(packet[50:54], 'big', 0, 4294967295)
        try:
            self.adcs_tracker_att_covariance_4 = gen_eus.CONVERT_adcs_tracker_att_covariance_4(self.adcs_tracker_att_covariance_4)
        except:
            pass
        
        self.adcs_tracker_att_covariance_5 = getSigned(packet[54:58], 'big', 0, 4294967295)
        try:
            self.adcs_tracker_att_covariance_5 = gen_eus.CONVERT_adcs_tracker_att_covariance_5(self.adcs_tracker_att_covariance_5)
        except:
            pass
        
        self.adcs_tracker_maximum_residual = getUnsigned(packet[58:59], 'big', 0, 255)
        
        self.adcs_tracker_maximum_residual_init = getUnsigned(packet[59:60], 'big', 0, 255)
        
        self.adcs_tracker_peak_noise_all_trk_blks = getUnsigned(packet[60:61], 'big', 0, 255)
        try:
            self.adcs_tracker_peak_noise_all_trk_blks = gen_eus.CONVERT_adcs_tracker_peak_noise_all_trk_blks(self.adcs_tracker_peak_noise_all_trk_blks)
        except:
            pass
        
        self.adcs_tracker_peak_bckgnd_all_trk_blks = getUnsigned(packet[61:62], 'big', 0, 255)
        try:
            self.adcs_tracker_peak_bckgnd_all_trk_blks = gen_eus.CONVERT_adcs_tracker_peak_bckgnd_all_trk_blks(self.adcs_tracker_peak_bckgnd_all_trk_blks)
        except:
            pass
        
        self.adcs_tracker_median_noise_all_trk_blks = getUnsigned(packet[62:63], 'big', 0, 255)
        try:
            self.adcs_tracker_median_noise_all_trk_blks = gen_eus.CONVERT_adcs_tracker_median_noise_all_trk_blks(self.adcs_tracker_median_noise_all_trk_blks)
        except:
            pass
        
        self.adcs_tracker_median_bckgnd_all_trk_blks = getUnsigned(packet[63:64], 'big', 0, 255)
        try:
            self.adcs_tracker_median_bckgnd_all_trk_blks = gen_eus.CONVERT_adcs_tracker_median_bckgnd_all_trk_blks(self.adcs_tracker_median_bckgnd_all_trk_blks)
        except:
            pass
        
        self.adcs_tracker_operating_mode = getUnsigned(packet[64:65], 'big', 0, 255)
        try:
            self.adcs_tracker_operating_mode = gen_states.CONVERT_adcs_tracker_operating_mode(self.adcs_tracker_operating_mode)
        except:
            pass
        
        self.adcs_tracker_star_id_step = getUnsigned(packet[65:66], 'big', 0, 255)
        try:
            self.adcs_tracker_star_id_step = gen_states.CONVERT_adcs_tracker_star_id_step(self.adcs_tracker_star_id_step)
        except:
            pass
        
        self.adcs_tracker_id_status = getUnsigned(packet[66:67], 'big', 0, 255)
        try:
            self.adcs_tracker_id_status = gen_states.CONVERT_adcs_tracker_id_status(self.adcs_tracker_id_status)
        except:
            pass
        
        self.adcs_tracker_att_status = getUnsigned(packet[67:68], 'big', 0, 255)
        try:
            self.adcs_tracker_att_status = gen_states.CONVERT_adcs_tracker_att_status(self.adcs_tracker_att_status)
        except:
            pass
        
        self.adcs_tracker_att_time_tag = getUnsigned(packet[68:72], 'big', 0, 4294967295)
        
        self.adcs_tracker_num_id_patterns_tried = getUnsigned(packet[72:76], 'big', 0, 4294967295)
        
        self.adcs_tracker_amplitude_offset = getUnsigned(packet[76:77], 'big', 0, 255)
        
        self.adcs_tracker_maximum_residual_id = getUnsigned(packet[77:79], 'big', 0, 65535)
        
        self.adcs_tracker_max_row_bckgnd_post_comp = getUnsigned(packet[79:81], 'big', 0, 65535)
        
        self.adcs_tracker_det_timeout_count = getUnsigned(packet[81:83], 'big', 0, 65535)
        
        self.adcs_tracker_num_pix_groups_for_id = getUnsigned(packet[83:84], 'big', 0, 255)
        
        self.adcs_tracker_num_of_att_loops = getUnsigned(packet[84:85], 'big', 0, 255)
        
        self.adcs_tracker_num_attitude_stars = getUnsigned(packet[85:86], 'big', 0, 255)
        
        self.adcs_tracker_num_stars_high_residual = getUnsigned(packet[86:87], 'big', 0, 255)
        
        self.adcs_tracker_num_track_blocks_issued = getUnsigned(packet[87:88], 'big', 0, 255)
        
        self.adcs_tracker_num_track_stars = getUnsigned(packet[88:89], 'big', 0, 255)
        
        self.adcs_tracker_num_id_stars = getUnsigned(packet[89:90], 'big', 0, 255)
        
        self.adcs_tracker_track_ref_available = getUnsigned(packet[90:91], 'big', 0, 255)
        try:
            self.adcs_tracker_track_ref_available = gen_states.CONVERT_adcs_tracker_track_ref_available(self.adcs_tracker_track_ref_available)
        except:
            pass
        
        self.adcs_tracker_num_bright_stars = getUnsigned(packet[91:92], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[92:93], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[93:94], 'big', 0, 255)
        
        self.adcs_tracker_checksum = getUnsigned(packet[94:98], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class ADCS_ATT_CTRL:
    def __str__(self):
        return 'ADCS_ATT_CTRL'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_adcs_att_ctrl = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_adcs_att_ctrl = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.adcs_att_ctrl_position_error_0 = getUnsigned(packet[6:10], 'big', 0, 4294967295)
        try:
            self.adcs_att_ctrl_position_error_0 = gen_eus.CONVERT_adcs_att_ctrl_position_error_0(self.adcs_att_ctrl_position_error_0)
        except:
            pass
        
        self.adcs_att_ctrl_position_error_1 = getUnsigned(packet[10:14], 'big', 0, 4294967295)
        try:
            self.adcs_att_ctrl_position_error_1 = gen_eus.CONVERT_adcs_att_ctrl_position_error_1(self.adcs_att_ctrl_position_error_1)
        except:
            pass
        
        self.adcs_att_ctrl_position_error_2 = getUnsigned(packet[14:18], 'big', 0, 4294967295)
        try:
            self.adcs_att_ctrl_position_error_2 = gen_eus.CONVERT_adcs_att_ctrl_position_error_2(self.adcs_att_ctrl_position_error_2)
        except:
            pass
        
        self.adcs_att_ctrl_rate_error_0 = getUnsigned(packet[18:22], 'big', 0, 4294967295)
        try:
            self.adcs_att_ctrl_rate_error_0 = gen_eus.CONVERT_adcs_att_ctrl_rate_error_0(self.adcs_att_ctrl_rate_error_0)
        except:
            pass
        
        self.adcs_att_ctrl_rate_error_1 = getUnsigned(packet[22:26], 'big', 0, 4294967295)
        try:
            self.adcs_att_ctrl_rate_error_1 = gen_eus.CONVERT_adcs_att_ctrl_rate_error_1(self.adcs_att_ctrl_rate_error_1)
        except:
            pass
        
        self.adcs_att_ctrl_rate_error_2 = getUnsigned(packet[26:30], 'big', 0, 4294967295)
        try:
            self.adcs_att_ctrl_rate_error_2 = gen_eus.CONVERT_adcs_att_ctrl_rate_error_2(self.adcs_att_ctrl_rate_error_2)
        except:
            pass
        
        self.adcs_att_ctrl_integral_error_0 = getUnsigned(packet[30:34], 'big', 0, 4294967295)
        try:
            self.adcs_att_ctrl_integral_error_0 = gen_eus.CONVERT_adcs_att_ctrl_integral_error_0(self.adcs_att_ctrl_integral_error_0)
        except:
            pass
        
        self.adcs_att_ctrl_integral_error_1 = getUnsigned(packet[34:38], 'big', 0, 4294967295)
        try:
            self.adcs_att_ctrl_integral_error_1 = gen_eus.CONVERT_adcs_att_ctrl_integral_error_1(self.adcs_att_ctrl_integral_error_1)
        except:
            pass
        
        self.adcs_att_ctrl_integral_error_2 = getUnsigned(packet[38:42], 'big', 0, 4294967295)
        try:
            self.adcs_att_ctrl_integral_error_2 = gen_eus.CONVERT_adcs_att_ctrl_integral_error_2(self.adcs_att_ctrl_integral_error_2)
        except:
            pass
        
        self.adcs_att_ctrl_eigen_error = getUnsigned(packet[42:46], 'big', 0, 4294967295)
        try:
            self.adcs_att_ctrl_eigen_error = gen_eus.CONVERT_adcs_att_ctrl_eigen_error(self.adcs_att_ctrl_eigen_error)
        except:
            pass
        
        self.adcs_att_ctrl_max_rate_0 = getUnsigned(packet[46:48], 'big', 0, 65535)
        try:
            self.adcs_att_ctrl_max_rate_0 = gen_eus.CONVERT_adcs_att_ctrl_max_rate_0(self.adcs_att_ctrl_max_rate_0)
        except:
            pass
        
        self.adcs_att_ctrl_max_rate_1 = getUnsigned(packet[48:50], 'big', 0, 65535)
        try:
            self.adcs_att_ctrl_max_rate_1 = gen_eus.CONVERT_adcs_att_ctrl_max_rate_1(self.adcs_att_ctrl_max_rate_1)
        except:
            pass
        
        self.adcs_att_ctrl_max_rate_2 = getUnsigned(packet[50:52], 'big', 0, 65535)
        try:
            self.adcs_att_ctrl_max_rate_2 = gen_eus.CONVERT_adcs_att_ctrl_max_rate_2(self.adcs_att_ctrl_max_rate_2)
        except:
            pass
        
        self.adcs_att_ctrl_max_accel_0 = getUnsigned(packet[52:54], 'big', 0, 65535)
        try:
            self.adcs_att_ctrl_max_accel_0 = gen_eus.CONVERT_adcs_att_ctrl_max_accel_0(self.adcs_att_ctrl_max_accel_0)
        except:
            pass
        
        self.adcs_att_ctrl_max_accel_1 = getUnsigned(packet[54:56], 'big', 0, 65535)
        try:
            self.adcs_att_ctrl_max_accel_1 = gen_eus.CONVERT_adcs_att_ctrl_max_accel_1(self.adcs_att_ctrl_max_accel_1)
        except:
            pass
        
        self.adcs_att_ctrl_max_accel_2 = getUnsigned(packet[56:58], 'big', 0, 65535)
        try:
            self.adcs_att_ctrl_max_accel_2 = gen_eus.CONVERT_adcs_att_ctrl_max_accel_2(self.adcs_att_ctrl_max_accel_2)
        except:
            pass
        
        self.adcs_att_ctrl_feedback_ctrl_torq_0 = getSigned(packet[58:60], 'big', 0, 65535)
        try:
            self.adcs_att_ctrl_feedback_ctrl_torq_0 = gen_eus.CONVERT_adcs_att_ctrl_feedback_ctrl_torq_0(self.adcs_att_ctrl_feedback_ctrl_torq_0)
        except:
            pass
        
        self.adcs_att_ctrl_feedback_ctrl_torq_1 = getSigned(packet[60:62], 'big', 0, 65535)
        try:
            self.adcs_att_ctrl_feedback_ctrl_torq_1 = gen_eus.CONVERT_adcs_att_ctrl_feedback_ctrl_torq_1(self.adcs_att_ctrl_feedback_ctrl_torq_1)
        except:
            pass
        
        self.adcs_att_ctrl_feedback_ctrl_torq_2 = getSigned(packet[62:64], 'big', 0, 65535)
        try:
            self.adcs_att_ctrl_feedback_ctrl_torq_2 = gen_eus.CONVERT_adcs_att_ctrl_feedback_ctrl_torq_2(self.adcs_att_ctrl_feedback_ctrl_torq_2)
        except:
            pass
        
        self.adcs_att_ctrl_control_torque_0 = getUnsigned(packet[64:68], 'big', 0, 4294967295)
        try:
            self.adcs_att_ctrl_control_torque_0 = gen_eus.CONVERT_adcs_att_ctrl_control_torque_0(self.adcs_att_ctrl_control_torque_0)
        except:
            pass
        
        self.adcs_att_ctrl_control_torque_1 = getUnsigned(packet[68:72], 'big', 0, 4294967295)
        try:
            self.adcs_att_ctrl_control_torque_1 = gen_eus.CONVERT_adcs_att_ctrl_control_torque_1(self.adcs_att_ctrl_control_torque_1)
        except:
            pass
        
        self.adcs_att_ctrl_control_torque_2 = getUnsigned(packet[72:76], 'big', 0, 4294967295)
        try:
            self.adcs_att_ctrl_control_torque_2 = gen_eus.CONVERT_adcs_att_ctrl_control_torque_2(self.adcs_att_ctrl_control_torque_2)
        except:
            pass
        
        self.adcs_att_ctrl_time_into_search = getUnsigned(packet[76:78], 'big', 0, 65535)
        
        self.adcs_att_ctrl_wait_timer = getUnsigned(packet[78:80], 'big', 0, 65535)
        
        self.adcs_att_ctrl_sun_point_angle_error = getUnsigned(packet[80:82], 'big', 0, 65535)
        try:
            self.adcs_att_ctrl_sun_point_angle_error = gen_eus.CONVERT_adcs_att_ctrl_sun_point_angle_error(self.adcs_att_ctrl_sun_point_angle_error)
        except:
            pass
        
        self.adcs_att_ctrl_sun_point_state = getUnsigned(packet[82:83], 'big', 0, 255)
        try:
            self.adcs_att_ctrl_sun_point_state = gen_states.CONVERT_adcs_att_ctrl_sun_point_state(self.adcs_att_ctrl_sun_point_state)
        except:
            pass
        
        self.adcs_att_ctrl_gain_index = getUnsigned(packet[83:84], 'big', 0, 255)
        
        self.adcs_att_ctrl_sun_source_preference = getUnsigned(packet[84:85], 'big', 0, 255)
        try:
            self.adcs_att_ctrl_sun_source_preference = gen_states.CONVERT_adcs_att_ctrl_sun_source_preference(self.adcs_att_ctrl_sun_source_preference)
        except:
            pass
        
        self.adcs_att_ctrl_allow_sun_model = getUnsigned(packet[85:86], 'big', 0, 255)
        try:
            self.adcs_att_ctrl_allow_sun_model = gen_states.CONVERT_adcs_att_ctrl_allow_sun_model(self.adcs_att_ctrl_allow_sun_model)
        except:
            pass
        
        self.adcs_att_ctrl_sun_source_used = getUnsigned(packet[86:87], 'big', 0, 255)
        try:
            self.adcs_att_ctrl_sun_source_used = gen_states.CONVERT_adcs_att_ctrl_sun_source_used(self.adcs_att_ctrl_sun_source_used)
        except:
            pass
        
        self.adcs_att_ctrl_spare2 = getUnsigned(packet[87:87], 'big', 7, 1)
        
        self.adcs_att_ctrl_spare1 = getUnsigned(packet[87:87], 'big', 6, 1)
        
        self.adcs_att_ctrl_sun_source_failover = getUnsigned(packet[87:87], 'big', 5, 1)
        try:
            self.adcs_att_ctrl_sun_source_failover = gen_states.CONVERT_adcs_att_ctrl_sun_source_failover(self.adcs_att_ctrl_sun_source_failover)
        except:
            pass
        
        self.adcs_att_ctrl_sun_avoid_flag = getUnsigned(packet[87:87], 'big', 4, 1)
        try:
            self.adcs_att_ctrl_sun_avoid_flag = gen_states.CONVERT_adcs_att_ctrl_sun_avoid_flag(self.adcs_att_ctrl_sun_avoid_flag)
        except:
            pass
        
        self.adcs_att_ctrl_spare0 = getUnsigned(packet[87:87], 'big', 3, 1)
        
        self.adcs_att_ctrl_on_sun_flag = getUnsigned(packet[87:87], 'big', 2, 1)
        try:
            self.adcs_att_ctrl_on_sun_flag = gen_states.CONVERT_adcs_att_ctrl_on_sun_flag(self.adcs_att_ctrl_on_sun_flag)
        except:
            pass
        
        self.adcs_att_ctrl_momentum_too_high = getUnsigned(packet[87:87], 'big', 1, 1)
        try:
            self.adcs_att_ctrl_momentum_too_high = gen_states.CONVERT_adcs_att_ctrl_momentum_too_high(self.adcs_att_ctrl_momentum_too_high)
        except:
            pass
        
        self.adcs_att_ctrl_att_ctrl_active = getUnsigned(packet[87:87], 'big', 0, 1)
        try:
            self.adcs_att_ctrl_att_ctrl_active = gen_states.CONVERT_adcs_att_ctrl_att_ctrl_active(self.adcs_att_ctrl_att_ctrl_active)
        except:
            pass
        
        self.adcs_att_ctrl_checksum = getUnsigned(packet[88:92], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class ADCS_MOMENTUM:
    def __str__(self):
        return 'ADCS_MOMENTUM'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_adcs_momentum = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_adcs_momentum = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.adcs_momentum_total_momentum_mag = getUnsigned(packet[6:10], 'big', 0, 4294967295)
        try:
            self.adcs_momentum_total_momentum_mag = gen_eus.CONVERT_adcs_momentum_total_momentum_mag(self.adcs_momentum_total_momentum_mag)
        except:
            pass
        
        self.adcs_momentum_momentum_vector_body_0 = getUnsigned(packet[10:14], 'big', 0, 4294967295)
        try:
            self.adcs_momentum_momentum_vector_body_0 = gen_eus.CONVERT_adcs_momentum_momentum_vector_body_0(self.adcs_momentum_momentum_vector_body_0)
        except:
            pass
        
        self.adcs_momentum_momentum_vector_body_1 = getUnsigned(packet[14:18], 'big', 0, 4294967295)
        try:
            self.adcs_momentum_momentum_vector_body_1 = gen_eus.CONVERT_adcs_momentum_momentum_vector_body_1(self.adcs_momentum_momentum_vector_body_1)
        except:
            pass
        
        self.adcs_momentum_momentum_vector_body_2 = getUnsigned(packet[18:22], 'big', 0, 4294967295)
        try:
            self.adcs_momentum_momentum_vector_body_2 = gen_eus.CONVERT_adcs_momentum_momentum_vector_body_2(self.adcs_momentum_momentum_vector_body_2)
        except:
            pass
        
        self.adcs_momentum_wheel_momentum_body_0 = getSigned(packet[22:24], 'big', 0, 65535)
        try:
            self.adcs_momentum_wheel_momentum_body_0 = gen_eus.CONVERT_adcs_momentum_wheel_momentum_body_0(self.adcs_momentum_wheel_momentum_body_0)
        except:
            pass
        
        self.adcs_momentum_wheel_momentum_body_1 = getSigned(packet[24:26], 'big', 0, 65535)
        try:
            self.adcs_momentum_wheel_momentum_body_1 = gen_eus.CONVERT_adcs_momentum_wheel_momentum_body_1(self.adcs_momentum_wheel_momentum_body_1)
        except:
            pass
        
        self.adcs_momentum_wheel_momentum_body_2 = getSigned(packet[26:28], 'big', 0, 65535)
        try:
            self.adcs_momentum_wheel_momentum_body_2 = gen_eus.CONVERT_adcs_momentum_wheel_momentum_body_2(self.adcs_momentum_wheel_momentum_body_2)
        except:
            pass
        
        self.adcs_momentum_bus_momentum_body_0 = getSigned(packet[28:30], 'big', 0, 65535)
        try:
            self.adcs_momentum_bus_momentum_body_0 = gen_eus.CONVERT_adcs_momentum_bus_momentum_body_0(self.adcs_momentum_bus_momentum_body_0)
        except:
            pass
        
        self.adcs_momentum_bus_momentum_body_1 = getSigned(packet[30:32], 'big', 0, 65535)
        try:
            self.adcs_momentum_bus_momentum_body_1 = gen_eus.CONVERT_adcs_momentum_bus_momentum_body_1(self.adcs_momentum_bus_momentum_body_1)
        except:
            pass
        
        self.adcs_momentum_bus_momentum_body_2 = getSigned(packet[32:34], 'big', 0, 65535)
        try:
            self.adcs_momentum_bus_momentum_body_2 = gen_eus.CONVERT_adcs_momentum_bus_momentum_body_2(self.adcs_momentum_bus_momentum_body_2)
        except:
            pass
        
        self.adcs_momentum_cmd_momentum_inertial_0 = getSigned(packet[34:36], 'big', 0, 65535)
        try:
            self.adcs_momentum_cmd_momentum_inertial_0 = gen_eus.CONVERT_adcs_momentum_cmd_momentum_inertial_0(self.adcs_momentum_cmd_momentum_inertial_0)
        except:
            pass
        
        self.adcs_momentum_cmd_momentum_inertial_1 = getSigned(packet[36:38], 'big', 0, 65535)
        try:
            self.adcs_momentum_cmd_momentum_inertial_1 = gen_eus.CONVERT_adcs_momentum_cmd_momentum_inertial_1(self.adcs_momentum_cmd_momentum_inertial_1)
        except:
            pass
        
        self.adcs_momentum_cmd_momentum_inertial_2 = getSigned(packet[38:40], 'big', 0, 65535)
        try:
            self.adcs_momentum_cmd_momentum_inertial_2 = gen_eus.CONVERT_adcs_momentum_cmd_momentum_inertial_2(self.adcs_momentum_cmd_momentum_inertial_2)
        except:
            pass
        
        self.adcs_momentum_duty_cycle_0 = getSigned(packet[40:41], 'big', 0, 255)
        
        self.adcs_momentum_duty_cycle_1 = getSigned(packet[41:42], 'big', 0, 255)
        
        self.adcs_momentum_duty_cycle_2 = getSigned(packet[42:43], 'big', 0, 255)
        
        self.adcs_momentum_cycle_avg_magnet_torque_0 = getSigned(packet[43:45], 'big', 0, 65535)
        try:
            self.adcs_momentum_cycle_avg_magnet_torque_0 = gen_eus.CONVERT_adcs_momentum_cycle_avg_magnet_torque_0(self.adcs_momentum_cycle_avg_magnet_torque_0)
        except:
            pass
        
        self.adcs_momentum_cycle_avg_magnet_torque_1 = getSigned(packet[45:47], 'big', 0, 65535)
        try:
            self.adcs_momentum_cycle_avg_magnet_torque_1 = gen_eus.CONVERT_adcs_momentum_cycle_avg_magnet_torque_1(self.adcs_momentum_cycle_avg_magnet_torque_1)
        except:
            pass
        
        self.adcs_momentum_cycle_avg_magnet_torque_2 = getSigned(packet[47:49], 'big', 0, 65535)
        try:
            self.adcs_momentum_cycle_avg_magnet_torque_2 = gen_eus.CONVERT_adcs_momentum_cycle_avg_magnet_torque_2(self.adcs_momentum_cycle_avg_magnet_torque_2)
        except:
            pass
        
        self.adcs_momentum_torque_rod_mode_0 = getUnsigned(packet[49:50], 'big', 0, 255)
        try:
            self.adcs_momentum_torque_rod_mode_0 = gen_states.CONVERT_adcs_momentum_torque_rod_mode_0(self.adcs_momentum_torque_rod_mode_0)
        except:
            pass
        
        self.adcs_momentum_torque_rod_mode_1 = getUnsigned(packet[50:51], 'big', 0, 255)
        try:
            self.adcs_momentum_torque_rod_mode_1 = gen_states.CONVERT_adcs_momentum_torque_rod_mode_1(self.adcs_momentum_torque_rod_mode_1)
        except:
            pass
        
        self.adcs_momentum_torque_rod_mode_2 = getUnsigned(packet[51:52], 'big', 0, 255)
        try:
            self.adcs_momentum_torque_rod_mode_2 = gen_states.CONVERT_adcs_momentum_torque_rod_mode_2(self.adcs_momentum_torque_rod_mode_2)
        except:
            pass
        
        self.adcs_momentum_any_torque_rod_direction_change_prevented = getUnsigned(packet[52:52], 'big', 7, 1)
        try:
            self.adcs_momentum_any_torque_rod_direction_change_prevented = gen_states.CONVERT_adcs_momentum_any_torque_rod_direction_change_prevented(self.adcs_momentum_any_torque_rod_direction_change_prevented)
        except:
            pass
        
        self.adcs_momentum_torque_rod_direction_3 = getUnsigned(packet[52:52], 'big', 6, 1)
        try:
            self.adcs_momentum_torque_rod_direction_3 = gen_states.CONVERT_adcs_momentum_torque_rod_direction_3(self.adcs_momentum_torque_rod_direction_3)
        except:
            pass
        
        self.adcs_momentum_torque_rod_direction_2 = getUnsigned(packet[52:52], 'big', 5, 1)
        try:
            self.adcs_momentum_torque_rod_direction_2 = gen_states.CONVERT_adcs_momentum_torque_rod_direction_2(self.adcs_momentum_torque_rod_direction_2)
        except:
            pass
        
        self.adcs_momentum_torque_rod_direction_1 = getUnsigned(packet[52:52], 'big', 4, 1)
        try:
            self.adcs_momentum_torque_rod_direction_1 = gen_states.CONVERT_adcs_momentum_torque_rod_direction_1(self.adcs_momentum_torque_rod_direction_1)
        except:
            pass
        
        self.adcs_momentum_torque_rod_spare = getUnsigned(packet[52:52], 'big', 3, 1)
        
        self.adcs_momentum_torque_rod_enable_3 = getUnsigned(packet[52:52], 'big', 2, 1)
        try:
            self.adcs_momentum_torque_rod_enable_3 = gen_states.CONVERT_adcs_momentum_torque_rod_enable_3(self.adcs_momentum_torque_rod_enable_3)
        except:
            pass
        
        self.adcs_momentum_torque_rod_enable_2 = getUnsigned(packet[52:52], 'big', 1, 1)
        try:
            self.adcs_momentum_torque_rod_enable_2 = gen_states.CONVERT_adcs_momentum_torque_rod_enable_2(self.adcs_momentum_torque_rod_enable_2)
        except:
            pass
        
        self.adcs_momentum_torque_rod_enable_1 = getUnsigned(packet[52:52], 'big', 0, 1)
        try:
            self.adcs_momentum_torque_rod_enable_1 = gen_states.CONVERT_adcs_momentum_torque_rod_enable_1(self.adcs_momentum_torque_rod_enable_1)
        except:
            pass
        
        self.adcs_momentum_mag_source_setting = getUnsigned(packet[53:54], 'big', 0, 255)
        try:
            self.adcs_momentum_mag_source_setting = gen_states.CONVERT_adcs_momentum_mag_source_setting(self.adcs_momentum_mag_source_setting)
        except:
            pass
        
        self.adcs_momentum_mag_source_used = getUnsigned(packet[54:55], 'big', 0, 255)
        try:
            self.adcs_momentum_mag_source_used = gen_states.CONVERT_adcs_momentum_mag_source_used(self.adcs_momentum_mag_source_used)
        except:
            pass
        
        self.adcs_momentum_rate_source_setting = getUnsigned(packet[55:56], 'big', 0, 255)
        try:
            self.adcs_momentum_rate_source_setting = gen_states.CONVERT_adcs_momentum_rate_source_setting(self.adcs_momentum_rate_source_setting)
        except:
            pass
        
        self.adcs_momentum_rate_source_used = getUnsigned(packet[56:57], 'big', 0, 255)
        try:
            self.adcs_momentum_rate_source_used = gen_states.CONVERT_adcs_momentum_rate_source_used(self.adcs_momentum_rate_source_used)
        except:
            pass
        
        self.adcs_momentum_max_duration_usec_0 = getUnsigned(packet[57:61], 'big', 0, 4294967295)
        
        self.adcs_momentum_max_duration_usec_1 = getUnsigned(packet[61:65], 'big', 0, 4294967295)
        
        self.adcs_momentum_max_duration_usec_2 = getUnsigned(packet[65:69], 'big', 0, 4294967295)
        
        self.adcs_momentum_momentum_health_1pack = getUnsigned(packet[69:70], 'big', 0, 255)
        
        self.adcs_momentum_checksum = getUnsigned(packet[70:74], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class ADCS_CSS:
    def __str__(self):
        return 'ADCS_CSS'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_adcs_css = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_adcs_css = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.adcs_css_sun_vector_body_0 = getSigned(packet[6:8], 'big', 0, 65535)
        try:
            self.adcs_css_sun_vector_body_0 = gen_eus.CONVERT_adcs_css_sun_vector_body_0(self.adcs_css_sun_vector_body_0)
        except:
            pass
        
        self.adcs_css_sun_vector_body_1 = getSigned(packet[8:10], 'big', 0, 65535)
        try:
            self.adcs_css_sun_vector_body_1 = gen_eus.CONVERT_adcs_css_sun_vector_body_1(self.adcs_css_sun_vector_body_1)
        except:
            pass
        
        self.adcs_css_sun_vector_body_2 = getSigned(packet[10:12], 'big', 0, 65535)
        try:
            self.adcs_css_sun_vector_body_2 = gen_eus.CONVERT_adcs_css_sun_vector_body_2(self.adcs_css_sun_vector_body_2)
        except:
            pass
        
        self.adcs_css_sun_vector_status = getUnsigned(packet[12:13], 'big', 0, 255)
        try:
            self.adcs_css_sun_vector_status = gen_states.CONVERT_adcs_css_sun_vector_status(self.adcs_css_sun_vector_status)
        except:
            pass
        
        self.adcs_css_num_diodes_used_0 = getUnsigned(packet[13:14], 'big', 0, 255)
        
        self.adcs_css_num_diodes_used_1 = getUnsigned(packet[14:15], 'big', 0, 255)
        
        self.adcs_css_num_diodes_used_2 = getUnsigned(packet[15:16], 'big', 0, 255)
        
        self.adcs_css_num_diodes_used_3 = getUnsigned(packet[16:17], 'big', 0, 255)
        
        self.adcs_css_raw_sun_sensor_data_0 = getUnsigned(packet[17:19], 'big', 0, 65535)
        
        self.adcs_css_raw_sun_sensor_data_1 = getUnsigned(packet[19:21], 'big', 0, 65535)
        
        self.adcs_css_raw_sun_sensor_data_2 = getUnsigned(packet[21:23], 'big', 0, 65535)
        
        self.adcs_css_raw_sun_sensor_data_3 = getUnsigned(packet[23:25], 'big', 0, 65535)
        
        self.adcs_css_raw_sun_sensor_data_4 = getUnsigned(packet[25:27], 'big', 0, 65535)
        
        self.adcs_css_raw_sun_sensor_data_5 = getUnsigned(packet[27:29], 'big', 0, 65535)
        
        self.adcs_css_raw_sun_sensor_data_6 = getUnsigned(packet[29:31], 'big', 0, 65535)
        
        self.adcs_css_raw_sun_sensor_data_7 = getUnsigned(packet[31:33], 'big', 0, 65535)
        
        self.adcs_css_raw_sun_sensor_data_8 = getUnsigned(packet[33:35], 'big', 0, 65535)
        
        self.adcs_css_raw_sun_sensor_data_9 = getUnsigned(packet[35:37], 'big', 0, 65535)
        
        self.adcs_css_raw_sun_sensor_data_10 = getUnsigned(packet[37:39], 'big', 0, 65535)
        
        self.adcs_css_raw_sun_sensor_data_11 = getUnsigned(packet[39:41], 'big', 0, 65535)
        
        self.adcs_css_raw_sun_sensor_data_12 = getUnsigned(packet[41:43], 'big', 0, 65535)
        
        self.adcs_css_raw_sun_sensor_data_13 = getUnsigned(packet[43:45], 'big', 0, 65535)
        
        self.adcs_css_raw_sun_sensor_data_14 = getUnsigned(packet[45:47], 'big', 0, 65535)
        
        self.adcs_css_raw_sun_sensor_data_15 = getUnsigned(packet[47:49], 'big', 0, 65535)
        
        self.adcs_css_css_invalid_count = getUnsigned(packet[49:51], 'big', 0, 65535)
        
        self.adcs_css_invalid_count_pkg = getUnsigned(packet[51:51], 'big', 5, 7)
        
        self.adcs_css_invalid_count_reason = getUnsigned(packet[51:51], 'big', 0, 31)
        try:
            self.adcs_css_invalid_count_reason = gen_states.CONVERT_adcs_css_invalid_count_reason(self.adcs_css_invalid_count_reason)
        except:
            pass
        
        self.adcs_css_css_reinit_count = getUnsigned(packet[52:54], 'big', 0, 65535)
        
        self.adcs_css_spare0 = getUnsigned(packet[54:54], 'big', 7, 1)
        
        self.adcs_css_sun_sensor_used = getUnsigned(packet[54:54], 'big', 4, 7)
        
        self.adcs_css_css_test_mode = getUnsigned(packet[54:54], 'big', 3, 1)
        try:
            self.adcs_css_css_test_mode = gen_states.CONVERT_adcs_css_css_test_mode(self.adcs_css_css_test_mode)
        except:
            pass
        
        self.adcs_css_sun_vector_enabled = getUnsigned(packet[54:54], 'big', 2, 1)
        try:
            self.adcs_css_sun_vector_enabled = gen_states.CONVERT_adcs_css_sun_vector_enabled(self.adcs_css_sun_vector_enabled)
        except:
            pass
        
        self.adcs_css_meas_sun_valid = getUnsigned(packet[54:54], 'big', 1, 1)
        try:
            self.adcs_css_meas_sun_valid = gen_states.CONVERT_adcs_css_meas_sun_valid(self.adcs_css_meas_sun_valid)
        except:
            pass
        
        self.adcs_css_power_state = getUnsigned(packet[54:54], 'big', 0, 1)
        try:
            self.adcs_css_power_state = gen_states.CONVERT_adcs_css_power_state(self.adcs_css_power_state)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[55:56], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[56:57], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[57:58], 'big', 0, 255)
        
        self.adcs_css_checksum = getUnsigned(packet[58:62], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class ADCS_MAG:
    def __str__(self):
        return 'ADCS_MAG'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_adcs_mag = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_adcs_mag = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.adcs_mag_mag_vector_body_0 = getSigned(packet[6:8], 'big', 0, 65535)
        try:
            self.adcs_mag_mag_vector_body_0 = gen_eus.CONVERT_adcs_mag_mag_vector_body_0(self.adcs_mag_mag_vector_body_0)
        except:
            pass
        
        self.adcs_mag_mag_vector_body_1 = getSigned(packet[8:10], 'big', 0, 65535)
        try:
            self.adcs_mag_mag_vector_body_1 = gen_eus.CONVERT_adcs_mag_mag_vector_body_1(self.adcs_mag_mag_vector_body_1)
        except:
            pass
        
        self.adcs_mag_mag_vector_body_2 = getSigned(packet[10:12], 'big', 0, 65535)
        try:
            self.adcs_mag_mag_vector_body_2 = gen_eus.CONVERT_adcs_mag_mag_vector_body_2(self.adcs_mag_mag_vector_body_2)
        except:
            pass
        
        self.adcs_mag_raw_magnetometer_data_0 = getUnsigned(packet[12:14], 'big', 0, 65535)
        
        self.adcs_mag_raw_magnetometer_data_1 = getUnsigned(packet[14:16], 'big', 0, 65535)
        
        self.adcs_mag_raw_magnetometer_data_2 = getUnsigned(packet[16:18], 'big', 0, 65535)
        
        self.adcs_mag_raw_magnetometer_data_3 = getUnsigned(packet[18:20], 'big', 0, 65535)
        
        self.adcs_mag_raw_magnetometer_data_4 = getUnsigned(packet[20:22], 'big', 0, 65535)
        
        self.adcs_mag_raw_magnetometer_data_5 = getUnsigned(packet[22:24], 'big', 0, 65535)
        
        self.adcs_mag_raw_magnetometer_data_6 = getUnsigned(packet[24:26], 'big', 0, 65535)
        
        self.adcs_mag_raw_magnetometer_data_7 = getUnsigned(packet[26:28], 'big', 0, 65535)
        
        self.adcs_mag_raw_magnetometer_data_8 = getUnsigned(packet[28:30], 'big', 0, 65535)
        
        self.adcs_mag_raw_magnetometer_data_9 = getUnsigned(packet[30:32], 'big', 0, 65535)
        
        self.adcs_mag_raw_magnetometer_data_10 = getUnsigned(packet[32:34], 'big', 0, 65535)
        
        self.adcs_mag_raw_magnetometer_data_11 = getUnsigned(packet[34:36], 'big', 0, 65535)
        
        self.adcs_mag_raw_magnetometer_data_12 = getUnsigned(packet[36:38], 'big', 0, 65535)
        
        self.adcs_mag_raw_magnetometer_data_13 = getUnsigned(packet[38:40], 'big', 0, 65535)
        
        self.adcs_mag_raw_magnetometer_data_14 = getUnsigned(packet[40:42], 'big', 0, 65535)
        
        self.adcs_mag_mag_invalid_count = getUnsigned(packet[42:44], 'big', 0, 65535)
        
        self.adcs_mag_mag_invalid_count_pkg = getUnsigned(packet[44:44], 'big', 5, 7)
        
        self.adcs_mag_mag_invalid_count_reason = getUnsigned(packet[44:44], 'big', 0, 31)
        try:
            self.adcs_mag_mag_invalid_count_reason = gen_states.CONVERT_adcs_mag_mag_invalid_count_reason(self.adcs_mag_mag_invalid_count_reason)
        except:
            pass
        
        self.adcs_mag_spare0 = getUnsigned(packet[45:45], 'big', 7, 1)
        
        self.adcs_mag_mag_sensor_used = getUnsigned(packet[45:45], 'big', 4, 7)
        
        self.adcs_mag_mag_test_mode = getUnsigned(packet[45:45], 'big', 3, 1)
        try:
            self.adcs_mag_mag_test_mode = gen_states.CONVERT_adcs_mag_mag_test_mode(self.adcs_mag_mag_test_mode)
        except:
            pass
        
        self.adcs_mag_mag_vector_enabled = getUnsigned(packet[45:45], 'big', 2, 1)
        try:
            self.adcs_mag_mag_vector_enabled = gen_states.CONVERT_adcs_mag_mag_vector_enabled(self.adcs_mag_mag_vector_enabled)
        except:
            pass
        
        self.adcs_mag_mag_vector_valid = getUnsigned(packet[45:45], 'big', 1, 1)
        try:
            self.adcs_mag_mag_vector_valid = gen_states.CONVERT_adcs_mag_mag_vector_valid(self.adcs_mag_mag_vector_valid)
        except:
            pass
        
        self.adcs_mag_mag_power_state = getUnsigned(packet[45:45], 'big', 0, 1)
        try:
            self.adcs_mag_mag_power_state = gen_states.CONVERT_adcs_mag_mag_power_state(self.adcs_mag_mag_power_state)
        except:
            pass
        
        self.adcs_mag_checksum = getUnsigned(packet[46:50], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class ADCS_IMU:
    def __str__(self):
        return 'ADCS_IMU'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_adcs_imu = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_adcs_imu = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.adcs_imu_imu_avg_vector_0 = getUnsigned(packet[6:10], 'big', 0, 4294967295)
        try:
            self.adcs_imu_imu_avg_vector_0 = gen_eus.CONVERT_adcs_imu_imu_avg_vector_0(self.adcs_imu_imu_avg_vector_0)
        except:
            pass
        
        self.adcs_imu_imu_avg_vector_1 = getUnsigned(packet[10:14], 'big', 0, 4294967295)
        try:
            self.adcs_imu_imu_avg_vector_1 = gen_eus.CONVERT_adcs_imu_imu_avg_vector_1(self.adcs_imu_imu_avg_vector_1)
        except:
            pass
        
        self.adcs_imu_imu_avg_vector_2 = getUnsigned(packet[14:18], 'big', 0, 4294967295)
        try:
            self.adcs_imu_imu_avg_vector_2 = gen_eus.CONVERT_adcs_imu_imu_avg_vector_2(self.adcs_imu_imu_avg_vector_2)
        except:
            pass
        
        self.adcs_imu_imu_avg_vector_frame = getUnsigned(packet[18:19], 'big', 0, 255)
        try:
            self.adcs_imu_imu_avg_vector_frame = gen_states.CONVERT_adcs_imu_imu_avg_vector_frame(self.adcs_imu_imu_avg_vector_frame)
        except:
            pass
        
        self.adcs_imu_avg_body_accel_0 = getUnsigned(packet[19:23], 'big', 0, 4294967295)
        try:
            self.adcs_imu_avg_body_accel_0 = gen_eus.CONVERT_adcs_imu_avg_body_accel_0(self.adcs_imu_avg_body_accel_0)
        except:
            pass
        
        self.adcs_imu_avg_body_accel_1 = getUnsigned(packet[23:27], 'big', 0, 4294967295)
        try:
            self.adcs_imu_avg_body_accel_1 = gen_eus.CONVERT_adcs_imu_avg_body_accel_1(self.adcs_imu_avg_body_accel_1)
        except:
            pass
        
        self.adcs_imu_avg_body_accel_2 = getUnsigned(packet[27:31], 'big', 0, 4294967295)
        try:
            self.adcs_imu_avg_body_accel_2 = gen_eus.CONVERT_adcs_imu_avg_body_accel_2(self.adcs_imu_avg_body_accel_2)
        except:
            pass
        
        self.adcs_imu_avg_time_tag = getUnsigned(packet[31:35], 'big', 0, 4294967295)
        
        self.adcs_imu_raw_first_packet_rates_0 = getSigned(packet[35:37], 'big', 0, 65535)
        
        self.adcs_imu_raw_first_packet_rates_1 = getSigned(packet[37:39], 'big', 0, 65535)
        
        self.adcs_imu_raw_first_packet_rates_2 = getSigned(packet[39:41], 'big', 0, 65535)
        
        self.adcs_imu_imu_invalid_count = getUnsigned(packet[41:43], 'big', 0, 65535)
        
        self.adcs_imu_imu_invalid_count_reason = getUnsigned(packet[43:44], 'big', 0, 255)
        try:
            self.adcs_imu_imu_invalid_count_reason = gen_states.CONVERT_adcs_imu_imu_invalid_count_reason(self.adcs_imu_imu_invalid_count_reason)
        except:
            pass
        
        self.adcs_imu_imu_reinit_count = getUnsigned(packet[44:46], 'big', 0, 65535)
        
        self.adcs_imu_new_packet_count = getUnsigned(packet[46:47], 'big', 0, 255)
        
        self.adcs_imu_spare2 = getUnsigned(packet[47:47], 'big', 7, 1)
        
        self.adcs_imu_spare1 = getUnsigned(packet[47:47], 'big', 6, 1)
        
        self.adcs_imu_spare0 = getUnsigned(packet[47:47], 'big', 5, 1)
        
        self.adcs_imu_imu_valid_packets = getUnsigned(packet[47:47], 'big', 4, 1)
        try:
            self.adcs_imu_imu_valid_packets = gen_states.CONVERT_adcs_imu_imu_valid_packets(self.adcs_imu_imu_valid_packets)
        except:
            pass
        
        self.adcs_imu_imu_test_mode = getUnsigned(packet[47:47], 'big', 3, 1)
        try:
            self.adcs_imu_imu_test_mode = gen_states.CONVERT_adcs_imu_imu_test_mode(self.adcs_imu_imu_test_mode)
        except:
            pass
        
        self.adcs_imu_imu_vector_enabled = getUnsigned(packet[47:47], 'big', 2, 1)
        try:
            self.adcs_imu_imu_vector_enabled = gen_states.CONVERT_adcs_imu_imu_vector_enabled(self.adcs_imu_imu_vector_enabled)
        except:
            pass
        
        self.adcs_imu_imu_vector_valid = getUnsigned(packet[47:47], 'big', 1, 1)
        try:
            self.adcs_imu_imu_vector_valid = gen_states.CONVERT_adcs_imu_imu_vector_valid(self.adcs_imu_imu_vector_valid)
        except:
            pass
        
        self.adcs_imu_imu_power_state = getUnsigned(packet[47:47], 'big', 0, 1)
        try:
            self.adcs_imu_imu_power_state = gen_states.CONVERT_adcs_imu_imu_power_state(self.adcs_imu_imu_power_state)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[48:49], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[49:50], 'big', 0, 255)
        
        self.adcs_imu_checksum = getUnsigned(packet[50:54], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class ADCS_CLOCK_SYNC:
    def __str__(self):
        return 'ADCS_CLOCK_SYNC'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_adcs_clock_sync = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_adcs_clock_sync = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.adcs_clock_sync_hr_run_count = getUnsigned(packet[6:10], 'big', 0, 4294967295)
        
        self.adcs_clock_sync_hr_cycle_num = getUnsigned(packet[10:11], 'big', 0, 255)
        
        self.adcs_clock_sync_hr_overrun_count = getUnsigned(packet[11:15], 'big', 0, 4294967295)
        
        self.adcs_clock_sync_vhr_overrun_count = getUnsigned(packet[15:19], 'big', 0, 4294967295)
        
        self.adcs_clock_sync_hr_time_usec = getUnsigned(packet[19:23], 'big', 0, 4294967295)
        
        self.adcs_clock_sync_gps_pps_time_usec = getUnsigned(packet[23:27], 'big', 0, 4294967295)
        
        self.adcs_clock_sync_cycles_since_pps = getUnsigned(packet[27:31], 'big', 0, 4294967295)
        
        self.adcs_clock_sync_counts_per_sec = getUnsigned(packet[31:35], 'big', 0, 4294967295)
        
        self.adcs_clock_sync_clock_sync_enable = getUnsigned(packet[35:36], 'big', 0, 255)
        try:
            self.adcs_clock_sync_clock_sync_enable = gen_states.CONVERT_adcs_clock_sync_clock_sync_enable(self.adcs_clock_sync_clock_sync_enable)
        except:
            pass
        
        self.adcs_clock_sync_pps_output_source = getUnsigned(packet[36:37], 'big', 0, 255)
        try:
            self.adcs_clock_sync_pps_output_source = gen_states.CONVERT_adcs_clock_sync_pps_output_source(self.adcs_clock_sync_pps_output_source)
        except:
            pass
        
        self.adcs_clock_sync_pps_input_source = getUnsigned(packet[37:38], 'big', 0, 255)
        try:
            self.adcs_clock_sync_pps_input_source = gen_states.CONVERT_adcs_clock_sync_pps_input_source(self.adcs_clock_sync_pps_input_source)
        except:
            pass
        
        self.adcs_clock_sync_current_package_exec_time = getUnsigned(packet[38:42], 'big', 0, 4294967295)
        
        self.adcs_clock_sync_package_being_timed = getUnsigned(packet[42:43], 'big', 0, 255)
        
        self.adcs_clock_sync_vhr_max_exec_time_us = getUnsigned(packet[43:47], 'big', 0, 4294967295)
        
        self.adcs_clock_sync_hr_exec_time_ms_0 = getUnsigned(packet[47:48], 'big', 0, 255)
        
        self.adcs_clock_sync_hr_exec_time_ms_1 = getUnsigned(packet[48:49], 'big', 0, 255)
        
        self.adcs_clock_sync_hr_exec_time_ms_2 = getUnsigned(packet[49:50], 'big', 0, 255)
        
        self.adcs_clock_sync_hr_exec_time_ms_3 = getUnsigned(packet[50:51], 'big', 0, 255)
        
        self.adcs_clock_sync_hr_exec_time_ms_4 = getUnsigned(packet[51:52], 'big', 0, 255)
        
        self.adcs_clock_sync_spare = getUnsigned(packet[52:52], 'big', 5, 7)
        
        self.adcs_clock_sync_clock_frame_rate_err = getUnsigned(packet[52:52], 'big', 4, 1)
        try:
            self.adcs_clock_sync_clock_frame_rate_err = gen_states.CONVERT_adcs_clock_sync_clock_frame_rate_err(self.adcs_clock_sync_clock_frame_rate_err)
        except:
            pass
        
        self.adcs_clock_sync_clock_offset_adjust_active = getUnsigned(packet[52:52], 'big', 3, 1)
        try:
            self.adcs_clock_sync_clock_offset_adjust_active = gen_states.CONVERT_adcs_clock_sync_clock_offset_adjust_active(self.adcs_clock_sync_clock_offset_adjust_active)
        except:
            pass
        
        self.adcs_clock_sync_clock_slope_adjust_active = getUnsigned(packet[52:52], 'big', 2, 1)
        try:
            self.adcs_clock_sync_clock_slope_adjust_active = gen_states.CONVERT_adcs_clock_sync_clock_slope_adjust_active(self.adcs_clock_sync_clock_slope_adjust_active)
        except:
            pass
        
        self.adcs_clock_sync_incoming_pps_valid = getUnsigned(packet[52:52], 'big', 1, 1)
        try:
            self.adcs_clock_sync_incoming_pps_valid = gen_states.CONVERT_adcs_clock_sync_incoming_pps_valid(self.adcs_clock_sync_incoming_pps_valid)
        except:
            pass
        
        self.adcs_clock_sync_pps_recieved_this_cycle = getUnsigned(packet[52:52], 'big', 0, 1)
        try:
            self.adcs_clock_sync_pps_recieved_this_cycle = gen_states.CONVERT_adcs_clock_sync_pps_recieved_this_cycle(self.adcs_clock_sync_pps_recieved_this_cycle)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[53:54], 'big', 0, 255)
        
        self.adcs_clock_sync_checksum = getUnsigned(packet[54:58], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class ADCS_ANALOGS:
    def __str__(self):
        return 'ADCS_ANALOGS'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_adcs_analogs = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_adcs_analogs = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.adcs_analogs_voltage_2p_5 = getUnsigned(packet[6:7], 'big', 0, 255)
        try:
            self.adcs_analogs_voltage_2p_5 = gen_eus.CONVERT_adcs_analogs_voltage_2p_5(self.adcs_analogs_voltage_2p_5)
        except:
            pass
        
        self.adcs_analogs_voltage_1p_8 = getUnsigned(packet[7:8], 'big', 0, 255)
        try:
            self.adcs_analogs_voltage_1p_8 = gen_eus.CONVERT_adcs_analogs_voltage_1p_8(self.adcs_analogs_voltage_1p_8)
        except:
            pass
        
        self.adcs_analogs_voltage_1p_2 = getUnsigned(packet[8:9], 'big', 0, 255)
        try:
            self.adcs_analogs_voltage_1p_2 = gen_eus.CONVERT_adcs_analogs_voltage_1p_2(self.adcs_analogs_voltage_1p_2)
        except:
            pass
        
        self.adcs_analogs_det_temp = getSigned(packet[9:10], 'big', 0, 255)
        try:
            self.adcs_analogs_det_temp = gen_eus.CONVERT_adcs_analogs_det_temp(self.adcs_analogs_det_temp)
        except:
            pass
        
        self.adcs_analogs_ext_temp = getSigned(packet[10:12], 'big', 0, 65535)
        try:
            self.adcs_analogs_ext_temp = gen_eus.CONVERT_adcs_analogs_ext_temp(self.adcs_analogs_ext_temp)
        except:
            pass
        
        self.adcs_analogs_imu_temp = getSigned(packet[12:14], 'big', 0, 65535)
        try:
            self.adcs_analogs_imu_temp = gen_eus.CONVERT_adcs_analogs_imu_temp(self.adcs_analogs_imu_temp)
        except:
            pass
        
        self.adcs_analogs_motor_1temp = getSigned(packet[14:16], 'big', 0, 65535)
        try:
            self.adcs_analogs_motor_1temp = gen_eus.CONVERT_adcs_analogs_motor_1temp(self.adcs_analogs_motor_1temp)
        except:
            pass
        
        self.adcs_analogs_motor_2temp = getSigned(packet[16:18], 'big', 0, 65535)
        try:
            self.adcs_analogs_motor_2temp = gen_eus.CONVERT_adcs_analogs_motor_2temp(self.adcs_analogs_motor_2temp)
        except:
            pass
        
        self.adcs_analogs_motor_3temp = getSigned(packet[18:20], 'big', 0, 65535)
        try:
            self.adcs_analogs_motor_3temp = gen_eus.CONVERT_adcs_analogs_motor_3temp(self.adcs_analogs_motor_3temp)
        except:
            pass
        
        self.adcs_analogs_motor_4temp = getSigned(packet[20:22], 'big', 0, 65535)
        try:
            self.adcs_analogs_motor_4temp = gen_eus.CONVERT_adcs_analogs_motor_4temp(self.adcs_analogs_motor_4temp)
        except:
            pass
        
        self.adcs_analogs_digital_bus_v = getSigned(packet[22:24], 'big', 0, 65535)
        try:
            self.adcs_analogs_digital_bus_v = gen_eus.CONVERT_adcs_analogs_digital_bus_v(self.adcs_analogs_digital_bus_v)
        except:
            pass
        
        self.adcs_analogs_motor_bus_v = getSigned(packet[24:26], 'big', 0, 65535)
        try:
            self.adcs_analogs_motor_bus_v = gen_eus.CONVERT_adcs_analogs_motor_bus_v(self.adcs_analogs_motor_bus_v)
        except:
            pass
        
        self.adcs_analogs_rod_bus_v = getSigned(packet[26:28], 'big', 0, 65535)
        try:
            self.adcs_analogs_rod_bus_v = gen_eus.CONVERT_adcs_analogs_rod_bus_v(self.adcs_analogs_rod_bus_v)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[28:29], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[29:30], 'big', 0, 255)
        
        self.adcs_analogs_checksum = getUnsigned(packet[30:34], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class ADCS_TABLES:
    def __str__(self):
        return 'ADCS_TABLES'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_adcs_tables = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_adcs_tables = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.adcs_tables_length_bytes = getUnsigned(packet[6:10], 'big', 0, 4294967295)
        
        self.adcs_tables_offset_bytes = getUnsigned(packet[10:14], 'big', 0, 4294967295)
        
        self.adcs_tables_table_checksum = getUnsigned(packet[14:16], 'big', 0, 65535)
        
        self.adcs_tables_table_upload_status = getUnsigned(packet[16:17], 'big', 0, 255)
        try:
            self.adcs_tables_table_upload_status = gen_states.CONVERT_adcs_tables_table_upload_status(self.adcs_tables_table_upload_status)
        except:
            pass
        
        self.adcs_tables_which_table = getUnsigned(packet[17:18], 'big', 0, 255)
        
        self.adcs_tables_image = getUnsigned(packet[18:19], 'big', 0, 255)
        
        self.adcs_tables_flash_burn_armed = getUnsigned(packet[19:20], 'big', 0, 255)
        try:
            self.adcs_tables_flash_burn_armed = gen_states.CONVERT_adcs_tables_flash_burn_armed(self.adcs_tables_flash_burn_armed)
        except:
            pass
        
        self.adcs_tables_tables_thread_status = getUnsigned(packet[20:21], 'big', 0, 255)
        try:
            self.adcs_tables_tables_thread_status = gen_states.CONVERT_adcs_tables_tables_thread_status(self.adcs_tables_tables_thread_status)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[21:22], 'big', 0, 255)
        
        self.adcs_tables_checksum = getUnsigned(packet[22:26], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class ADCS_TRACKER_2:
    def __str__(self):
        return 'ADCS_TRACKER_2'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_adcs_tracker_2 = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_adcs_tracker_2 = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.adcs_tracker_2_attitude_st_0 = getSigned(packet[6:10], 'big', 0, 4294967295)
        try:
            self.adcs_tracker_2_attitude_st_0 = gen_eus.CONVERT_adcs_tracker_2_attitude_st_0(self.adcs_tracker_2_attitude_st_0)
        except:
            pass
        
        self.adcs_tracker_2_attitude_st_1 = getSigned(packet[10:14], 'big', 0, 4294967295)
        try:
            self.adcs_tracker_2_attitude_st_1 = gen_eus.CONVERT_adcs_tracker_2_attitude_st_1(self.adcs_tracker_2_attitude_st_1)
        except:
            pass
        
        self.adcs_tracker_2_attitude_st_2 = getSigned(packet[14:18], 'big', 0, 4294967295)
        try:
            self.adcs_tracker_2_attitude_st_2 = gen_eus.CONVERT_adcs_tracker_2_attitude_st_2(self.adcs_tracker_2_attitude_st_2)
        except:
            pass
        
        self.adcs_tracker_2_attitude_st_3 = getSigned(packet[18:22], 'big', 0, 4294967295)
        try:
            self.adcs_tracker_2_attitude_st_3 = gen_eus.CONVERT_adcs_tracker_2_attitude_st_3(self.adcs_tracker_2_attitude_st_3)
        except:
            pass
        
        self.adcs_tracker_2_rate_est_0 = getSigned(packet[22:24], 'big', 0, 65535)
        try:
            self.adcs_tracker_2_rate_est_0 = gen_eus.CONVERT_adcs_tracker_2_rate_est_0(self.adcs_tracker_2_rate_est_0)
        except:
            pass
        
        self.adcs_tracker_2_rate_est_1 = getSigned(packet[24:26], 'big', 0, 65535)
        try:
            self.adcs_tracker_2_rate_est_1 = gen_eus.CONVERT_adcs_tracker_2_rate_est_1(self.adcs_tracker_2_rate_est_1)
        except:
            pass
        
        self.adcs_tracker_2_rate_est_2 = getSigned(packet[26:28], 'big', 0, 65535)
        try:
            self.adcs_tracker_2_rate_est_2 = gen_eus.CONVERT_adcs_tracker_2_rate_est_2(self.adcs_tracker_2_rate_est_2)
        except:
            pass
        
        self.adcs_tracker_2_right_asc = getUnsigned(packet[28:30], 'big', 0, 65535)
        try:
            self.adcs_tracker_2_right_asc = gen_eus.CONVERT_adcs_tracker_2_right_asc(self.adcs_tracker_2_right_asc)
        except:
            pass
        
        self.adcs_tracker_2_declination = getSigned(packet[30:32], 'big', 0, 65535)
        try:
            self.adcs_tracker_2_declination = gen_eus.CONVERT_adcs_tracker_2_declination(self.adcs_tracker_2_declination)
        except:
            pass
        
        self.adcs_tracker_2_roll = getSigned(packet[32:34], 'big', 0, 65535)
        try:
            self.adcs_tracker_2_roll = gen_eus.CONVERT_adcs_tracker_2_roll(self.adcs_tracker_2_roll)
        except:
            pass
        
        self.adcs_tracker_2_att_covariance_0 = getSigned(packet[34:38], 'big', 0, 4294967295)
        try:
            self.adcs_tracker_2_att_covariance_0 = gen_eus.CONVERT_adcs_tracker_2_att_covariance_0(self.adcs_tracker_2_att_covariance_0)
        except:
            pass
        
        self.adcs_tracker_2_att_covariance_1 = getSigned(packet[38:42], 'big', 0, 4294967295)
        try:
            self.adcs_tracker_2_att_covariance_1 = gen_eus.CONVERT_adcs_tracker_2_att_covariance_1(self.adcs_tracker_2_att_covariance_1)
        except:
            pass
        
        self.adcs_tracker_2_att_covariance_2 = getSigned(packet[42:46], 'big', 0, 4294967295)
        try:
            self.adcs_tracker_2_att_covariance_2 = gen_eus.CONVERT_adcs_tracker_2_att_covariance_2(self.adcs_tracker_2_att_covariance_2)
        except:
            pass
        
        self.adcs_tracker_2_att_covariance_3 = getSigned(packet[46:50], 'big', 0, 4294967295)
        try:
            self.adcs_tracker_2_att_covariance_3 = gen_eus.CONVERT_adcs_tracker_2_att_covariance_3(self.adcs_tracker_2_att_covariance_3)
        except:
            pass
        
        self.adcs_tracker_2_att_covariance_4 = getSigned(packet[50:54], 'big', 0, 4294967295)
        try:
            self.adcs_tracker_2_att_covariance_4 = gen_eus.CONVERT_adcs_tracker_2_att_covariance_4(self.adcs_tracker_2_att_covariance_4)
        except:
            pass
        
        self.adcs_tracker_2_att_covariance_5 = getSigned(packet[54:58], 'big', 0, 4294967295)
        try:
            self.adcs_tracker_2_att_covariance_5 = gen_eus.CONVERT_adcs_tracker_2_att_covariance_5(self.adcs_tracker_2_att_covariance_5)
        except:
            pass
        
        self.adcs_tracker_2_maximum_residual = getUnsigned(packet[58:59], 'big', 0, 255)
        
        self.adcs_tracker_2_maximum_residual_init = getUnsigned(packet[59:60], 'big', 0, 255)
        
        self.adcs_tracker_2_peak_noise_all_trk_blks = getUnsigned(packet[60:61], 'big', 0, 255)
        try:
            self.adcs_tracker_2_peak_noise_all_trk_blks = gen_eus.CONVERT_adcs_tracker_2_peak_noise_all_trk_blks(self.adcs_tracker_2_peak_noise_all_trk_blks)
        except:
            pass
        
        self.adcs_tracker_2_peak_bckgnd_all_trk_blks = getUnsigned(packet[61:62], 'big', 0, 255)
        try:
            self.adcs_tracker_2_peak_bckgnd_all_trk_blks = gen_eus.CONVERT_adcs_tracker_2_peak_bckgnd_all_trk_blks(self.adcs_tracker_2_peak_bckgnd_all_trk_blks)
        except:
            pass
        
        self.adcs_tracker_2_median_noise_all_trk_blks = getUnsigned(packet[62:63], 'big', 0, 255)
        try:
            self.adcs_tracker_2_median_noise_all_trk_blks = gen_eus.CONVERT_adcs_tracker_2_median_noise_all_trk_blks(self.adcs_tracker_2_median_noise_all_trk_blks)
        except:
            pass
        
        self.adcs_tracker_2_median_bckgnd_all_trk_blks = getUnsigned(packet[63:64], 'big', 0, 255)
        try:
            self.adcs_tracker_2_median_bckgnd_all_trk_blks = gen_eus.CONVERT_adcs_tracker_2_median_bckgnd_all_trk_blks(self.adcs_tracker_2_median_bckgnd_all_trk_blks)
        except:
            pass
        
        self.adcs_tracker_2_operating_mode = getUnsigned(packet[64:65], 'big', 0, 255)
        try:
            self.adcs_tracker_2_operating_mode = gen_states.CONVERT_adcs_tracker_2_operating_mode(self.adcs_tracker_2_operating_mode)
        except:
            pass
        
        self.adcs_tracker_2_star_id_step = getUnsigned(packet[65:66], 'big', 0, 255)
        try:
            self.adcs_tracker_2_star_id_step = gen_states.CONVERT_adcs_tracker_2_star_id_step(self.adcs_tracker_2_star_id_step)
        except:
            pass
        
        self.adcs_tracker_2_id_status = getUnsigned(packet[66:67], 'big', 0, 255)
        try:
            self.adcs_tracker_2_id_status = gen_states.CONVERT_adcs_tracker_2_id_status(self.adcs_tracker_2_id_status)
        except:
            pass
        
        self.adcs_tracker_2_id_status_save = getUnsigned(packet[67:68], 'big', 0, 255)
        try:
            self.adcs_tracker_2_id_status_save = gen_states.CONVERT_adcs_tracker_2_id_status_save(self.adcs_tracker_2_id_status_save)
        except:
            pass
        
        self.adcs_tracker_2_att_status = getUnsigned(packet[68:69], 'big', 0, 255)
        try:
            self.adcs_tracker_2_att_status = gen_states.CONVERT_adcs_tracker_2_att_status(self.adcs_tracker_2_att_status)
        except:
            pass
        
        self.adcs_tracker_2_rate_est_status = getUnsigned(packet[69:70], 'big', 0, 255)
        try:
            self.adcs_tracker_2_rate_est_status = gen_states.CONVERT_adcs_tracker_2_rate_est_status(self.adcs_tracker_2_rate_est_status)
        except:
            pass
        
        self.adcs_tracker_2_vel_aid_status = getUnsigned(packet[70:71], 'big', 0, 255)
        try:
            self.adcs_tracker_2_vel_aid_status = gen_states.CONVERT_adcs_tracker_2_vel_aid_status(self.adcs_tracker_2_vel_aid_status)
        except:
            pass
        
        self.adcs_tracker_2_att_time_tag = getUnsigned(packet[71:75], 'big', 0, 4294967295)
        
        self.adcs_tracker_2_num_id_patterns_tried = getUnsigned(packet[75:79], 'big', 0, 4294967295)
        
        self.adcs_tracker_2_amplitude_offset = getUnsigned(packet[79:80], 'big', 0, 255)
        
        self.adcs_tracker_2_maximum_residual_id = getUnsigned(packet[80:82], 'big', 0, 65535)
        
        self.adcs_tracker_2_max_row_bckgnd_post_comp = getUnsigned(packet[82:84], 'big', 0, 65535)
        
        self.adcs_tracker_2_det_timeout_count = getUnsigned(packet[84:86], 'big', 0, 65535)
        
        self.adcs_tracker_2_num_pix_groups_for_id = getUnsigned(packet[86:87], 'big', 0, 255)
        
        self.adcs_tracker_2_num_of_att_loops = getUnsigned(packet[87:88], 'big', 0, 255)
        
        self.adcs_tracker_2_num_attitude_stars = getUnsigned(packet[88:89], 'big', 0, 255)
        
        self.adcs_tracker_2_num_stars_high_residual = getUnsigned(packet[89:90], 'big', 0, 255)
        
        self.adcs_tracker_2_num_track_blocks_issued = getUnsigned(packet[90:91], 'big', 0, 255)
        
        self.adcs_tracker_2_num_track_stars = getUnsigned(packet[91:92], 'big', 0, 255)
        
        self.adcs_tracker_2_num_id_stars = getUnsigned(packet[92:93], 'big', 0, 255)
        
        self.adcs_tracker_2_test_mode = getUnsigned(packet[93:94], 'big', 0, 255)
        
        self.adcs_tracker_2_track_ref_available = getUnsigned(packet[94:95], 'big', 0, 255)
        try:
            self.adcs_tracker_2_track_ref_available = gen_states.CONVERT_adcs_tracker_2_track_ref_available(self.adcs_tracker_2_track_ref_available)
        except:
            pass
        
        self.adcs_tracker_2_num_bright_stars = getUnsigned(packet[95:96], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[96:97], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[97:98], 'big', 0, 255)
        
        self.adcs_tracker_2_checksum = getUnsigned(packet[98:102], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class ADCS_GPS:
    def __str__(self):
        return 'ADCS_GPS'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_adcs_gps = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_adcs_gps = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.adcs_gps_gps_time = getSigned(packet[6:10], 'big', 0, 4294967295)
        
        self.adcs_gps_gps_position_ecef_0 = getSigned(packet[10:14], 'big', 0, 4294967295)
        try:
            self.adcs_gps_gps_position_ecef_0 = gen_eus.CONVERT_adcs_gps_gps_position_ecef_0(self.adcs_gps_gps_position_ecef_0)
        except:
            pass
        
        self.adcs_gps_gps_position_ecef_1 = getSigned(packet[14:18], 'big', 0, 4294967295)
        try:
            self.adcs_gps_gps_position_ecef_1 = gen_eus.CONVERT_adcs_gps_gps_position_ecef_1(self.adcs_gps_gps_position_ecef_1)
        except:
            pass
        
        self.adcs_gps_gps_position_ecef_2 = getSigned(packet[18:22], 'big', 0, 4294967295)
        try:
            self.adcs_gps_gps_position_ecef_2 = gen_eus.CONVERT_adcs_gps_gps_position_ecef_2(self.adcs_gps_gps_position_ecef_2)
        except:
            pass
        
        self.adcs_gps_gps_velocity_ecef_0 = getSigned(packet[22:26], 'big', 0, 4294967295)
        try:
            self.adcs_gps_gps_velocity_ecef_0 = gen_eus.CONVERT_adcs_gps_gps_velocity_ecef_0(self.adcs_gps_gps_velocity_ecef_0)
        except:
            pass
        
        self.adcs_gps_gps_velocity_ecef_1 = getSigned(packet[26:30], 'big', 0, 4294967295)
        try:
            self.adcs_gps_gps_velocity_ecef_1 = gen_eus.CONVERT_adcs_gps_gps_velocity_ecef_1(self.adcs_gps_gps_velocity_ecef_1)
        except:
            pass
        
        self.adcs_gps_gps_velocity_ecef_2 = getSigned(packet[30:34], 'big', 0, 4294967295)
        try:
            self.adcs_gps_gps_velocity_ecef_2 = gen_eus.CONVERT_adcs_gps_gps_velocity_ecef_2(self.adcs_gps_gps_velocity_ecef_2)
        except:
            pass
        
        self.adcs_gps_gps_solution_time_tag = getUnsigned(packet[34:38], 'big', 0, 4294967295)
        
        self.adcs_gps_gps_cycles_since_crc_data = getUnsigned(packet[38:42], 'big', 0, 4294967295)
        
        self.adcs_gps_gps_cycles_since_latest_data = getUnsigned(packet[42:46], 'big', 0, 4294967295)
        
        self.adcs_gps_gps_lock_count = getUnsigned(packet[46:48], 'big', 0, 65535)
        
        self.adcs_gps_gps_sample_error = getUnsigned(packet[48:49], 'big', 0, 255)
        try:
            self.adcs_gps_gps_sample_error = gen_states.CONVERT_adcs_gps_gps_sample_error(self.adcs_gps_gps_sample_error)
        except:
            pass
        
        self.adcs_gps_msg_gps_temp_1 = getSigned(packet[49:51], 'big', 0, 65535)
        try:
            self.adcs_gps_msg_gps_temp_1 = gen_eus.CONVERT_adcs_gps_msg_gps_temp_1(self.adcs_gps_msg_gps_temp_1)
        except:
            pass
        
        self.adcs_gps_msg_gps_temp_2 = getSigned(packet[51:53], 'big', 0, 65535)
        try:
            self.adcs_gps_msg_gps_temp_2 = gen_eus.CONVERT_adcs_gps_msg_gps_temp_2(self.adcs_gps_msg_gps_temp_2)
        except:
            pass
        
        self.adcs_gps_msg_ant_current = getUnsigned(packet[53:55], 'big', 0, 65535)
        try:
            self.adcs_gps_msg_ant_current = gen_eus.CONVERT_adcs_gps_msg_ant_current(self.adcs_gps_msg_ant_current)
        except:
            pass
        
        self.adcs_gps_msg_ant_voltage = getUnsigned(packet[55:57], 'big', 0, 65535)
        try:
            self.adcs_gps_msg_ant_voltage = gen_eus.CONVERT_adcs_gps_msg_ant_voltage(self.adcs_gps_msg_ant_voltage)
        except:
            pass
        
        self.adcs_gps_msg_gps_voltage_supply = getUnsigned(packet[57:59], 'big', 0, 65535)
        try:
            self.adcs_gps_msg_gps_voltage_supply = gen_eus.CONVERT_adcs_gps_msg_gps_voltage_supply(self.adcs_gps_msg_gps_voltage_supply)
        except:
            pass
        
        self.adcs_gps_msg_gps_voltage_3p_3 = getUnsigned(packet[59:60], 'big', 0, 255)
        try:
            self.adcs_gps_msg_gps_voltage_3p_3 = gen_eus.CONVERT_adcs_gps_msg_gps_voltage_3p_3(self.adcs_gps_msg_gps_voltage_3p_3)
        except:
            pass
        
        self.adcs_gps_msg_gps_voltage_1p_8 = getUnsigned(packet[60:61], 'big', 0, 255)
        try:
            self.adcs_gps_msg_gps_voltage_1p_8 = gen_eus.CONVERT_adcs_gps_msg_gps_voltage_1p_8(self.adcs_gps_msg_gps_voltage_1p_8)
        except:
            pass
        
        self.adcs_gps_msg_gps_voltage_1p_2 = getUnsigned(packet[61:62], 'big', 0, 255)
        try:
            self.adcs_gps_msg_gps_voltage_1p_2 = gen_eus.CONVERT_adcs_gps_msg_gps_voltage_1p_2(self.adcs_gps_msg_gps_voltage_1p_2)
        except:
            pass
        
        self.adcs_gps_msg_tracked_satellites = getUnsigned(packet[62:63], 'big', 0, 255)
        
        self.adcs_gps_msg_used_satellites = getUnsigned(packet[63:64], 'big', 0, 255)
        
        self.adcs_gps_gps_pos_lock = getUnsigned(packet[64:64], 'big', 7, 1)
        try:
            self.adcs_gps_gps_pos_lock = gen_states.CONVERT_adcs_gps_gps_pos_lock(self.adcs_gps_gps_pos_lock)
        except:
            pass
        
        self.adcs_gps_gps_time_lock = getUnsigned(packet[64:64], 'big', 6, 1)
        try:
            self.adcs_gps_gps_time_lock = gen_states.CONVERT_adcs_gps_gps_time_lock(self.adcs_gps_gps_time_lock)
        except:
            pass
        
        self.adcs_gps_msg_data_valid = getUnsigned(packet[64:64], 'big', 5, 1)
        try:
            self.adcs_gps_msg_data_valid = gen_states.CONVERT_adcs_gps_msg_data_valid(self.adcs_gps_msg_data_valid)
        except:
            pass
        
        self.adcs_gps_gps_new_data_recieved = getUnsigned(packet[64:64], 'big', 4, 1)
        try:
            self.adcs_gps_gps_new_data_recieved = gen_states.CONVERT_adcs_gps_gps_new_data_recieved(self.adcs_gps_gps_new_data_recieved)
        except:
            pass
        
        self.adcs_gps_spare0 = getUnsigned(packet[64:64], 'big', 3, 1)
        
        self.adcs_gps_gps_enabled = getUnsigned(packet[64:64], 'big', 2, 1)
        try:
            self.adcs_gps_gps_enabled = gen_states.CONVERT_adcs_gps_gps_enabled(self.adcs_gps_gps_enabled)
        except:
            pass
        
        self.adcs_gps_gps_valid = getUnsigned(packet[64:64], 'big', 1, 1)
        try:
            self.adcs_gps_gps_valid = gen_states.CONVERT_adcs_gps_gps_valid(self.adcs_gps_gps_valid)
        except:
            pass
        
        self.adcs_gps_gps_power_state = getUnsigned(packet[64:64], 'big', 0, 1)
        try:
            self.adcs_gps_gps_power_state = gen_states.CONVERT_adcs_gps_gps_power_state(self.adcs_gps_gps_power_state)
        except:
            pass
        
        self.adcs_gps_gps_supervisor_tripped = getUnsigned(packet[65:66], 'big', 0, 255)
        try:
            self.adcs_gps_gps_supervisor_tripped = gen_states.CONVERT_adcs_gps_gps_supervisor_tripped(self.adcs_gps_gps_supervisor_tripped)
        except:
            pass
        
        self.adcs_gps_checksum = getUnsigned(packet[66:70], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class ADCS_CAL:
    def __str__(self):
        return 'ADCS_CAL'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_adcs_cal = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_adcs_cal = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.adcs_cal_q_tracker_wrt_body_0 = getSigned(packet[6:10], 'big', 0, 4294967295)
        try:
            self.adcs_cal_q_tracker_wrt_body_0 = gen_eus.CONVERT_adcs_cal_q_tracker_wrt_body_0(self.adcs_cal_q_tracker_wrt_body_0)
        except:
            pass
        
        self.adcs_cal_q_tracker_wrt_body_1 = getSigned(packet[10:14], 'big', 0, 4294967295)
        try:
            self.adcs_cal_q_tracker_wrt_body_1 = gen_eus.CONVERT_adcs_cal_q_tracker_wrt_body_1(self.adcs_cal_q_tracker_wrt_body_1)
        except:
            pass
        
        self.adcs_cal_q_tracker_wrt_body_2 = getSigned(packet[14:18], 'big', 0, 4294967295)
        try:
            self.adcs_cal_q_tracker_wrt_body_2 = gen_eus.CONVERT_adcs_cal_q_tracker_wrt_body_2(self.adcs_cal_q_tracker_wrt_body_2)
        except:
            pass
        
        self.adcs_cal_q_tracker_wrt_body_3 = getSigned(packet[18:22], 'big', 0, 4294967295)
        try:
            self.adcs_cal_q_tracker_wrt_body_3 = gen_eus.CONVERT_adcs_cal_q_tracker_wrt_body_3(self.adcs_cal_q_tracker_wrt_body_3)
        except:
            pass
        
        self.adcs_cal_q_tracker_wrt_body_4 = getSigned(packet[22:26], 'big', 0, 4294967295)
        try:
            self.adcs_cal_q_tracker_wrt_body_4 = gen_eus.CONVERT_adcs_cal_q_tracker_wrt_body_4(self.adcs_cal_q_tracker_wrt_body_4)
        except:
            pass
        
        self.adcs_cal_q_tracker_wrt_body_5 = getSigned(packet[26:30], 'big', 0, 4294967295)
        try:
            self.adcs_cal_q_tracker_wrt_body_5 = gen_eus.CONVERT_adcs_cal_q_tracker_wrt_body_5(self.adcs_cal_q_tracker_wrt_body_5)
        except:
            pass
        
        self.adcs_cal_q_tracker_wrt_body_6 = getSigned(packet[30:34], 'big', 0, 4294967295)
        try:
            self.adcs_cal_q_tracker_wrt_body_6 = gen_eus.CONVERT_adcs_cal_q_tracker_wrt_body_6(self.adcs_cal_q_tracker_wrt_body_6)
        except:
            pass
        
        self.adcs_cal_q_tracker_wrt_body_7 = getSigned(packet[34:38], 'big', 0, 4294967295)
        try:
            self.adcs_cal_q_tracker_wrt_body_7 = gen_eus.CONVERT_adcs_cal_q_tracker_wrt_body_7(self.adcs_cal_q_tracker_wrt_body_7)
        except:
            pass
        
        self.adcs_cal_q_tracker_wrt_body_est_0 = getSigned(packet[38:42], 'big', 0, 4294967295)
        try:
            self.adcs_cal_q_tracker_wrt_body_est_0 = gen_eus.CONVERT_adcs_cal_q_tracker_wrt_body_est_0(self.adcs_cal_q_tracker_wrt_body_est_0)
        except:
            pass
        
        self.adcs_cal_q_tracker_wrt_body_est_1 = getSigned(packet[42:46], 'big', 0, 4294967295)
        try:
            self.adcs_cal_q_tracker_wrt_body_est_1 = gen_eus.CONVERT_adcs_cal_q_tracker_wrt_body_est_1(self.adcs_cal_q_tracker_wrt_body_est_1)
        except:
            pass
        
        self.adcs_cal_q_tracker_wrt_body_est_2 = getSigned(packet[46:50], 'big', 0, 4294967295)
        try:
            self.adcs_cal_q_tracker_wrt_body_est_2 = gen_eus.CONVERT_adcs_cal_q_tracker_wrt_body_est_2(self.adcs_cal_q_tracker_wrt_body_est_2)
        except:
            pass
        
        self.adcs_cal_q_tracker_wrt_body_est_3 = getSigned(packet[50:54], 'big', 0, 4294967295)
        try:
            self.adcs_cal_q_tracker_wrt_body_est_3 = gen_eus.CONVERT_adcs_cal_q_tracker_wrt_body_est_3(self.adcs_cal_q_tracker_wrt_body_est_3)
        except:
            pass
        
        self.adcs_cal_q_tracker_wrt_body_est_4 = getSigned(packet[54:58], 'big', 0, 4294967295)
        try:
            self.adcs_cal_q_tracker_wrt_body_est_4 = gen_eus.CONVERT_adcs_cal_q_tracker_wrt_body_est_4(self.adcs_cal_q_tracker_wrt_body_est_4)
        except:
            pass
        
        self.adcs_cal_q_tracker_wrt_body_est_5 = getSigned(packet[58:62], 'big', 0, 4294967295)
        try:
            self.adcs_cal_q_tracker_wrt_body_est_5 = gen_eus.CONVERT_adcs_cal_q_tracker_wrt_body_est_5(self.adcs_cal_q_tracker_wrt_body_est_5)
        except:
            pass
        
        self.adcs_cal_q_tracker_wrt_body_est_6 = getSigned(packet[62:66], 'big', 0, 4294967295)
        try:
            self.adcs_cal_q_tracker_wrt_body_est_6 = gen_eus.CONVERT_adcs_cal_q_tracker_wrt_body_est_6(self.adcs_cal_q_tracker_wrt_body_est_6)
        except:
            pass
        
        self.adcs_cal_q_tracker_wrt_body_est_7 = getSigned(packet[66:70], 'big', 0, 4294967295)
        try:
            self.adcs_cal_q_tracker_wrt_body_est_7 = gen_eus.CONVERT_adcs_cal_q_tracker_wrt_body_est_7(self.adcs_cal_q_tracker_wrt_body_est_7)
        except:
            pass
        
        self.adcs_cal_tracker_align_used_res_0 = getSigned(packet[70:74], 'big', 0, 4294967295)
        try:
            self.adcs_cal_tracker_align_used_res_0 = gen_eus.CONVERT_adcs_cal_tracker_align_used_res_0(self.adcs_cal_tracker_align_used_res_0)
        except:
            pass
        
        self.adcs_cal_tracker_align_used_res_1 = getSigned(packet[74:78], 'big', 0, 4294967295)
        try:
            self.adcs_cal_tracker_align_used_res_1 = gen_eus.CONVERT_adcs_cal_tracker_align_used_res_1(self.adcs_cal_tracker_align_used_res_1)
        except:
            pass
        
        self.adcs_cal_tracker_align_used_res_2 = getSigned(packet[78:82], 'big', 0, 4294967295)
        try:
            self.adcs_cal_tracker_align_used_res_2 = gen_eus.CONVERT_adcs_cal_tracker_align_used_res_2(self.adcs_cal_tracker_align_used_res_2)
        except:
            pass
        
        self.adcs_cal_tracker_align_est_res_0 = getSigned(packet[82:86], 'big', 0, 4294967295)
        try:
            self.adcs_cal_tracker_align_est_res_0 = gen_eus.CONVERT_adcs_cal_tracker_align_est_res_0(self.adcs_cal_tracker_align_est_res_0)
        except:
            pass
        
        self.adcs_cal_tracker_align_est_res_1 = getSigned(packet[86:90], 'big', 0, 4294967295)
        try:
            self.adcs_cal_tracker_align_est_res_1 = gen_eus.CONVERT_adcs_cal_tracker_align_est_res_1(self.adcs_cal_tracker_align_est_res_1)
        except:
            pass
        
        self.adcs_cal_tracker_align_est_res_2 = getSigned(packet[90:94], 'big', 0, 4294967295)
        try:
            self.adcs_cal_tracker_align_est_res_2 = gen_eus.CONVERT_adcs_cal_tracker_align_est_res_2(self.adcs_cal_tracker_align_est_res_2)
        except:
            pass
        
        self.adcs_cal_rejected_tracker_est_count = getUnsigned(packet[94:98], 'big', 0, 4294967295)
        
        self.adcs_cal_tracker_n = getUnsigned(packet[98:100], 'big', 0, 65535)
        
        self.adcs_cal_tracker_align_method = getUnsigned(packet[100:101], 'big', 0, 255)
        try:
            self.adcs_cal_tracker_align_method = gen_states.CONVERT_adcs_cal_tracker_align_method(self.adcs_cal_tracker_align_method)
        except:
            pass
        
        self.adcs_cal_tracker_align_usage = getUnsigned(packet[101:102], 'big', 0, 255)
        try:
            self.adcs_cal_tracker_align_usage = gen_states.CONVERT_adcs_cal_tracker_align_usage(self.adcs_cal_tracker_align_usage)
        except:
            pass
        
        self.adcs_cal_checksum = getUnsigned(packet[102:106], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class ADCS_TRACKER_CTRL:
    def __str__(self):
        return 'ADCS_TRACKER_CTRL'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_adcs_tracker_ctrl = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_adcs_tracker_ctrl = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.adcs_tracker_ctrl_q_body_wrt_eci_0 = getSigned(packet[6:10], 'big', 0, 4294967295)
        try:
            self.adcs_tracker_ctrl_q_body_wrt_eci_0 = gen_eus.CONVERT_adcs_tracker_ctrl_q_body_wrt_eci_0(self.adcs_tracker_ctrl_q_body_wrt_eci_0)
        except:
            pass
        
        self.adcs_tracker_ctrl_q_body_wrt_eci_1 = getSigned(packet[10:14], 'big', 0, 4294967295)
        try:
            self.adcs_tracker_ctrl_q_body_wrt_eci_1 = gen_eus.CONVERT_adcs_tracker_ctrl_q_body_wrt_eci_1(self.adcs_tracker_ctrl_q_body_wrt_eci_1)
        except:
            pass
        
        self.adcs_tracker_ctrl_q_body_wrt_eci_2 = getSigned(packet[14:18], 'big', 0, 4294967295)
        try:
            self.adcs_tracker_ctrl_q_body_wrt_eci_2 = gen_eus.CONVERT_adcs_tracker_ctrl_q_body_wrt_eci_2(self.adcs_tracker_ctrl_q_body_wrt_eci_2)
        except:
            pass
        
        self.adcs_tracker_ctrl_q_body_wrt_eci_3 = getSigned(packet[18:22], 'big', 0, 4294967295)
        try:
            self.adcs_tracker_ctrl_q_body_wrt_eci_3 = gen_eus.CONVERT_adcs_tracker_ctrl_q_body_wrt_eci_3(self.adcs_tracker_ctrl_q_body_wrt_eci_3)
        except:
            pass
        
        self.adcs_tracker_ctrl_q_body_wrt_eci_4 = getSigned(packet[22:26], 'big', 0, 4294967295)
        try:
            self.adcs_tracker_ctrl_q_body_wrt_eci_4 = gen_eus.CONVERT_adcs_tracker_ctrl_q_body_wrt_eci_4(self.adcs_tracker_ctrl_q_body_wrt_eci_4)
        except:
            pass
        
        self.adcs_tracker_ctrl_q_body_wrt_eci_5 = getSigned(packet[26:30], 'big', 0, 4294967295)
        try:
            self.adcs_tracker_ctrl_q_body_wrt_eci_5 = gen_eus.CONVERT_adcs_tracker_ctrl_q_body_wrt_eci_5(self.adcs_tracker_ctrl_q_body_wrt_eci_5)
        except:
            pass
        
        self.adcs_tracker_ctrl_q_body_wrt_eci_6 = getSigned(packet[30:34], 'big', 0, 4294967295)
        try:
            self.adcs_tracker_ctrl_q_body_wrt_eci_6 = gen_eus.CONVERT_adcs_tracker_ctrl_q_body_wrt_eci_6(self.adcs_tracker_ctrl_q_body_wrt_eci_6)
        except:
            pass
        
        self.adcs_tracker_ctrl_q_body_wrt_eci_7 = getSigned(packet[34:38], 'big', 0, 4294967295)
        try:
            self.adcs_tracker_ctrl_q_body_wrt_eci_7 = gen_eus.CONVERT_adcs_tracker_ctrl_q_body_wrt_eci_7(self.adcs_tracker_ctrl_q_body_wrt_eci_7)
        except:
            pass
        
        self.adcs_tracker_ctrl_tracker_att_valid0 = getUnsigned(packet[38:39], 'big', 0, 255)
        try:
            self.adcs_tracker_ctrl_tracker_att_valid0 = gen_states.CONVERT_adcs_tracker_ctrl_tracker_att_valid0(self.adcs_tracker_ctrl_tracker_att_valid0)
        except:
            pass
        
        self.adcs_tracker_ctrl_tracker_att_valid1 = getUnsigned(packet[39:40], 'big', 0, 255)
        try:
            self.adcs_tracker_ctrl_tracker_att_valid1 = gen_states.CONVERT_adcs_tracker_ctrl_tracker_att_valid1(self.adcs_tracker_ctrl_tracker_att_valid1)
        except:
            pass
        
        self.adcs_tracker_ctrl_tracker_usage_enabled0 = getUnsigned(packet[40:41], 'big', 0, 255)
        try:
            self.adcs_tracker_ctrl_tracker_usage_enabled0 = gen_states.CONVERT_adcs_tracker_ctrl_tracker_usage_enabled0(self.adcs_tracker_ctrl_tracker_usage_enabled0)
        except:
            pass
        
        self.adcs_tracker_ctrl_tracker_usage_enabled1 = getUnsigned(packet[41:42], 'big', 0, 255)
        try:
            self.adcs_tracker_ctrl_tracker_usage_enabled1 = gen_states.CONVERT_adcs_tracker_ctrl_tracker_usage_enabled1(self.adcs_tracker_ctrl_tracker_usage_enabled1)
        except:
            pass
        
        self.adcs_tracker_ctrl_aid_status0 = getUnsigned(packet[42:43], 'big', 0, 255)
        
        self.adcs_tracker_ctrl_aid_status1 = getUnsigned(packet[43:44], 'big', 0, 255)
        
        self.adcs_tracker_ctrl_cycles_since_valid_nst_sol = getUnsigned(packet[44:48], 'big', 0, 4294967295)
        
        self.adcs_tracker_ctrl_cycles_since_valid_nst_data = getUnsigned(packet[48:52], 'big', 0, 4294967295)
        
        self.adcs_tracker_ctrl_nst_reset_count = getUnsigned(packet[52:54], 'big', 0, 65535)
        
        self.adcs_tracker_ctrl_nst_att_available_2 = getUnsigned(packet[54:54], 'big', 7, 1)
        try:
            self.adcs_tracker_ctrl_nst_att_available_2 = gen_states.CONVERT_adcs_tracker_ctrl_nst_att_available_2(self.adcs_tracker_ctrl_nst_att_available_2)
        except:
            pass
        
        self.adcs_tracker_ctrl_nst_att_timing_2 = getUnsigned(packet[54:54], 'big', 6, 1)
        try:
            self.adcs_tracker_ctrl_nst_att_timing_2 = gen_states.CONVERT_adcs_tracker_ctrl_nst_att_timing_2(self.adcs_tracker_ctrl_nst_att_timing_2)
        except:
            pass
        
        self.adcs_tracker_ctrl_nst_valid_att_2 = getUnsigned(packet[54:54], 'big', 5, 1)
        try:
            self.adcs_tracker_ctrl_nst_valid_att_2 = gen_states.CONVERT_adcs_tracker_ctrl_nst_valid_att_2(self.adcs_tracker_ctrl_nst_valid_att_2)
        except:
            pass
        
        self.adcs_tracker_ctrl_nst_data_valid_2 = getUnsigned(packet[54:54], 'big', 4, 1)
        try:
            self.adcs_tracker_ctrl_nst_data_valid_2 = gen_states.CONVERT_adcs_tracker_ctrl_nst_data_valid_2(self.adcs_tracker_ctrl_nst_data_valid_2)
        except:
            pass
        
        self.adcs_tracker_ctrl_nst_data_integrity_2 = getUnsigned(packet[54:54], 'big', 3, 1)
        try:
            self.adcs_tracker_ctrl_nst_data_integrity_2 = gen_states.CONVERT_adcs_tracker_ctrl_nst_data_integrity_2(self.adcs_tracker_ctrl_nst_data_integrity_2)
        except:
            pass
        
        self.adcs_tracker_ctrl_nst_new_data_recieved_2 = getUnsigned(packet[54:54], 'big', 2, 1)
        try:
            self.adcs_tracker_ctrl_nst_new_data_recieved_2 = gen_states.CONVERT_adcs_tracker_ctrl_nst_new_data_recieved_2(self.adcs_tracker_ctrl_nst_new_data_recieved_2)
        except:
            pass
        
        self.adcs_tracker_ctrl_nst_power_state_2 = getUnsigned(packet[54:54], 'big', 1, 1)
        try:
            self.adcs_tracker_ctrl_nst_power_state_2 = gen_states.CONVERT_adcs_tracker_ctrl_nst_power_state_2(self.adcs_tracker_ctrl_nst_power_state_2)
        except:
            pass
        
        self.adcs_tracker_ctrl_desired_nst_power_state_2 = getUnsigned(packet[54:54], 'big', 0, 1)
        try:
            self.adcs_tracker_ctrl_desired_nst_power_state_2 = gen_states.CONVERT_adcs_tracker_ctrl_desired_nst_power_state_2(self.adcs_tracker_ctrl_desired_nst_power_state_2)
        except:
            pass
        
        self.adcs_ctrl_nst_sup_reinit_performed_2 = getUnsigned(packet[55:55], 'big', 7, 1)
        try:
            self.adcs_ctrl_nst_sup_reinit_performed_2 = gen_states.CONVERT_adcs_ctrl_nst_sup_reinit_performed_2(self.adcs_ctrl_nst_sup_reinit_performed_2)
        except:
            pass
        
        self.adcs_ctrl_nst_sup_no_att_2 = getUnsigned(packet[55:55], 'big', 6, 1)
        try:
            self.adcs_ctrl_nst_sup_no_att_2 = gen_states.CONVERT_adcs_ctrl_nst_sup_no_att_2(self.adcs_ctrl_nst_sup_no_att_2)
        except:
            pass
        
        self.adcs_ctrl_nst_sup_max_resets_2 = getUnsigned(packet[55:55], 'big', 5, 1)
        try:
            self.adcs_ctrl_nst_sup_max_resets_2 = gen_states.CONVERT_adcs_ctrl_nst_sup_max_resets_2(self.adcs_ctrl_nst_sup_max_resets_2)
        except:
            pass
        
        self.adcs_ctrl_nst_sup_stale_data_2 = getUnsigned(packet[55:55], 'big', 4, 1)
        try:
            self.adcs_ctrl_nst_sup_stale_data_2 = gen_states.CONVERT_adcs_ctrl_nst_sup_stale_data_2(self.adcs_ctrl_nst_sup_stale_data_2)
        except:
            pass
        
        self.adcs_ctrl_nst_sup_max_reinits_2 = getUnsigned(packet[55:55], 'big', 3, 1)
        try:
            self.adcs_ctrl_nst_sup_max_reinits_2 = gen_states.CONVERT_adcs_ctrl_nst_sup_max_reinits_2(self.adcs_ctrl_nst_sup_max_reinits_2)
        except:
            pass
        
        self.adcs_ctrl_nst_sup_allow_reinits_2 = getUnsigned(packet[55:55], 'big', 2, 1)
        try:
            self.adcs_ctrl_nst_sup_allow_reinits_2 = gen_states.CONVERT_adcs_ctrl_nst_sup_allow_reinits_2(self.adcs_ctrl_nst_sup_allow_reinits_2)
        except:
            pass
        
        self.adcs_ctrl_pkt_nst_sup_active_2 = getUnsigned(packet[55:55], 'big', 1, 1)
        try:
            self.adcs_ctrl_pkt_nst_sup_active_2 = gen_states.CONVERT_adcs_ctrl_pkt_nst_sup_active_2(self.adcs_ctrl_pkt_nst_sup_active_2)
        except:
            pass
        
        self.adcs_ctrl_pkt_nst_sup_enabled_2 = getUnsigned(packet[55:55], 'big', 0, 1)
        try:
            self.adcs_ctrl_pkt_nst_sup_enabled_2 = gen_states.CONVERT_adcs_ctrl_pkt_nst_sup_enabled_2(self.adcs_ctrl_pkt_nst_sup_enabled_2)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[56:57], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[57:58], 'big', 0, 255)
        
        self.adcs_tracker_ctrl_checksum = getUnsigned(packet[58:62], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class ADCS_EXT_TRACKER_2:
    def __str__(self):
        return 'ADCS_EXT_TRACKER_2'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_adcs_ext_tracker_2 = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_adcs_ext_tracker_2 = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.adcs_ext_tracker_2_l0_0_0 = getUnsigned(packet[6:7], 'big', 0, 255)
        
        self.adcs_ext_tracker_2_l0_0_1 = getUnsigned(packet[7:8], 'big', 0, 255)
        
        self.adcs_ext_tracker_2_l0_0_2 = getUnsigned(packet[8:9], 'big', 0, 255)
        
        self.adcs_ext_tracker_2_l0_0_3 = getUnsigned(packet[9:10], 'big', 0, 255)
        
        self.adcs_ext_tracker_2_l0_0_4 = getUnsigned(packet[10:11], 'big', 0, 255)
        
        self.adcs_ext_tracker_2_l0_0_5 = getUnsigned(packet[11:12], 'big', 0, 255)
        
        self.adcs_ext_tracker_2_l0_0_6 = getUnsigned(packet[12:13], 'big', 0, 255)
        
        self.adcs_ext_tracker_2_l0_0_7 = getUnsigned(packet[13:14], 'big', 0, 255)
        
        self.adcs_ext_tracker_2_l0_0_8 = getUnsigned(packet[14:15], 'big', 0, 255)
        
        self.adcs_ext_tracker_2_l0_0_9 = getUnsigned(packet[15:16], 'big', 0, 255)
        
        self.adcs_ext_tracker_2_l0_0_10 = getUnsigned(packet[16:17], 'big', 0, 255)
        
        self.adcs_ext_tracker_2_l0_0_11 = getUnsigned(packet[17:18], 'big', 0, 255)
        
        self.adcs_ext_tracker_2_l0_0_12 = getUnsigned(packet[18:19], 'big', 0, 255)
        
        self.adcs_ext_tracker_2_l0_0_13 = getUnsigned(packet[19:20], 'big', 0, 255)
        
        self.adcs_ext_tracker_2_l0_0_14 = getUnsigned(packet[20:21], 'big', 0, 255)
        
        self.adcs_ext_tracker_2_l0_0_15 = getUnsigned(packet[21:22], 'big', 0, 255)
        
        self.adcs_ext_tracker_2_l0_0_16 = getUnsigned(packet[22:23], 'big', 0, 255)
        
        self.adcs_ext_tracker_2_l0_0_17 = getUnsigned(packet[23:24], 'big', 0, 255)
        
        self.adcs_ext_tracker_2_l0_0_18 = getUnsigned(packet[24:25], 'big', 0, 255)
        
        self.adcs_ext_tracker_2_l0_0_19 = getUnsigned(packet[25:26], 'big', 0, 255)
        
        self.adcs_ext_tracker_2_l0_0_20 = getUnsigned(packet[26:27], 'big', 0, 255)
        
        self.adcs_ext_tracker_2_l0_0_21 = getUnsigned(packet[27:28], 'big', 0, 255)
        
        self.adcs_ext_tracker_2_l0_0_22 = getUnsigned(packet[28:29], 'big', 0, 255)
        
        self.adcs_ext_tracker_2_l0_0_23 = getUnsigned(packet[29:30], 'big', 0, 255)
        
        self.adcs_ext_tracker_2_l0_0_24 = getUnsigned(packet[30:31], 'big', 0, 255)
        
        self.adcs_ext_tracker_2_l0_0_25 = getUnsigned(packet[31:32], 'big', 0, 255)
        
        self.adcs_ext_tracker_2_l0_0_26 = getUnsigned(packet[32:33], 'big', 0, 255)
        
        self.adcs_ext_tracker_2_l0_0_27 = getUnsigned(packet[33:34], 'big', 0, 255)
        
        self.adcs_ext_tracker_2_l0_0_28 = getUnsigned(packet[34:35], 'big', 0, 255)
        
        self.adcs_ext_tracker_2_l0_0_29 = getUnsigned(packet[35:36], 'big', 0, 255)
        
        self.adcs_ext_tracker_2_l0_0_30 = getUnsigned(packet[36:37], 'big', 0, 255)
        
        self.adcs_ext_tracker_2_l0_0_31 = getUnsigned(packet[37:38], 'big', 0, 255)
        
        self.adcs_ext_tracker_2_cmd_status = getUnsigned(packet[38:39], 'big', 0, 255)
        try:
            self.adcs_ext_tracker_2_cmd_status = gen_states.CONVERT_adcs_ext_tracker_2_cmd_status(self.adcs_ext_tracker_2_cmd_status)
        except:
            pass
        
        self.adcs_ext_tracker_2_cmd_reject_status = getUnsigned(packet[39:40], 'big', 0, 255)
        try:
            self.adcs_ext_tracker_2_cmd_reject_status = gen_states.CONVERT_adcs_ext_tracker_2_cmd_reject_status(self.adcs_ext_tracker_2_cmd_reject_status)
        except:
            pass
        
        self.adcs_ext_tracker_2_cmd_accept_count = getUnsigned(packet[40:41], 'big', 0, 255)
        
        self.adcs_ext_tracker_2_cmd_reject_count = getUnsigned(packet[41:42], 'big', 0, 255)
        
        self.adcs_ext_tracker_2_last_acc_cmd_bytes_0 = getUnsigned(packet[42:43], 'big', 0, 255)
        
        self.adcs_ext_tracker_2_last_acc_cmd_bytes_1 = getUnsigned(packet[43:44], 'big', 0, 255)
        
        self.adcs_ext_tracker_2_last_rej_cmd_bytes_0 = getUnsigned(packet[44:45], 'big', 0, 255)
        
        self.adcs_ext_tracker_2_last_rej_cmd_bytes_1 = getUnsigned(packet[45:46], 'big', 0, 255)
        
        self.adcs_ext_tracker_2_software_version_0 = getUnsigned(packet[46:50], 'big', 0, 4294967295)
        
        self.adcs_ext_tracker_2_software_version_1 = getUnsigned(packet[50:54], 'big', 0, 4294967295)
        
        self.adcs_ext_tracker_2_counts_per_sec = getUnsigned(packet[54:58], 'big', 0, 4294967295)
        
        self.adcs_ext_tracker_2_hr_run_count = getUnsigned(packet[58:62], 'big', 0, 4294967295)
        
        self.adcs_ext_tracker_2_hr_time_usec = getUnsigned(packet[62:66], 'big', 0, 4294967295)
        
        self.adcs_ext_tracker_2_cycles_since_pps = getUnsigned(packet[66:70], 'big', 0, 4294967295)
        
        self.adcs_ext_tracker_2_hr_exec_time_ms_0 = getUnsigned(packet[70:71], 'big', 0, 255)
        
        self.adcs_ext_tracker_2_hr_exec_time_ms_1 = getUnsigned(packet[71:72], 'big', 0, 255)
        
        self.adcs_ext_tracker_2_hr_exec_time_ms_2 = getUnsigned(packet[72:73], 'big', 0, 255)
        
        self.adcs_ext_tracker_2_hr_exec_time_ms_3 = getUnsigned(packet[73:74], 'big', 0, 255)
        
        self.adcs_ext_tracker_2_hr_exec_time_ms_4 = getUnsigned(packet[74:75], 'big', 0, 255)
        
        self.adcs_ext_tracker_2_voltage_2p_5 = getUnsigned(packet[75:76], 'big', 0, 255)
        try:
            self.adcs_ext_tracker_2_voltage_2p_5 = gen_eus.CONVERT_adcs_ext_tracker_2_voltage_2p_5(self.adcs_ext_tracker_2_voltage_2p_5)
        except:
            pass
        
        self.adcs_ext_tracker_2_voltage_1p_8 = getUnsigned(packet[76:77], 'big', 0, 255)
        try:
            self.adcs_ext_tracker_2_voltage_1p_8 = gen_eus.CONVERT_adcs_ext_tracker_2_voltage_1p_8(self.adcs_ext_tracker_2_voltage_1p_8)
        except:
            pass
        
        self.adcs_ext_tracker_2_voltage_1p_2 = getUnsigned(packet[77:78], 'big', 0, 255)
        try:
            self.adcs_ext_tracker_2_voltage_1p_2 = gen_eus.CONVERT_adcs_ext_tracker_2_voltage_1p_2(self.adcs_ext_tracker_2_voltage_1p_2)
        except:
            pass
        
        self.adcs_ext_tracker_2_det_temp = getSigned(packet[78:79], 'big', 0, 255)
        try:
            self.adcs_ext_tracker_2_det_temp = gen_eus.CONVERT_adcs_ext_tracker_2_det_temp(self.adcs_ext_tracker_2_det_temp)
        except:
            pass
        
        self.adcs_ext_tracker_2_digital_bus_v = getSigned(packet[79:81], 'big', 0, 65535)
        try:
            self.adcs_ext_tracker_2_digital_bus_v = gen_eus.CONVERT_adcs_ext_tracker_2_digital_bus_v(self.adcs_ext_tracker_2_digital_bus_v)
        except:
            pass
        
        self.adcs_ext_tracker_2_ext_lv_bus_v = getSigned(packet[81:83], 'big', 0, 65535)
        try:
            self.adcs_ext_tracker_2_ext_lv_bus_v = gen_eus.CONVERT_adcs_ext_tracker_2_ext_lv_bus_v(self.adcs_ext_tracker_2_ext_lv_bus_v)
        except:
            pass
        
        self.adcs_ext_tracker_2_length_32 = getUnsigned(packet[83:87], 'big', 0, 4294967295)
        
        self.adcs_ext_tracker_2_offset_32 = getUnsigned(packet[87:91], 'big', 0, 4294967295)
        
        self.adcs_ext_tracker_2_table_checksum = getUnsigned(packet[91:93], 'big', 0, 65535)
        
        self.adcs_ext_tracker_2_table_upload_status = getUnsigned(packet[93:94], 'big', 0, 255)
        try:
            self.adcs_ext_tracker_2_table_upload_status = gen_states.CONVERT_adcs_ext_tracker_2_table_upload_status(self.adcs_ext_tracker_2_table_upload_status)
        except:
            pass
        
        self.adcs_ext_tracker_2_which_table = getUnsigned(packet[94:95], 'big', 0, 255)
        
        self.adcs_ext_tracker_2_image = getUnsigned(packet[95:96], 'big', 0, 255)
        
        self.adcs_ext_tracker_2_flash_burn_armed = getUnsigned(packet[96:97], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[97:98], 'big', 0, 255)
        
        self.adcs_ext_tracker_2_checksum = getUnsigned(packet[98:102], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class EPS_HK:
    def __str__(self):
        return 'EPS_HK'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_eps_hk = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_eps_hk = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.eps_deploy_time = getUnsigned(packet[6:10], 'big', 0, 4294967295)
        
        self.eps_deploy_select = getUnsigned(packet[10:14], 'big', 0, 4294967295)
        try:
            self.eps_deploy_select = gen_states.CONVERT_eps_deploy_select(self.eps_deploy_select)
        except:
            pass
        
        self.REUSABLE_SPARE_1 = getUnsigned(packet[14:14], 'big', 7, 1)
        try:
            self.REUSABLE_SPARE_1 = gen_states.CONVERT_REUSABLE_SPARE_1(self.REUSABLE_SPARE_1)
        except:
            pass
        
        self.eps_pwr_state_inst4 = getUnsigned(packet[14:14], 'big', 6, 1)
        try:
            self.eps_pwr_state_inst4 = gen_states.CONVERT_eps_pwr_state_inst4(self.eps_pwr_state_inst4)
        except:
            pass
        
        self.eps_pwr_state_inst3 = getUnsigned(packet[14:14], 'big', 5, 1)
        try:
            self.eps_pwr_state_inst3 = gen_states.CONVERT_eps_pwr_state_inst3(self.eps_pwr_state_inst3)
        except:
            pass
        
        self.eps_pwr_state_dsps = getUnsigned(packet[14:14], 'big', 4, 1)
        try:
            self.eps_pwr_state_dsps = gen_states.CONVERT_eps_pwr_state_dsps(self.eps_pwr_state_dsps)
        except:
            pass
        
        self.eps_pwr_state_csie = getUnsigned(packet[14:14], 'big', 3, 1)
        try:
            self.eps_pwr_state_csie = gen_states.CONVERT_eps_pwr_state_csie(self.eps_pwr_state_csie)
        except:
            pass
        
        self.eps_pwr_state_xband = getUnsigned(packet[14:14], 'big', 2, 1)
        try:
            self.eps_pwr_state_xband = gen_states.CONVERT_eps_pwr_state_xband(self.eps_pwr_state_xband)
        except:
            pass
        
        self.eps_pwr_state_uhf = getUnsigned(packet[14:14], 'big', 1, 1)
        try:
            self.eps_pwr_state_uhf = gen_states.CONVERT_eps_pwr_state_uhf(self.eps_pwr_state_uhf)
        except:
            pass
        
        self.eps_pwr_state_adcs = getUnsigned(packet[14:14], 'big', 0, 1)
        try:
            self.eps_pwr_state_adcs = gen_states.CONVERT_eps_pwr_state_adcs(self.eps_pwr_state_adcs)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[15:16], 'big', 0, 255)
        
        self.REUSABLE_SPARE_16 = getUnsigned(packet[16:18], 'big', 0, 65535)
        
        self.eps_can_sent_count = getUnsigned(packet[18:20], 'big', 0, 65535)
        
        self.eps_can_recv_count = getUnsigned(packet[20:22], 'big', 0, 65535)
        
        self.eps_can_err_count = getUnsigned(packet[22:24], 'big', 0, 65535)
        
        self.eps_bat_fmt_err = getUnsigned(packet[24:26], 'big', 0, 65535)
        
        self.eps_can_frame_err = getUnsigned(packet[26:28], 'big', 0, 65535)
        
        self.eps_can_unknown_err = getUnsigned(packet[28:30], 'big', 0, 65535)
        
        self.eps_can_state_err = getUnsigned(packet[30:32], 'big', 0, 65535)
        
        self.eps_can_rx_over = getUnsigned(packet[32:34], 'big', 0, 65535)
        
        self.eps_can_tx_over = getUnsigned(packet[34:36], 'big', 0, 65535)
        
        self.REUSABLE_SPARE_6 = getUnsigned(packet[36:36], 'big', 2, 63)
        
        self.eps_bat_tlm_state_1 = getUnsigned(packet[36:36], 'big', 1, 1)
        try:
            self.eps_bat_tlm_state_1 = gen_states.CONVERT_eps_bat_tlm_state_1(self.eps_bat_tlm_state_1)
        except:
            pass
        
        self.eps_bat_tlm_state_0 = getUnsigned(packet[36:36], 'big', 0, 1)
        try:
            self.eps_bat_tlm_state_0 = gen_states.CONVERT_eps_bat_tlm_state_0(self.eps_bat_tlm_state_0)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[37:38], 'big', 0, 255)
        
        self.eps_bat_csp_err = getUnsigned(packet[38:40], 'big', 0, 65535)
        
        self.eps_bat_param_err = getUnsigned(packet[40:42], 'big', 0, 65535)
        
        self.eps_bat_time_cnt = getUnsigned(packet[42:44], 'big', 0, 65535)
        
        self.eps_bat_tlm_cnt = getUnsigned(packet[44:46], 'big', 0, 65535)
        
        self.eps_bat_unkown_cnt = getUnsigned(packet[46:48], 'big', 0, 65535)
        
        self.eps_bat_alive = getUnsigned(packet[48:49], 'big', 0, 255)
        try:
            self.eps_bat_alive = gen_states.CONVERT_eps_bat_alive(self.eps_bat_alive)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[49:50], 'big', 0, 255)
        
        self.eps_bat_time_sec = getUnsigned(packet[50:54], 'big', 0, 4294967295)
        
        self.eps_bat_time_ns = getUnsigned(packet[54:58], 'big', 0, 4294967295)
        
        self.eps_bat_time_recv = getUnsigned(packet[58:62], 'big', 0, 4294967295)
        
        self.eps_hk_checksum = getUnsigned(packet[62:66], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class ANA_HK:
    def __str__(self):
        return 'ANA_HK'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_ana_hk = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_ana_hk = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.ana_bus_v = getUnsigned(packet[6:8], 'big', 0, 65535)
        try:
            self.ana_bus_v = gen_eus.CONVERT_ana_bus_v(self.ana_bus_v)
        except:
            pass
        
        self.ana_3p3_v = getUnsigned(packet[8:10], 'big', 0, 65535)
        try:
            self.ana_3p3_v = gen_eus.CONVERT_ana_3p3_v(self.ana_3p3_v)
        except:
            pass
        
        self.ana_2p5_v = getUnsigned(packet[10:12], 'big', 0, 65535)
        try:
            self.ana_2p5_v = gen_eus.CONVERT_ana_2p5_v(self.ana_2p5_v)
        except:
            pass
        
        self.ana_1p8_v = getUnsigned(packet[12:14], 'big', 0, 65535)
        try:
            self.ana_1p8_v = gen_eus.CONVERT_ana_1p8_v(self.ana_1p8_v)
        except:
            pass
        
        self.ana_1p0_v = getUnsigned(packet[14:16], 'big', 0, 65535)
        try:
            self.ana_1p0_v = gen_eus.CONVERT_ana_1p0_v(self.ana_1p0_v)
        except:
            pass
        
        self.ana_3p3_i = getUnsigned(packet[16:18], 'big', 0, 65535)
        try:
            self.ana_3p3_i = gen_eus.CONVERT_ana_3p3_i(self.ana_3p3_i)
        except:
            pass
        
        self.ana_1p8_i = getUnsigned(packet[18:20], 'big', 0, 65535)
        try:
            self.ana_1p8_i = gen_eus.CONVERT_ana_1p8_i(self.ana_1p8_i)
        except:
            pass
        
        self.ana_1p0_i = getUnsigned(packet[20:22], 'big', 0, 65535)
        try:
            self.ana_1p0_i = gen_eus.CONVERT_ana_1p0_i(self.ana_1p0_i)
        except:
            pass
        
        self.ana_cdh_temp = getUnsigned(packet[22:24], 'big', 0, 65535)
        try:
            self.ana_cdh_temp = gen_eus.CONVERT_ana_cdh_temp(self.ana_cdh_temp)
        except:
            pass
        
        self.cdhSpare1 = getUnsigned(packet[24:26], 'big', 0, 65535)
        
        self.cdhSpare2 = getUnsigned(packet[26:28], 'big', 0, 65535)
        
        self.unused1 = getUnsigned(packet[28:30], 'big', 0, 65535)
        
        self.unused2 = getUnsigned(packet[30:32], 'big', 0, 65535)
        
        self.unused3 = getUnsigned(packet[32:34], 'big', 0, 65535)
        
        self.unused4 = getUnsigned(packet[34:36], 'big', 0, 65535)
        
        self.ana_cdh_3p3_ref = getUnsigned(packet[36:38], 'big', 0, 65535)
        try:
            self.ana_cdh_3p3_ref = gen_eus.CONVERT_ana_cdh_3p3_ref(self.ana_cdh_3p3_ref)
        except:
            pass
        
        self.ana_inst1_v = getUnsigned(packet[38:40], 'big', 0, 65535)
        try:
            self.ana_inst1_v = gen_eus.CONVERT_ana_inst1_v(self.ana_inst1_v)
        except:
            pass
        
        self.ana_inst1_i = getUnsigned(packet[40:42], 'big', 0, 65535)
        try:
            self.ana_inst1_i = gen_eus.CONVERT_ana_inst1_i(self.ana_inst1_i)
        except:
            pass
        
        self.ana_inst2_v = getUnsigned(packet[42:44], 'big', 0, 65535)
        try:
            self.ana_inst2_v = gen_eus.CONVERT_ana_inst2_v(self.ana_inst2_v)
        except:
            pass
        
        self.ana_inst2_i = getUnsigned(packet[44:46], 'big', 0, 65535)
        try:
            self.ana_inst2_i = gen_eus.CONVERT_ana_inst2_i(self.ana_inst2_i)
        except:
            pass
        
        self.ana_inst3_v = getUnsigned(packet[46:48], 'big', 0, 65535)
        try:
            self.ana_inst3_v = gen_eus.CONVERT_ana_inst3_v(self.ana_inst3_v)
        except:
            pass
        
        self.ana_inst3_i = getUnsigned(packet[48:50], 'big', 0, 65535)
        try:
            self.ana_inst3_i = gen_eus.CONVERT_ana_inst3_i(self.ana_inst3_i)
        except:
            pass
        
        self.ana_inst_v = getUnsigned(packet[50:52], 'big', 0, 65535)
        try:
            self.ana_inst_v = gen_eus.CONVERT_ana_inst_v(self.ana_inst_v)
        except:
            pass
        
        self.ana_inst_i = getUnsigned(packet[52:54], 'big', 0, 65535)
        try:
            self.ana_inst_i = gen_eus.CONVERT_ana_inst_i(self.ana_inst_i)
        except:
            pass
        
        self.ana_deploy_v = getUnsigned(packet[54:56], 'big', 0, 65535)
        
        self.ana_deploy_i = getUnsigned(packet[56:58], 'big', 0, 65535)
        
        self.ana_interface1_therm = getUnsigned(packet[58:60], 'big', 0, 65535)
        try:
            self.ana_interface1_therm = gen_eus.CONVERT_ana_interface1_therm(self.ana_interface1_therm)
        except:
            pass
        
        self.ana_interface2_therm = getUnsigned(packet[60:62], 'big', 0, 65535)
        try:
            self.ana_interface2_therm = gen_eus.CONVERT_ana_interface2_therm(self.ana_interface2_therm)
        except:
            pass
        
        self.ana_gpio1 = getUnsigned(packet[62:64], 'big', 0, 65535)
        
        self.ana_gpio2 = getUnsigned(packet[64:66], 'big', 0, 65535)
        
        self.ana_gpio3 = getUnsigned(packet[66:68], 'big', 0, 65535)
        
        self.ana_gpio4 = getUnsigned(packet[68:70], 'big', 0, 65535)
        
        self.ana_sa1_v = getUnsigned(packet[70:72], 'big', 0, 65535)
        try:
            self.ana_sa1_v = gen_eus.CONVERT_ana_sa1_v(self.ana_sa1_v)
        except:
            pass
        
        self.ana_sa1_i = getUnsigned(packet[72:74], 'big', 0, 65535)
        try:
            self.ana_sa1_i = gen_eus.CONVERT_ana_sa1_i(self.ana_sa1_i)
        except:
            pass
        
        self.ana_sa2_v = getUnsigned(packet[74:76], 'big', 0, 65535)
        try:
            self.ana_sa2_v = gen_eus.CONVERT_ana_sa2_v(self.ana_sa2_v)
        except:
            pass
        
        self.ana_sa2_i = getUnsigned(packet[76:78], 'big', 0, 65535)
        try:
            self.ana_sa2_i = gen_eus.CONVERT_ana_sa2_i(self.ana_sa2_i)
        except:
            pass
        
        self.ana_bat1_v = getUnsigned(packet[78:80], 'big', 0, 65535)
        try:
            self.ana_bat1_v = gen_eus.CONVERT_ana_bat1_v(self.ana_bat1_v)
        except:
            pass
        
        self.ana_bat2_v = getUnsigned(packet[80:82], 'big', 0, 65535)
        try:
            self.ana_bat2_v = gen_eus.CONVERT_ana_bat2_v(self.ana_bat2_v)
        except:
            pass
        
        self.ana_eps_temp = getUnsigned(packet[82:84], 'big', 0, 65535)
        try:
            self.ana_eps_temp = gen_eus.CONVERT_ana_eps_temp(self.ana_eps_temp)
        except:
            pass
        
        self.ana_eps_3p3_ref = getUnsigned(packet[84:86], 'big', 0, 65535)
        try:
            self.ana_eps_3p3_ref = gen_eus.CONVERT_ana_eps_3p3_ref(self.ana_eps_3p3_ref)
        except:
            pass
        
        self.ana_eps_bus_v = getUnsigned(packet[86:88], 'big', 0, 65535)
        try:
            self.ana_eps_bus_v = gen_eus.CONVERT_ana_eps_bus_v(self.ana_eps_bus_v)
        except:
            pass
        
        self.ana_eps_bus_i = getUnsigned(packet[88:90], 'big', 0, 65535)
        try:
            self.ana_eps_bus_i = gen_eus.CONVERT_ana_eps_bus_i(self.ana_eps_bus_i)
        except:
            pass
        
        self.ana_xact_v = getUnsigned(packet[90:92], 'big', 0, 65535)
        try:
            self.ana_xact_v = gen_eus.CONVERT_ana_xact_v(self.ana_xact_v)
        except:
            pass
        
        self.ana_xact_i = getUnsigned(packet[92:94], 'big', 0, 65535)
        try:
            self.ana_xact_i = gen_eus.CONVERT_ana_xact_i(self.ana_xact_i)
        except:
            pass
        
        self.ana_uhf_v = getUnsigned(packet[94:96], 'big', 0, 65535)
        try:
            self.ana_uhf_v = gen_eus.CONVERT_ana_uhf_v(self.ana_uhf_v)
        except:
            pass
        
        self.ana_uhf_i = getUnsigned(packet[96:98], 'big', 0, 65535)
        try:
            self.ana_uhf_i = gen_eus.CONVERT_ana_uhf_i(self.ana_uhf_i)
        except:
            pass
        
        self.ana_xband_v = getUnsigned(packet[98:100], 'big', 0, 65535)
        try:
            self.ana_xband_v = gen_eus.CONVERT_ana_xband_v(self.ana_xband_v)
        except:
            pass
        
        self.ana_xband_i = getUnsigned(packet[100:102], 'big', 0, 65535)
        try:
            self.ana_xband_i = gen_eus.CONVERT_ana_xband_i(self.ana_xband_i)
        except:
            pass
        
        self.ana_hk_checksum = getUnsigned(packet[102:106], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class HW_HK:
    def __str__(self):
        return 'HW_HK'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_hw_hk = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_hw_hk = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.uart_recv_dbg = getUnsigned(packet[6:10], 'big', 0, 4294967295)
        
        self.uart_sent_dbg = getUnsigned(packet[10:14], 'big', 0, 4294967295)
        
        self.uart_ovr_dbg = getUnsigned(packet[14:15], 'big', 0, 255)
        
        self.uart_fra_dbg = getUnsigned(packet[15:16], 'big', 0, 255)
        
        self.uart_par_dbg = getUnsigned(packet[16:17], 'big', 0, 255)
        
        self.uart_drop_dbg = getUnsigned(packet[17:18], 'big', 0, 255)
        
        self.uart_recv_adcs = getUnsigned(packet[18:22], 'big', 0, 4294967295)
        
        self.uart_sent_adcs = getUnsigned(packet[22:26], 'big', 0, 4294967295)
        
        self.uart_ovr_adcs = getUnsigned(packet[26:27], 'big', 0, 255)
        
        self.uart_fra_adcs = getUnsigned(packet[27:28], 'big', 0, 255)
        
        self.uart_par_adcs = getUnsigned(packet[28:29], 'big', 0, 255)
        
        self.uart_drop_adcs = getUnsigned(packet[29:30], 'big', 0, 255)
        
        self.uart_recv_uhf = getUnsigned(packet[30:34], 'big', 0, 4294967295)
        
        self.uart_sent_uhf = getUnsigned(packet[34:38], 'big', 0, 4294967295)
        
        self.uart_ovr_uhf = getUnsigned(packet[38:39], 'big', 0, 255)
        
        self.uart_fra_uhf = getUnsigned(packet[39:40], 'big', 0, 255)
        
        self.uart_par_uhf = getUnsigned(packet[40:41], 'big', 0, 255)
        
        self.uart_drop_uhf = getUnsigned(packet[41:42], 'big', 0, 255)
        
        self.uart_recv_xband = getUnsigned(packet[42:46], 'big', 0, 4294967295)
        
        self.uart_sent_xband = getUnsigned(packet[46:50], 'big', 0, 4294967295)
        
        self.uart_ovr_xband = getUnsigned(packet[50:51], 'big', 0, 255)
        
        self.uart_fra_xband = getUnsigned(packet[51:52], 'big', 0, 255)
        
        self.uart_par_xband = getUnsigned(packet[52:53], 'big', 0, 255)
        
        self.uart_drop_xband = getUnsigned(packet[53:54], 'big', 0, 255)
        
        self.uart_recv_inst1 = getUnsigned(packet[54:58], 'big', 0, 4294967295)
        
        self.uart_sent_inst1 = getUnsigned(packet[58:62], 'big', 0, 4294967295)
        
        self.uart_ovr_inst1 = getUnsigned(packet[62:63], 'big', 0, 255)
        
        self.uart_fra_inst1 = getUnsigned(packet[63:64], 'big', 0, 255)
        
        self.uart_par_inst1 = getUnsigned(packet[64:65], 'big', 0, 255)
        
        self.uart_drop_inst1 = getUnsigned(packet[65:66], 'big', 0, 255)
        
        self.uart_recv_dsps = getUnsigned(packet[66:70], 'big', 0, 4294967295)
        
        self.uart_sent_dsps = getUnsigned(packet[70:74], 'big', 0, 4294967295)
        
        self.uart_ovr_dsps = getUnsigned(packet[74:75], 'big', 0, 255)
        
        self.uart_fra_dsps = getUnsigned(packet[75:76], 'big', 0, 255)
        
        self.uart_par_dsps = getUnsigned(packet[76:77], 'big', 0, 255)
        
        self.uart_drop_dsps = getUnsigned(packet[77:78], 'big', 0, 255)
        
        self.uart_recv_inst3 = getUnsigned(packet[78:82], 'big', 0, 4294967295)
        
        self.uart_sent_inst3 = getUnsigned(packet[82:86], 'big', 0, 4294967295)
        
        self.uart_ovr_inst3 = getUnsigned(packet[86:87], 'big', 0, 255)
        
        self.uart_fra_inst3 = getUnsigned(packet[87:88], 'big', 0, 255)
        
        self.uart_par_inst3 = getUnsigned(packet[88:89], 'big', 0, 255)
        
        self.uart_drop_inst3 = getUnsigned(packet[89:90], 'big', 0, 255)
        
        self.uart_recv_inst4 = getUnsigned(packet[90:94], 'big', 0, 4294967295)
        
        self.uart_sent_inst4 = getUnsigned(packet[94:98], 'big', 0, 4294967295)
        
        self.uart_ovr_inst4 = getUnsigned(packet[98:99], 'big', 0, 255)
        
        self.uart_fra_inst4 = getUnsigned(packet[99:100], 'big', 0, 255)
        
        self.uart_par_inst4 = getUnsigned(packet[100:101], 'big', 0, 255)
        
        self.uart_drop_inst4 = getUnsigned(packet[101:102], 'big', 0, 255)
        
        self.hw_int_count_0 = getUnsigned(packet[102:106], 'big', 0, 4294967295)
        
        self.hw_int_count_1 = getUnsigned(packet[106:110], 'big', 0, 4294967295)
        
        self.hw_int_count_2 = getUnsigned(packet[110:114], 'big', 0, 4294967295)
        
        self.hw_int_count_3 = getUnsigned(packet[114:118], 'big', 0, 4294967295)
        
        self.hw_int_count_4 = getUnsigned(packet[118:122], 'big', 0, 4294967295)
        
        self.hw_int_count_5 = getUnsigned(packet[122:126], 'big', 0, 4294967295)
        
        self.hw_int_count_6 = getUnsigned(packet[126:130], 'big', 0, 4294967295)
        
        self.hw_int_count_7 = getUnsigned(packet[130:134], 'big', 0, 4294967295)
        
        self.hw_int_count_8 = getUnsigned(packet[134:138], 'big', 0, 4294967295)
        
        self.hw_int_count_9 = getUnsigned(packet[138:142], 'big', 0, 4294967295)
        
        self.hw_int_count_10 = getUnsigned(packet[142:146], 'big', 0, 4294967295)
        
        self.hw_int_count_11 = getUnsigned(packet[146:150], 'big', 0, 4294967295)
        
        self.hw_int_count_12 = getUnsigned(packet[150:154], 'big', 0, 4294967295)
        
        self.hw_int_count_13 = getUnsigned(packet[154:158], 'big', 0, 4294967295)
        
        self.axi_intc_bad_interrupt = getUnsigned(packet[158:160], 'big', 0, 65535)
        
        self.axi_intc_last_bad_interrupt = getUnsigned(packet[160:162], 'big', 0, 65535)
        
        self.tlm_sync_rx_drop = getUnsigned(packet[162:164], 'big', 0, 65535)
        
        self.tlm_sync_len_err = getUnsigned(packet[164:166], 'big', 0, 65535)
        
        self.tlm_sync_time_err = getUnsigned(packet[166:168], 'big', 0, 65535)
        
        self.tlm_sync_tx_err = getUnsigned(packet[168:170], 'big', 0, 65535)
        
        self.tlm_rx_time_sync = getUnsigned(packet[170:174], 'big', 0, 4294967295)
        
        self.hw_rad_mon_ffctr_cnt = getUnsigned(packet[174:176], 'big', 0, 65535)
        
        self.hw_rad_mon_srff_cnt = getUnsigned(packet[176:178], 'big', 0, 65535)
        
        self.hw_rad_mon_srsrl_cnt = getUnsigned(packet[178:180], 'big', 0, 65535)
        
        self.hw_rad_mon_bram_sbe_cnt = getUnsigned(packet[180:182], 'big', 0, 65535)
        
        self.hw_rad_mon_bram_mbe_cnt = getUnsigned(packet[182:184], 'big', 0, 65535)
        
        self.hw_rad_mon_lutram_sbe_cnt = getUnsigned(packet[184:186], 'big', 0, 65535)
        
        self.hw_rad_mon_lutram_mbe_cnt = getUnsigned(packet[186:188], 'big', 0, 65535)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[188:189], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[189:190], 'big', 0, 255)
        
        self.hw_wdog_max = getUnsigned(packet[190:194], 'big', 0, 4294967295)
        
        self.hw_scratch = getUnsigned(packet[194:198], 'big', 0, 4294967295)
        
        self.hw_led = getUnsigned(packet[198:202], 'big', 0, 4294967295)
        
        self.hw_adcs_pps = getUnsigned(packet[202:206], 'big', 0, 4294967295)
        
        self.hw_xband_count = getUnsigned(packet[206:210], 'big', 0, 4294967295)
        
        self.mram_sbit_cnt = getUnsigned(packet[210:211], 'big', 0, 255)
        
        self.mram_dbit_cnt = getUnsigned(packet[211:212], 'big', 0, 255)
        
        self.mram_state = getUnsigned(packet[212:213], 'big', 0, 255)
        try:
            self.mram_state = gen_states.CONVERT_mram_state(self.mram_state)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[213:214], 'big', 0, 255)
        
        self.cfi_pwr_state = getUnsigned(packet[214:215], 'big', 0, 255)
        try:
            self.cfi_pwr_state = gen_states.CONVERT_cfi_pwr_state(self.cfi_pwr_state)
        except:
            pass
        
        self.cfi_state = getUnsigned(packet[215:216], 'big', 0, 255)
        
        self.cfi_dev_sel = getUnsigned(packet[216:217], 'big', 0, 255)
        
        self.cfi_rx_bit_delay = getUnsigned(packet[217:218], 'big', 0, 255)
        
        self.cfi_xfer = getUnsigned(packet[218:220], 'big', 0, 65535)
        
        self.cfi_triple_state = getUnsigned(packet[220:221], 'big', 0, 255)
        try:
            self.cfi_triple_state = gen_states.CONVERT_cfi_triple_state(self.cfi_triple_state)
        except:
            pass
        
        self.cfi_sw_state = getUnsigned(packet[221:222], 'big', 0, 255)
        try:
            self.cfi_sw_state = gen_states.CONVERT_cfi_sw_state(self.cfi_sw_state)
        except:
            pass
        
        self.hw_hk_checksum = getUnsigned(packet[222:226], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class VERSION:
    def __str__(self):
        return 'VERSION'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_version = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_version = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.ver_sw_major_version = getUnsigned(packet[6:7], 'big', 0, 255)
        
        self.ver_sw_minor_version = getUnsigned(packet[7:8], 'big', 0, 255)
        
        self.ver_sw_patch_version = getUnsigned(packet[8:9], 'big', 0, 255)
        
        self.ver_sw_image_id = getUnsigned(packet[9:10], 'big', 0, 255)
        
        try:
            self.ver_sw_date_0 = ''.join(filter(lambda x: x in string.printable, packet[10:11].decode("utf-8")))
        except:
            self.ver_sw_date_0 = ' '
        
        try:
            self.ver_sw_date_1 = ''.join(filter(lambda x: x in string.printable, packet[11:12].decode("utf-8")))
        except:
            self.ver_sw_date_1 = ' '
        
        try:
            self.ver_sw_date_2 = ''.join(filter(lambda x: x in string.printable, packet[12:13].decode("utf-8")))
        except:
            self.ver_sw_date_2 = ' '
        
        try:
            self.ver_sw_date_3 = ''.join(filter(lambda x: x in string.printable, packet[13:14].decode("utf-8")))
        except:
            self.ver_sw_date_3 = ' '
        
        try:
            self.ver_sw_date_4 = ''.join(filter(lambda x: x in string.printable, packet[14:15].decode("utf-8")))
        except:
            self.ver_sw_date_4 = ' '
        
        try:
            self.ver_sw_date_5 = ''.join(filter(lambda x: x in string.printable, packet[15:16].decode("utf-8")))
        except:
            self.ver_sw_date_5 = ' '
        
        try:
            self.ver_sw_date_6 = ''.join(filter(lambda x: x in string.printable, packet[16:17].decode("utf-8")))
        except:
            self.ver_sw_date_6 = ' '
        
        try:
            self.ver_sw_date_7 = ''.join(filter(lambda x: x in string.printable, packet[17:18].decode("utf-8")))
        except:
            self.ver_sw_date_7 = ' '
        
        try:
            self.ver_sw_date_8 = ''.join(filter(lambda x: x in string.printable, packet[18:19].decode("utf-8")))
        except:
            self.ver_sw_date_8 = ' '
        
        try:
            self.ver_sw_date_9 = ''.join(filter(lambda x: x in string.printable, packet[19:20].decode("utf-8")))
        except:
            self.ver_sw_date_9 = ' '
        
        try:
            self.ver_sw_date_10 = ''.join(filter(lambda x: x in string.printable, packet[20:21].decode("utf-8")))
        except:
            self.ver_sw_date_10 = ' '
        
        try:
            self.ver_sw_date_11 = ''.join(filter(lambda x: x in string.printable, packet[21:22].decode("utf-8")))
        except:
            self.ver_sw_date_11 = ' '
        
        try:
            self.ver_sw_time_0 = ''.join(filter(lambda x: x in string.printable, packet[22:23].decode("utf-8")))
        except:
            self.ver_sw_time_0 = ' '
        
        try:
            self.ver_sw_time_1 = ''.join(filter(lambda x: x in string.printable, packet[23:24].decode("utf-8")))
        except:
            self.ver_sw_time_1 = ' '
        
        try:
            self.ver_sw_time_2 = ''.join(filter(lambda x: x in string.printable, packet[24:25].decode("utf-8")))
        except:
            self.ver_sw_time_2 = ' '
        
        try:
            self.ver_sw_time_3 = ''.join(filter(lambda x: x in string.printable, packet[25:26].decode("utf-8")))
        except:
            self.ver_sw_time_3 = ' '
        
        try:
            self.ver_sw_time_4 = ''.join(filter(lambda x: x in string.printable, packet[26:27].decode("utf-8")))
        except:
            self.ver_sw_time_4 = ' '
        
        try:
            self.ver_sw_time_5 = ''.join(filter(lambda x: x in string.printable, packet[27:28].decode("utf-8")))
        except:
            self.ver_sw_time_5 = ' '
        
        try:
            self.ver_sw_time_6 = ''.join(filter(lambda x: x in string.printable, packet[28:29].decode("utf-8")))
        except:
            self.ver_sw_time_6 = ' '
        
        try:
            self.ver_sw_time_7 = ''.join(filter(lambda x: x in string.printable, packet[29:30].decode("utf-8")))
        except:
            self.ver_sw_time_7 = ' '
        
        try:
            self.ver_sw_time_8 = ''.join(filter(lambda x: x in string.printable, packet[30:31].decode("utf-8")))
        except:
            self.ver_sw_time_8 = ' '
        
        try:
            self.ver_sw_time_9 = ''.join(filter(lambda x: x in string.printable, packet[31:32].decode("utf-8")))
        except:
            self.ver_sw_time_9 = ' '
        
        try:
            self.ver_sw_time_10 = ''.join(filter(lambda x: x in string.printable, packet[32:33].decode("utf-8")))
        except:
            self.ver_sw_time_10 = ' '
        
        try:
            self.ver_sw_time_11 = ''.join(filter(lambda x: x in string.printable, packet[33:34].decode("utf-8")))
        except:
            self.ver_sw_time_11 = ' '
        
        try:
            self.ver_git_hash_0 = ''.join(filter(lambda x: x in string.printable, packet[34:35].decode("utf-8")))
        except:
            self.ver_git_hash_0 = ' '
        
        try:
            self.ver_git_hash_1 = ''.join(filter(lambda x: x in string.printable, packet[35:36].decode("utf-8")))
        except:
            self.ver_git_hash_1 = ' '
        
        try:
            self.ver_git_hash_2 = ''.join(filter(lambda x: x in string.printable, packet[36:37].decode("utf-8")))
        except:
            self.ver_git_hash_2 = ' '
        
        try:
            self.ver_git_hash_3 = ''.join(filter(lambda x: x in string.printable, packet[37:38].decode("utf-8")))
        except:
            self.ver_git_hash_3 = ' '
        
        self.version_checksum = getUnsigned(packet[38:42], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class SW_STAT:
    def __str__(self):
        return 'SW_STAT'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_sw_stat = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_sw_stat = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.sw_store_partition_write_misc = getUnsigned(packet[6:10], 'big', 0, 4294967295)
        
        self.sw_store_partition_read_misc = getUnsigned(packet[10:14], 'big', 0, 4294967295)
        
        self.sw_store_partition_write_adcs = getUnsigned(packet[14:18], 'big', 0, 4294967295)
        
        self.sw_store_partition_read_adcs = getUnsigned(packet[18:22], 'big', 0, 4294967295)
        
        self.sw_store_partition_write_hk = getUnsigned(packet[22:26], 'big', 0, 4294967295)
        
        self.sw_store_partition_read_hk = getUnsigned(packet[26:30], 'big', 0, 4294967295)
        
        self.sw_store_partition_write_sci = getUnsigned(packet[30:34], 'big', 0, 4294967295)
        
        self.sw_store_partition_read_sci = getUnsigned(packet[34:38], 'big', 0, 4294967295)
        
        self.sw_store_partition_write_dsps = getUnsigned(packet[38:42], 'big', 0, 4294967295)
        
        self.sw_store_partition_read_dsps = getUnsigned(packet[42:46], 'big', 0, 4294967295)
        
        self.sw_store_partition_write_log = getUnsigned(packet[46:50], 'big', 0, 4294967295)
        
        self.sw_store_partition_write_downlink = getUnsigned(packet[50:54], 'big', 0, 4294967295)
        
        self.sw_csie_nand_write_ptr = getUnsigned(packet[54:58], 'big', 0, 4294967295)
        
        self.sw_time_since_boot = getUnsigned(packet[58:62], 'big', 0, 4294967295)
        
        self.sw_time_alive = getUnsigned(packet[62:66], 'big', 0, 4294967295)
        
        self.sw_time_mission_elapsed_time = getUnsigned(packet[66:70], 'big', 0, 4294967295)
        
        self.sw_mode_seconds_since_mode_change = getUnsigned(packet[70:74], 'big', 0, 4294967295)
        
        try:
            self.sw_dsps_flare_level = getFloat(packet[74:78], 'BIG')
        except:
            print('Could not decode floating point item "sw_dsps_flare_level" in "sw_stat"')
            self.sw_dsps_flare_level = 0
        
        self.sw_dsps_sps_2_quad_sum = getUnsigned(packet[78:82], 'big', 0, 4294967295)
        
        self.sw_adcs_body_rt3 = getSigned(packet[82:86], 'big', 0, 4294967295)
        try:
            self.sw_adcs_body_rt3 = gen_eus.CONVERT_sw_adcs_body_rt3(self.sw_adcs_body_rt3)
        except:
            pass
        
        self.sw_csie_img_hist_0 = getUnsigned(packet[86:90], 'big', 0, 4294967295)
        
        self.sw_csie_img_hist_1 = getUnsigned(packet[90:94], 'big', 0, 4294967295)
        
        self.sw_csie_img_hist_2 = getUnsigned(packet[94:98], 'big', 0, 4294967295)
        
        self.sw_csie_img_hist_3 = getUnsigned(packet[98:102], 'big', 0, 4294967295)
        
        self.sw_csie_img_hist_4 = getUnsigned(packet[102:106], 'big', 0, 4294967295)
        
        self.sw_csie_img_hist_5 = getUnsigned(packet[106:110], 'big', 0, 4294967295)
        
        self.sw_csie_img_hist_6 = getUnsigned(packet[110:114], 'big', 0, 4294967295)
        
        self.sw_csie_img_hist_7 = getUnsigned(packet[114:118], 'big', 0, 4294967295)
        
        self.sw_cmd_rjct_op = getUnsigned(packet[118:120], 'big', 0, 65535)
        try:
            self.sw_cmd_rjct_op = gen_states.CONVERT_sw_cmd_rjct_op(self.sw_cmd_rjct_op)
        except:
            pass
        
        self.sw_xband_pa_temp = getUnsigned(packet[120:122], 'big', 0, 65535)
        try:
            self.sw_xband_pa_temp = gen_eus.CONVERT_sw_xband_pa_temp(self.sw_xband_pa_temp)
        except:
            pass
        
        self.sw_xband_pa_curr = getUnsigned(packet[122:124], 'big', 0, 65535)
        try:
            self.sw_xband_pa_curr = gen_eus.CONVERT_sw_xband_pa_curr(self.sw_xband_pa_curr)
        except:
            pass
        
        self.sw_seq_exec_buf_auto = getUnsigned(packet[124:126], 'big', 0, 65535)
        try:
            self.sw_seq_exec_buf_auto = gen_states.CONVERT_sw_seq_exec_buf_auto(self.sw_seq_exec_buf_auto)
        except:
            pass
        
        self.sw_seq_exec_buf_op1 = getUnsigned(packet[126:128], 'big', 0, 65535)
        try:
            self.sw_seq_exec_buf_op1 = gen_states.CONVERT_sw_seq_exec_buf_op1(self.sw_seq_exec_buf_op1)
        except:
            pass
        
        self.sw_seq_exec_buf_op2 = getUnsigned(packet[128:130], 'big', 0, 65535)
        try:
            self.sw_seq_exec_buf_op2 = gen_states.CONVERT_sw_seq_exec_buf_op2(self.sw_seq_exec_buf_op2)
        except:
            pass
        
        self.sw_seq_exec_buf_op3 = getUnsigned(packet[130:132], 'big', 0, 65535)
        try:
            self.sw_seq_exec_buf_op3 = gen_states.CONVERT_sw_seq_exec_buf_op3(self.sw_seq_exec_buf_op3)
        except:
            pass
        
        self.sw_fp_resp_count = getUnsigned(packet[132:134], 'big', 0, 65535)
        
        self.sw_ana_3p3_v = getUnsigned(packet[134:136], 'big', 0, 65535)
        try:
            self.sw_ana_3p3_v = gen_eus.CONVERT_sw_ana_3p3_v(self.sw_ana_3p3_v)
        except:
            pass
        
        self.sw_ana_1p8_v = getUnsigned(packet[136:138], 'big', 0, 65535)
        try:
            self.sw_ana_1p8_v = gen_eus.CONVERT_sw_ana_1p8_v(self.sw_ana_1p8_v)
        except:
            pass
        
        self.sw_ana_1p0_v = getUnsigned(packet[138:140], 'big', 0, 65535)
        try:
            self.sw_ana_1p0_v = gen_eus.CONVERT_sw_ana_1p0_v(self.sw_ana_1p0_v)
        except:
            pass
        
        self.sw_ana_3p3_i = getUnsigned(packet[140:142], 'big', 0, 65535)
        try:
            self.sw_ana_3p3_i = gen_eus.CONVERT_sw_ana_3p3_i(self.sw_ana_3p3_i)
        except:
            pass
        
        self.sw_ana_1p8_i = getUnsigned(packet[142:144], 'big', 0, 65535)
        try:
            self.sw_ana_1p8_i = gen_eus.CONVERT_sw_ana_1p8_i(self.sw_ana_1p8_i)
        except:
            pass
        
        self.sw_ana_1p0_i = getUnsigned(packet[144:146], 'big', 0, 65535)
        try:
            self.sw_ana_1p0_i = gen_eus.CONVERT_sw_ana_1p0_i(self.sw_ana_1p0_i)
        except:
            pass
        
        self.sw_ana_cdh_temp = getUnsigned(packet[146:148], 'big', 0, 65535)
        try:
            self.sw_ana_cdh_temp = gen_eus.CONVERT_sw_ana_cdh_temp(self.sw_ana_cdh_temp)
        except:
            pass
        
        self.sw_ana_cdh_3p3_ref = getUnsigned(packet[148:150], 'big', 0, 65535)
        try:
            self.sw_ana_cdh_3p3_ref = gen_eus.CONVERT_sw_ana_cdh_3p3_ref(self.sw_ana_cdh_3p3_ref)
        except:
            pass
        
        self.sw_ana_sa1_v = getUnsigned(packet[150:152], 'big', 0, 65535)
        try:
            self.sw_ana_sa1_v = gen_eus.CONVERT_sw_ana_sa1_v(self.sw_ana_sa1_v)
        except:
            pass
        
        self.sw_ana_sa1_i = getUnsigned(packet[152:154], 'big', 0, 65535)
        try:
            self.sw_ana_sa1_i = gen_eus.CONVERT_sw_ana_sa1_i(self.sw_ana_sa1_i)
        except:
            pass
        
        self.sw_ana_sa2_v = getUnsigned(packet[154:156], 'big', 0, 65535)
        try:
            self.sw_ana_sa2_v = gen_eus.CONVERT_sw_ana_sa2_v(self.sw_ana_sa2_v)
        except:
            pass
        
        self.sw_ana_sa2_i = getUnsigned(packet[156:158], 'big', 0, 65535)
        try:
            self.sw_ana_sa2_i = gen_eus.CONVERT_sw_ana_sa2_i(self.sw_ana_sa2_i)
        except:
            pass
        
        self.sw_ana_bat1_v = getUnsigned(packet[158:160], 'big', 0, 65535)
        try:
            self.sw_ana_bat1_v = gen_eus.CONVERT_sw_ana_bat1_v(self.sw_ana_bat1_v)
        except:
            pass
        
        self.sw_ana_eps_temp = getUnsigned(packet[160:162], 'big', 0, 65535)
        try:
            self.sw_ana_eps_temp = gen_eus.CONVERT_sw_ana_eps_temp(self.sw_ana_eps_temp)
        except:
            pass
        
        self.sw_ana_eps_3p3_ref = getUnsigned(packet[162:164], 'big', 0, 65535)
        try:
            self.sw_ana_eps_3p3_ref = gen_eus.CONVERT_sw_ana_eps_3p3_ref(self.sw_ana_eps_3p3_ref)
        except:
            pass
        
        self.sw_ana_eps_bus_v = getUnsigned(packet[164:166], 'big', 0, 65535)
        try:
            self.sw_ana_eps_bus_v = gen_eus.CONVERT_sw_ana_eps_bus_v(self.sw_ana_eps_bus_v)
        except:
            pass
        
        self.sw_ana_eps_bus_i = getUnsigned(packet[166:168], 'big', 0, 65535)
        try:
            self.sw_ana_eps_bus_i = gen_eus.CONVERT_sw_ana_eps_bus_i(self.sw_ana_eps_bus_i)
        except:
            pass
        
        self.sw_ana_xact_v = getUnsigned(packet[168:170], 'big', 0, 65535)
        try:
            self.sw_ana_xact_v = gen_eus.CONVERT_sw_ana_xact_v(self.sw_ana_xact_v)
        except:
            pass
        
        self.sw_ana_xact_i = getUnsigned(packet[170:172], 'big', 0, 65535)
        try:
            self.sw_ana_xact_i = gen_eus.CONVERT_sw_ana_xact_i(self.sw_ana_xact_i)
        except:
            pass
        
        self.sw_ana_uhf_v = getUnsigned(packet[172:174], 'big', 0, 65535)
        try:
            self.sw_ana_uhf_v = gen_eus.CONVERT_sw_ana_uhf_v(self.sw_ana_uhf_v)
        except:
            pass
        
        self.sw_ana_uhf_i = getUnsigned(packet[174:176], 'big', 0, 65535)
        try:
            self.sw_ana_uhf_i = gen_eus.CONVERT_sw_ana_uhf_i(self.sw_ana_uhf_i)
        except:
            pass
        
        self.sw_ana_xband_v = getUnsigned(packet[176:178], 'big', 0, 65535)
        try:
            self.sw_ana_xband_v = gen_eus.CONVERT_sw_ana_xband_v(self.sw_ana_xband_v)
        except:
            pass
        
        self.sw_ana_xband_i = getUnsigned(packet[178:180], 'big', 0, 65535)
        try:
            self.sw_ana_xband_i = gen_eus.CONVERT_sw_ana_xband_i(self.sw_ana_xband_i)
        except:
            pass
        
        self.sw_ana_inst1_volt = getUnsigned(packet[180:182], 'big', 0, 65535)
        try:
            self.sw_ana_inst1_volt = gen_eus.CONVERT_sw_ana_inst1_volt(self.sw_ana_inst1_volt)
        except:
            pass
        
        self.sw_ana_inst1_curr = getUnsigned(packet[182:184], 'big', 0, 65535)
        try:
            self.sw_ana_inst1_curr = gen_eus.CONVERT_sw_ana_inst1_curr(self.sw_ana_inst1_curr)
        except:
            pass
        
        self.sw_ana_inst2_volt = getUnsigned(packet[184:186], 'big', 0, 65535)
        try:
            self.sw_ana_inst2_volt = gen_eus.CONVERT_sw_ana_inst2_volt(self.sw_ana_inst2_volt)
        except:
            pass
        
        self.sw_ana_inst2_curr = getUnsigned(packet[186:188], 'big', 0, 65535)
        try:
            self.sw_ana_inst2_curr = gen_eus.CONVERT_sw_ana_inst2_curr(self.sw_ana_inst2_curr)
        except:
            pass
        
        self.sw_ana_ifb_therm1 = getUnsigned(packet[188:190], 'big', 0, 65535)
        try:
            self.sw_ana_ifb_therm1 = gen_eus.CONVERT_sw_ana_ifb_therm1(self.sw_ana_ifb_therm1)
        except:
            pass
        
        self.sw_dsps_sps_1_sun_pos_x = getUnsigned(packet[190:192], 'big', 0, 65535)
        
        self.sw_dsps_sps_1_sun_pos_y = getUnsigned(packet[192:194], 'big', 0, 65535)
        
        self.sw_dsps_sps_2_sun_pos_x = getUnsigned(packet[194:196], 'big', 0, 65535)
        
        self.sw_dsps_sps_2_sun_pos_y = getUnsigned(packet[196:198], 'big', 0, 65535)
        
        self.sw_adcs_analogs_motor1_temp = getSigned(packet[198:200], 'big', 0, 65535)
        try:
            self.sw_adcs_analogs_motor1_temp = gen_eus.CONVERT_sw_adcs_analogs_motor1_temp(self.sw_adcs_analogs_motor1_temp)
        except:
            pass
        
        self.sw_adcs_analogs_digital_bus_v = getSigned(packet[200:202], 'big', 0, 65535)
        try:
            self.sw_adcs_analogs_digital_bus_v = gen_eus.CONVERT_sw_adcs_analogs_digital_bus_v(self.sw_adcs_analogs_digital_bus_v)
        except:
            pass
        
        self.sw_adcs_wheel_sp3 = getSigned(packet[202:204], 'big', 0, 65535)
        try:
            self.sw_adcs_wheel_sp3 = gen_eus.CONVERT_sw_adcs_wheel_sp3(self.sw_adcs_wheel_sp3)
        except:
            pass
        
        self.sw_adcs_att_ctrl_sun_point_angle_error = getUnsigned(packet[204:206], 'big', 0, 65535)
        try:
            self.sw_adcs_att_ctrl_sun_point_angle_error = gen_eus.CONVERT_sw_adcs_att_ctrl_sun_point_angle_error(self.sw_adcs_att_ctrl_sun_point_angle_error)
        except:
            pass
        
        self.sw_csie_mode = getUnsigned(packet[206:208], 'big', 0, 65535)
        
        self.sw_cmd_recv_count = getUnsigned(packet[208:209], 'big', 0, 255)
        
        self.sw_cmd_rjct_count = getUnsigned(packet[209:210], 'big', 0, 255)
        
        self.sw_cmd_succ_count = getUnsigned(packet[210:211], 'big', 0, 255)
        
        self.sw_cmd_fail_code = getUnsigned(packet[211:212], 'big', 0, 255)
        try:
            self.sw_cmd_fail_code = gen_states.CONVERT_sw_cmd_fail_code(self.sw_cmd_fail_code)
        except:
            pass
        
        self.REUSABLE_SPARE_1 = getUnsigned(packet[212:212], 'big', 7, 1)
        try:
            self.REUSABLE_SPARE_1 = gen_states.CONVERT_REUSABLE_SPARE_1(self.REUSABLE_SPARE_1)
        except:
            pass
        
        self.REUSABLE_SPARE_1 = getUnsigned(packet[212:212], 'big', 6, 1)
        try:
            self.REUSABLE_SPARE_1 = gen_states.CONVERT_REUSABLE_SPARE_1(self.REUSABLE_SPARE_1)
        except:
            pass
        
        self.REUSABLE_SPARE_1 = getUnsigned(packet[212:212], 'big', 5, 1)
        try:
            self.REUSABLE_SPARE_1 = gen_states.CONVERT_REUSABLE_SPARE_1(self.REUSABLE_SPARE_1)
        except:
            pass
        
        self.REUSABLE_SPARE_1 = getUnsigned(packet[212:212], 'big', 4, 1)
        try:
            self.REUSABLE_SPARE_1 = gen_states.CONVERT_REUSABLE_SPARE_1(self.REUSABLE_SPARE_1)
        except:
            pass
        
        self.REUSABLE_SPARE_1 = getUnsigned(packet[212:212], 'big', 3, 1)
        try:
            self.REUSABLE_SPARE_1 = gen_states.CONVERT_REUSABLE_SPARE_1(self.REUSABLE_SPARE_1)
        except:
            pass
        
        self.sw_cmd_arm_state_uhf = getUnsigned(packet[212:212], 'big', 2, 1)
        try:
            self.sw_cmd_arm_state_uhf = gen_states.CONVERT_sw_cmd_arm_state_uhf(self.sw_cmd_arm_state_uhf)
        except:
            pass
        
        self.sw_cmd_arm_state_seq = getUnsigned(packet[212:212], 'big', 1, 1)
        try:
            self.sw_cmd_arm_state_seq = gen_states.CONVERT_sw_cmd_arm_state_seq(self.sw_cmd_arm_state_seq)
        except:
            pass
        
        self.sw_cmd_arm_state_dbg = getUnsigned(packet[212:212], 'big', 0, 1)
        try:
            self.sw_cmd_arm_state_dbg = gen_states.CONVERT_sw_cmd_arm_state_dbg(self.sw_cmd_arm_state_dbg)
        except:
            pass
        
        self.REUSABLE_SPARE_1 = getUnsigned(packet[213:213], 'big', 7, 1)
        try:
            self.REUSABLE_SPARE_1 = gen_states.CONVERT_REUSABLE_SPARE_1(self.REUSABLE_SPARE_1)
        except:
            pass
        
        self.sw_eps_pwr_state_inst4 = getUnsigned(packet[213:213], 'big', 6, 1)
        try:
            self.sw_eps_pwr_state_inst4 = gen_states.CONVERT_sw_eps_pwr_state_inst4(self.sw_eps_pwr_state_inst4)
        except:
            pass
        
        self.sw_eps_pwr_state_inst3 = getUnsigned(packet[213:213], 'big', 5, 1)
        try:
            self.sw_eps_pwr_state_inst3 = gen_states.CONVERT_sw_eps_pwr_state_inst3(self.sw_eps_pwr_state_inst3)
        except:
            pass
        
        self.sw_eps_pwr_state_inst2 = getUnsigned(packet[213:213], 'big', 4, 1)
        try:
            self.sw_eps_pwr_state_inst2 = gen_states.CONVERT_sw_eps_pwr_state_inst2(self.sw_eps_pwr_state_inst2)
        except:
            pass
        
        self.sw_eps_pwr_state_dsps = getUnsigned(packet[213:213], 'big', 3, 1)
        try:
            self.sw_eps_pwr_state_dsps = gen_states.CONVERT_sw_eps_pwr_state_dsps(self.sw_eps_pwr_state_dsps)
        except:
            pass
        
        self.sw_eps_pwr_state_xband = getUnsigned(packet[213:213], 'big', 2, 1)
        try:
            self.sw_eps_pwr_state_xband = gen_states.CONVERT_sw_eps_pwr_state_xband(self.sw_eps_pwr_state_xband)
        except:
            pass
        
        self.sw_eps_pwr_state_uhf = getUnsigned(packet[213:213], 'big', 1, 1)
        try:
            self.sw_eps_pwr_state_uhf = gen_states.CONVERT_sw_eps_pwr_state_uhf(self.sw_eps_pwr_state_uhf)
        except:
            pass
        
        self.sw_eps_pwr_state_adcs = getUnsigned(packet[213:213], 'big', 0, 1)
        try:
            self.sw_eps_pwr_state_adcs = gen_states.CONVERT_sw_eps_pwr_state_adcs(self.sw_eps_pwr_state_adcs)
        except:
            pass
        
        self.REUSABLE_SPARE_1 = getUnsigned(packet[214:214], 'big', 7, 1)
        try:
            self.REUSABLE_SPARE_1 = gen_states.CONVERT_REUSABLE_SPARE_1(self.REUSABLE_SPARE_1)
        except:
            pass
        
        self.REUSABLE_SPARE_1 = getUnsigned(packet[214:214], 'big', 6, 1)
        try:
            self.REUSABLE_SPARE_1 = gen_states.CONVERT_REUSABLE_SPARE_1(self.REUSABLE_SPARE_1)
        except:
            pass
        
        self.REUSABLE_SPARE_1 = getUnsigned(packet[214:214], 'big', 5, 1)
        try:
            self.REUSABLE_SPARE_1 = gen_states.CONVERT_REUSABLE_SPARE_1(self.REUSABLE_SPARE_1)
        except:
            pass
        
        self.REUSABLE_SPARE_1 = getUnsigned(packet[214:214], 'big', 4, 1)
        try:
            self.REUSABLE_SPARE_1 = gen_states.CONVERT_REUSABLE_SPARE_1(self.REUSABLE_SPARE_1)
        except:
            pass
        
        self.REUSABLE_SPARE_1 = getUnsigned(packet[214:214], 'big', 3, 1)
        try:
            self.REUSABLE_SPARE_1 = gen_states.CONVERT_REUSABLE_SPARE_1(self.REUSABLE_SPARE_1)
        except:
            pass
        
        self.REUSABLE_SPARE_1 = getUnsigned(packet[214:214], 'big', 2, 1)
        try:
            self.REUSABLE_SPARE_1 = gen_states.CONVERT_REUSABLE_SPARE_1(self.REUSABLE_SPARE_1)
        except:
            pass
        
        self.REUSABLE_SPARE_1 = getUnsigned(packet[214:214], 'big', 1, 1)
        try:
            self.REUSABLE_SPARE_1 = gen_states.CONVERT_REUSABLE_SPARE_1(self.REUSABLE_SPARE_1)
        except:
            pass
        
        self.sw_bat_alive_state_battery0 = getUnsigned(packet[214:214], 'big', 0, 1)
        try:
            self.sw_bat_alive_state_battery0 = gen_states.CONVERT_sw_bat_alive_state_battery0(self.sw_bat_alive_state_battery0)
        except:
            pass
        
        self.sw_mode_clt_count = getUnsigned(packet[215:216], 'big', 0, 255)
        
        self.sw_mode_system_mode = getUnsigned(packet[216:217], 'big', 0, 255)
        try:
            self.sw_mode_system_mode = gen_states.CONVERT_sw_mode_system_mode(self.sw_mode_system_mode)
        except:
            pass
        
        self.sw_uhf_alive = getUnsigned(packet[217:218], 'big', 0, 255)
        
        self.sw_uhf_temp = getSigned(packet[218:219], 'big', 0, 255)
        
        self.sw_seq_state_auto = getUnsigned(packet[219:220], 'big', 0, 255)
        try:
            self.sw_seq_state_auto = gen_states.CONVERT_sw_seq_state_auto(self.sw_seq_state_auto)
        except:
            pass
        
        self.sw_seq_state_op1 = getUnsigned(packet[220:221], 'big', 0, 255)
        try:
            self.sw_seq_state_op1 = gen_states.CONVERT_sw_seq_state_op1(self.sw_seq_state_op1)
        except:
            pass
        
        self.sw_seq_state_op2 = getUnsigned(packet[221:222], 'big', 0, 255)
        try:
            self.sw_seq_state_op2 = gen_states.CONVERT_sw_seq_state_op2(self.sw_seq_state_op2)
        except:
            pass
        
        self.sw_seq_state_op3 = getUnsigned(packet[222:223], 'big', 0, 255)
        try:
            self.sw_seq_state_op3 = gen_states.CONVERT_sw_seq_state_op3(self.sw_seq_state_op3)
        except:
            pass
        
        self.sw_fp_task_state = getUnsigned(packet[223:224], 'big', 0, 255)
        try:
            self.sw_fp_task_state = gen_states.CONVERT_sw_fp_task_state(self.sw_fp_task_state)
        except:
            pass
        
        self.sw_fp_wp_state_wp15 = getUnsigned(packet[224:224], 'big', 6, 3)
        try:
            self.sw_fp_wp_state_wp15 = gen_states.CONVERT_sw_fp_wp_state_wp15(self.sw_fp_wp_state_wp15)
        except:
            pass
        
        self.sw_fp_wp_state_wp14 = getUnsigned(packet[224:224], 'big', 4, 3)
        try:
            self.sw_fp_wp_state_wp14 = gen_states.CONVERT_sw_fp_wp_state_wp14(self.sw_fp_wp_state_wp14)
        except:
            pass
        
        self.sw_fp_wp_state_wp13 = getUnsigned(packet[224:224], 'big', 2, 3)
        try:
            self.sw_fp_wp_state_wp13 = gen_states.CONVERT_sw_fp_wp_state_wp13(self.sw_fp_wp_state_wp13)
        except:
            pass
        
        self.sw_fp_wp_state_wp12 = getUnsigned(packet[224:224], 'big', 0, 3)
        try:
            self.sw_fp_wp_state_wp12 = gen_states.CONVERT_sw_fp_wp_state_wp12(self.sw_fp_wp_state_wp12)
        except:
            pass
        
        self.sw_fp_wp_state_wp11 = getUnsigned(packet[225:225], 'big', 6, 3)
        try:
            self.sw_fp_wp_state_wp11 = gen_states.CONVERT_sw_fp_wp_state_wp11(self.sw_fp_wp_state_wp11)
        except:
            pass
        
        self.sw_fp_wp_state_wp10 = getUnsigned(packet[225:225], 'big', 4, 3)
        try:
            self.sw_fp_wp_state_wp10 = gen_states.CONVERT_sw_fp_wp_state_wp10(self.sw_fp_wp_state_wp10)
        except:
            pass
        
        self.sw_fp_wp_state_wp9 = getUnsigned(packet[225:225], 'big', 2, 3)
        try:
            self.sw_fp_wp_state_wp9 = gen_states.CONVERT_sw_fp_wp_state_wp9(self.sw_fp_wp_state_wp9)
        except:
            pass
        
        self.sw_fp_wp_state_wp8 = getUnsigned(packet[225:225], 'big', 0, 3)
        try:
            self.sw_fp_wp_state_wp8 = gen_states.CONVERT_sw_fp_wp_state_wp8(self.sw_fp_wp_state_wp8)
        except:
            pass
        
        self.sw_fp_wp_state_wp7 = getUnsigned(packet[226:226], 'big', 6, 3)
        try:
            self.sw_fp_wp_state_wp7 = gen_states.CONVERT_sw_fp_wp_state_wp7(self.sw_fp_wp_state_wp7)
        except:
            pass
        
        self.sw_fp_wp_state_wp6 = getUnsigned(packet[226:226], 'big', 4, 3)
        try:
            self.sw_fp_wp_state_wp6 = gen_states.CONVERT_sw_fp_wp_state_wp6(self.sw_fp_wp_state_wp6)
        except:
            pass
        
        self.sw_fp_wp_state_wp5 = getUnsigned(packet[226:226], 'big', 2, 3)
        try:
            self.sw_fp_wp_state_wp5 = gen_states.CONVERT_sw_fp_wp_state_wp5(self.sw_fp_wp_state_wp5)
        except:
            pass
        
        self.sw_fp_wp_state_wp4 = getUnsigned(packet[226:226], 'big', 0, 3)
        try:
            self.sw_fp_wp_state_wp4 = gen_states.CONVERT_sw_fp_wp_state_wp4(self.sw_fp_wp_state_wp4)
        except:
            pass
        
        self.sw_fp_wp_state_wp3 = getUnsigned(packet[227:227], 'big', 6, 3)
        try:
            self.sw_fp_wp_state_wp3 = gen_states.CONVERT_sw_fp_wp_state_wp3(self.sw_fp_wp_state_wp3)
        except:
            pass
        
        self.sw_fp_wp_state_wp2 = getUnsigned(packet[227:227], 'big', 4, 3)
        try:
            self.sw_fp_wp_state_wp2 = gen_states.CONVERT_sw_fp_wp_state_wp2(self.sw_fp_wp_state_wp2)
        except:
            pass
        
        self.sw_fp_wp_state_wp1 = getUnsigned(packet[227:227], 'big', 2, 3)
        try:
            self.sw_fp_wp_state_wp1 = gen_states.CONVERT_sw_fp_wp_state_wp1(self.sw_fp_wp_state_wp1)
        except:
            pass
        
        self.sw_fp_wp_state_wp0 = getUnsigned(packet[227:227], 'big', 0, 3)
        try:
            self.sw_fp_wp_state_wp0 = gen_states.CONVERT_sw_fp_wp_state_wp0(self.sw_fp_wp_state_wp0)
        except:
            pass
        
        self.sw_dsps_flare_magnitude = getUnsigned(packet[228:229], 'big', 0, 255)
        
        self.sw_dsps_flare_phase = getUnsigned(packet[229:230], 'big', 0, 255)
        
        self.sw_adcs_alive = getUnsigned(packet[230:231], 'big', 0, 255)
        try:
            self.sw_adcs_alive = gen_states.CONVERT_sw_adcs_alive(self.sw_adcs_alive)
        except:
            pass
        
        self.sw_adcs_att_valid = getUnsigned(packet[231:231], 'big', 7, 1)
        try:
            self.sw_adcs_att_valid = gen_states.CONVERT_sw_adcs_att_valid(self.sw_adcs_att_valid)
        except:
            pass
        
        self.sw_adcs_ref_valid = getUnsigned(packet[231:231], 'big', 6, 1)
        try:
            self.sw_adcs_ref_valid = gen_states.CONVERT_sw_adcs_ref_valid(self.sw_adcs_ref_valid)
        except:
            pass
        
        self.sw_adcs_time_valid = getUnsigned(packet[231:231], 'big', 5, 1)
        try:
            self.sw_adcs_time_valid = gen_states.CONVERT_sw_adcs_time_valid(self.sw_adcs_time_valid)
        except:
            pass
        
        self.sw_adcs_mode = getUnsigned(packet[231:231], 'big', 4, 1)
        try:
            self.sw_adcs_mode = gen_states.CONVERT_sw_adcs_mode(self.sw_adcs_mode)
        except:
            pass
        
        self.sw_adcs_recommend_sun_point = getUnsigned(packet[231:231], 'big', 3, 1)
        try:
            self.sw_adcs_recommend_sun_point = gen_states.CONVERT_sw_adcs_recommend_sun_point(self.sw_adcs_recommend_sun_point)
        except:
            pass
        
        self.sw_adcs_sun_point_state = getUnsigned(packet[231:231], 'big', 0, 7)
        try:
            self.sw_adcs_sun_point_state = gen_states.CONVERT_sw_adcs_sun_point_state(self.sw_adcs_sun_point_state)
        except:
            pass
        
        self.sw_adcs_analogs_voltage_2p5 = getUnsigned(packet[232:233], 'big', 0, 255)
        try:
            self.sw_adcs_analogs_voltage_2p5 = gen_eus.CONVERT_sw_adcs_analogs_voltage_2p5(self.sw_adcs_analogs_voltage_2p5)
        except:
            pass
        
        self.sw_adcs_analogs_voltage_1p8 = getUnsigned(packet[233:234], 'big', 0, 255)
        try:
            self.sw_adcs_analogs_voltage_1p8 = gen_eus.CONVERT_sw_adcs_analogs_voltage_1p8(self.sw_adcs_analogs_voltage_1p8)
        except:
            pass
        
        self.sw_adcs_analogs_voltage_1p2 = getUnsigned(packet[234:235], 'big', 0, 255)
        try:
            self.sw_adcs_analogs_voltage_1p2 = gen_eus.CONVERT_sw_adcs_analogs_voltage_1p2(self.sw_adcs_analogs_voltage_1p2)
        except:
            pass
        
        self.sw_adcs_analogs_det_temp = getSigned(packet[235:236], 'big', 0, 255)
        try:
            self.sw_adcs_analogs_det_temp = gen_eus.CONVERT_sw_adcs_analogs_det_temp(self.sw_adcs_analogs_det_temp)
        except:
            pass
        
        self.sw_adcs_cmd_acpt = getUnsigned(packet[236:237], 'big', 0, 255)
        
        self.sw_adcs_cmd_fail = getUnsigned(packet[237:238], 'big', 0, 255)
        
        self.sw_adcs_cmd_code = getUnsigned(packet[238:239], 'big', 0, 255)
        
        self.sw_dsps_cmd_accpt_cnt = getUnsigned(packet[239:240], 'big', 0, 255)
        
        self.sw_dsps_cmd_rjct_cnt = getUnsigned(packet[240:241], 'big', 0, 255)
        
        self.sw_csie_cmd_accpt_cnt = getUnsigned(packet[241:242], 'big', 0, 255)
        
        self.sw_csie_cmd_rjct_cnt = getUnsigned(packet[242:243], 'big', 0, 255)
        
        self.REUSABLE_SPARE_5 = getUnsigned(packet[243:243], 'big', 3, 31)
        
        self.sw_dsps_heater_enable = getUnsigned(packet[243:243], 'big', 2, 1)
        try:
            self.sw_dsps_heater_enable = gen_states.CONVERT_sw_dsps_heater_enable(self.sw_dsps_heater_enable)
        except:
            pass
        
        self.sw_csie_heater_enable = getUnsigned(packet[243:243], 'big', 1, 1)
        try:
            self.sw_csie_heater_enable = gen_states.CONVERT_sw_csie_heater_enable(self.sw_csie_heater_enable)
        except:
            pass
        
        self.sw_battery_heater_enable = getUnsigned(packet[243:243], 'big', 0, 1)
        try:
            self.sw_battery_heater_enable = gen_states.CONVERT_sw_battery_heater_enable(self.sw_battery_heater_enable)
        except:
            pass
        
        self.sw_xband_data_src = getUnsigned(packet[244:245], 'big', 0, 255)
        
        self.sw_stat_checksum = getUnsigned(packet[245:249], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class MODE_HK:
    def __str__(self):
        return 'MODE_HK'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_mode_hk = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_mode_hk = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.mode_clt_threshold = getUnsigned(packet[6:10], 'big', 0, 4294967295)
        
        self.mode_time_since_transition = getUnsigned(packet[10:14], 'big', 0, 4294967295)
        
        self.mode_clt_count = getUnsigned(packet[14:15], 'big', 0, 255)
        
        self.mode_system_mode = getUnsigned(packet[15:16], 'big', 0, 255)
        try:
            self.mode_system_mode = gen_states.CONVERT_mode_system_mode(self.mode_system_mode)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[16:17], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[17:18], 'big', 0, 255)
        
        self.mode_hk_checksum = getUnsigned(packet[18:22], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class XBAND_HK_PKT:
    def __str__(self):
        return 'XBAND_HK_PKT'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_xband_hk_pkt = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_xband_hk_pkt = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.xband_hk_input_volts = getUnsigned(packet[6:8], 'big', 0, 65535)
        try:
            self.xband_hk_input_volts = gen_eus.CONVERT_xband_hk_input_volts(self.xband_hk_input_volts)
        except:
            pass
        
        self.xband_hk_input_amps = getUnsigned(packet[8:10], 'big', 0, 65535)
        try:
            self.xband_hk_input_amps = gen_eus.CONVERT_xband_hk_input_amps(self.xband_hk_input_amps)
        except:
            pass
        
        self.xband_hk_5p0va_volts = getUnsigned(packet[10:12], 'big', 0, 65535)
        try:
            self.xband_hk_5p0va_volts = gen_eus.CONVERT_xband_hk_5p0va_volts(self.xband_hk_5p0va_volts)
        except:
            pass
        
        self.xband_hk_5p0va_amps = getUnsigned(packet[12:14], 'big', 0, 65535)
        try:
            self.xband_hk_5p0va_amps = gen_eus.CONVERT_xband_hk_5p0va_amps(self.xband_hk_5p0va_amps)
        except:
            pass
        
        self.xband_hk_3p3va_volts = getUnsigned(packet[14:16], 'big', 0, 65535)
        try:
            self.xband_hk_3p3va_volts = gen_eus.CONVERT_xband_hk_3p3va_volts(self.xband_hk_3p3va_volts)
        except:
            pass
        
        self.xband_hk_3p3va_amps = getUnsigned(packet[16:18], 'big', 0, 65535)
        try:
            self.xband_hk_3p3va_amps = gen_eus.CONVERT_xband_hk_3p3va_amps(self.xband_hk_3p3va_amps)
        except:
            pass
        
        self.xband_hk_3p3vd_amps = getUnsigned(packet[18:20], 'big', 0, 65535)
        try:
            self.xband_hk_3p3vd_amps = gen_eus.CONVERT_xband_hk_3p3vd_amps(self.xband_hk_3p3vd_amps)
        except:
            pass
        
        self.xband_hk_3p0va_volts = getUnsigned(packet[20:22], 'big', 0, 65535)
        try:
            self.xband_hk_3p0va_volts = gen_eus.CONVERT_xband_hk_3p0va_volts(self.xband_hk_3p0va_volts)
        except:
            pass
        
        self.xband_hk_3p0va_amps = getUnsigned(packet[22:24], 'big', 0, 65535)
        try:
            self.xband_hk_3p0va_amps = gen_eus.CONVERT_xband_hk_3p0va_amps(self.xband_hk_3p0va_amps)
        except:
            pass
        
        self.xband_hk_1p5vd_amps = getUnsigned(packet[24:26], 'big', 0, 65535)
        try:
            self.xband_hk_1p5vd_amps = gen_eus.CONVERT_xband_hk_1p5vd_amps(self.xband_hk_1p5vd_amps)
        except:
            pass
        
        self.xband_hk_power_amp_drain_volts = getUnsigned(packet[26:28], 'big', 0, 65535)
        try:
            self.xband_hk_power_amp_drain_volts = gen_eus.CONVERT_xband_hk_power_amp_drain_volts(self.xband_hk_power_amp_drain_volts)
        except:
            pass
        
        self.xband_hk_power_amp_drain_amps = getUnsigned(packet[28:30], 'big', 0, 65535)
        try:
            self.xband_hk_power_amp_drain_amps = gen_eus.CONVERT_xband_hk_power_amp_drain_amps(self.xband_hk_power_amp_drain_amps)
        except:
            pass
        
        self.xband_hk_amp_a_amps = getUnsigned(packet[30:32], 'big', 0, 65535)
        try:
            self.xband_hk_amp_a_amps = gen_eus.CONVERT_xband_hk_amp_a_amps(self.xband_hk_amp_a_amps)
        except:
            pass
        
        self.xband_hk_amp_b_amps = getUnsigned(packet[32:34], 'big', 0, 65535)
        try:
            self.xband_hk_amp_b_amps = gen_eus.CONVERT_xband_hk_amp_b_amps(self.xband_hk_amp_b_amps)
        except:
            pass
        
        self.xband_hk_amp_c_amps = getUnsigned(packet[34:36], 'big', 0, 65535)
        try:
            self.xband_hk_amp_c_amps = gen_eus.CONVERT_xband_hk_amp_c_amps(self.xband_hk_amp_c_amps)
        except:
            pass
        
        self.xband_hk_rf_data_src = getUnsigned(packet[36:37], 'big', 0, 255)
        try:
            self.xband_hk_rf_data_src = gen_states.CONVERT_xband_hk_rf_data_src(self.xband_hk_rf_data_src)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[37:38], 'big', 0, 255)
        
        try:
            self.xband_hk_power_amp_temp_degc = getFloat(packet[38:42], 'BIG')
        except:
            print('Could not decode floating point item "xband_hk_power_amp_temp_degc" in "xband_hk_pkt"')
            self.xband_hk_power_amp_temp_degc = 0
        
        self.xband_hk_power_amp_temp_raw = getUnsigned(packet[42:46], 'big', 0, 4294967295)
        
        self.xband_hk_num_cmd_timeouts = getUnsigned(packet[46:50], 'big', 0, 4294967295)
        
        self.xband_hk_time_since_resp = getUnsigned(packet[50:52], 'big', 0, 65535)
        
        self.xband_hk_pkt_checksum = getUnsigned(packet[52:56], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class XBAND_REGISTER_PKT:
    def __str__(self):
        return 'XBAND_REGISTER_PKT'

    def __init__(self, packet, header, file_origin):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.ccsdsSecHeader2_sec_xband_register_pkt = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.ccsdsSecHeader2_sub_xband_register_pkt = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.xband_spi_version = getUnsigned(packet[6:7], 'big', 0, 255)
        
        self.xband_spi_high_wr_byte = getUnsigned(packet[7:8], 'big', 0, 255)
        
        self.xband_spi_mid_wr_byte = getUnsigned(packet[8:9], 'big', 0, 255)
        
        self.xband_spi_low_wr_byte = getUnsigned(packet[9:10], 'big', 0, 255)
        
        self.xband_spi_read_addr = getUnsigned(packet[10:11], 'big', 0, 255)
        
        self.xband_spi_write_addr = getUnsigned(packet[11:12], 'big', 0, 255)
        
        self.xband_spi_high_rd_byte = getUnsigned(packet[12:13], 'big', 0, 255)
        
        self.xband_spi_mid_rd_byte = getUnsigned(packet[13:14], 'big', 0, 255)
        
        self.xband_spi_low_rd_byte = getUnsigned(packet[14:15], 'big', 0, 255)
        
        self.xband_mod_version = getUnsigned(packet[15:16], 'big', 0, 255)
        
        self.xband_mod_config = getUnsigned(packet[16:17], 'big', 0, 255)
        
        self.xband_mod_control = getUnsigned(packet[17:18], 'big', 0, 255)
        
        self.xband_mod_status = getUnsigned(packet[18:19], 'big', 0, 255)
        
        self.xband_mod_iq_control = getUnsigned(packet[19:20], 'big', 0, 255)
        
        self.xband_mod_clk_div_b0 = getUnsigned(packet[20:21], 'big', 0, 255)
        
        self.xband_mod_clk_div_b1 = getUnsigned(packet[21:22], 'big', 0, 255)
        
        self.xband_mod_clk_div_b2 = getUnsigned(packet[22:23], 'big', 0, 255)
        
        self.xband_mod_clk_div_b3 = getUnsigned(packet[23:24], 'big', 0, 255)
        
        self.xband_mod_cdma_code_sel = getUnsigned(packet[24:25], 'big', 0, 255)
        
        self.xband_mod_cdma_code_rep = getUnsigned(packet[25:26], 'big', 0, 255)
        
        self.xband_mod_aux_pn_mux = getUnsigned(packet[26:27], 'big', 0, 255)
        
        self.xband_mod_seq_status = getUnsigned(packet[27:28], 'big', 0, 255)
        
        self.xband_mod_seq_ctrl = getUnsigned(packet[28:29], 'big', 0, 255)
        
        self.xband_mod_seq_dly_sspa_on = getUnsigned(packet[29:30], 'big', 0, 255)
        
        self.xband_mod_seq_dly_sspa_off = getUnsigned(packet[30:31], 'big', 0, 255)
        
        self.xband_mod_seq_dly_rf_on = getUnsigned(packet[31:32], 'big', 0, 255)
        
        self.xband_mod_seq_dly_rf_off = getUnsigned(packet[32:33], 'big', 0, 255)
        
        self.xband_mod_seq_tx_timeout = getUnsigned(packet[33:34], 'big', 0, 255)
        
        self.xband_gpio_version = getUnsigned(packet[34:35], 'big', 0, 255)
        
        self.xband_gpio_reg_out = getUnsigned(packet[35:36], 'big', 0, 255)
        
        self.xband_gpio_reg_in = getUnsigned(packet[36:37], 'big', 0, 255)
        
        self.xband_gpio_pll_status = getUnsigned(packet[37:38], 'big', 0, 255)
        
        self.xband_ver_version = getUnsigned(packet[38:39], 'big', 0, 255)
        
        self.xband_adc_version = getUnsigned(packet[39:40], 'big', 0, 255)
        
        self.xband_adc1_ch7_lsb = getUnsigned(packet[40:41], 'big', 0, 255)
        
        self.xband_adc1_ch7_msb = getUnsigned(packet[41:42], 'big', 0, 255)
        
        self.xband_adc1_ch6_lsb = getUnsigned(packet[42:43], 'big', 0, 255)
        
        self.xband_adc1_ch6_msb = getUnsigned(packet[43:44], 'big', 0, 255)
        
        self.xband_adc1_ch5_lsb = getUnsigned(packet[44:45], 'big', 0, 255)
        
        self.xband_adc1_ch5_msb = getUnsigned(packet[45:46], 'big', 0, 255)
        
        self.xband_adc1_ch4_lsb = getUnsigned(packet[46:47], 'big', 0, 255)
        
        self.xband_adc1_ch4_msb = getUnsigned(packet[47:48], 'big', 0, 255)
        
        self.xband_adc1_ch3_lsb = getUnsigned(packet[48:49], 'big', 0, 255)
        
        self.xband_adc1_ch3_msb = getUnsigned(packet[49:50], 'big', 0, 255)
        
        self.xband_adc1_ch2_lsb = getUnsigned(packet[50:51], 'big', 0, 255)
        
        self.xband_adc1_ch2_msb = getUnsigned(packet[51:52], 'big', 0, 255)
        
        self.xband_adc1_ch1_lsb = getUnsigned(packet[52:53], 'big', 0, 255)
        
        self.xband_adc1_ch1_msb = getUnsigned(packet[53:54], 'big', 0, 255)
        
        self.xband_adc1_ch0_lsb = getUnsigned(packet[54:55], 'big', 0, 255)
        
        self.xband_adc1_ch0_msb = getUnsigned(packet[55:56], 'big', 0, 255)
        
        self.xband_adc0_ch7_lsb = getUnsigned(packet[56:57], 'big', 0, 255)
        
        self.xband_adc0_ch7_msb = getUnsigned(packet[57:58], 'big', 0, 255)
        
        self.xband_adc0_ch6_lsb = getUnsigned(packet[58:59], 'big', 0, 255)
        
        self.xband_adc0_ch6_msb = getUnsigned(packet[59:60], 'big', 0, 255)
        
        self.xband_adc0_ch5_lsb = getUnsigned(packet[60:61], 'big', 0, 255)
        
        self.xband_adc0_ch5_msb = getUnsigned(packet[61:62], 'big', 0, 255)
        
        self.xband_adc0_ch4_lsb = getUnsigned(packet[62:63], 'big', 0, 255)
        
        self.xband_adc0_ch4_msb = getUnsigned(packet[63:64], 'big', 0, 255)
        
        self.xband_adc0_ch3_lsb = getUnsigned(packet[64:65], 'big', 0, 255)
        
        self.xband_adc0_ch3_msb = getUnsigned(packet[65:66], 'big', 0, 255)
        
        self.xband_adc0_ch2_lsb = getUnsigned(packet[66:67], 'big', 0, 255)
        
        self.xband_adc0_ch2_msb = getUnsigned(packet[67:68], 'big', 0, 255)
        
        self.xband_adc0_ch1_lsb = getUnsigned(packet[68:69], 'big', 0, 255)
        
        self.xband_adc0_ch1_msb = getUnsigned(packet[69:70], 'big', 0, 255)
        
        self.xband_adc0_ch0_lsb = getUnsigned(packet[70:71], 'big', 0, 255)
        
        self.xband_adc0_ch0_msb = getUnsigned(packet[71:72], 'big', 0, 255)
        
        self.xband_flt_version = getUnsigned(packet[72:73], 'big', 0, 255)
        
        self.xband_flt_error_flg = getUnsigned(packet[73:74], 'big', 0, 255)
        
        self.xband_virt_err_codes_0 = getUnsigned(packet[74:76], 'big', 0, 65535)
        
        self.xband_virt_err_codes_1 = getUnsigned(packet[76:78], 'big', 0, 65535)
        
        self.xband_virt_err_codes_2 = getUnsigned(packet[78:80], 'big', 0, 65535)
        
        self.xband_virt_err_codes_3 = getUnsigned(packet[80:82], 'big', 0, 65535)
        
        self.xband_virt_err_codes_4 = getUnsigned(packet[82:84], 'big', 0, 65535)
        
        self.xband_virt_err_codes_5 = getUnsigned(packet[84:86], 'big', 0, 65535)
        
        self.xband_virt_err_codes_6 = getUnsigned(packet[86:88], 'big', 0, 65535)
        
        self.xband_virt_err_codes_7 = getUnsigned(packet[88:90], 'big', 0, 65535)
        
        self.xband_virt_err_codes_8 = getUnsigned(packet[90:92], 'big', 0, 65535)
        
        self.xband_virt_err_codes_9 = getUnsigned(packet[92:94], 'big', 0, 65535)
        
        self.xband_virt_err_codes_10 = getUnsigned(packet[94:96], 'big', 0, 65535)
        
        self.xband_virt_err_codes_11 = getUnsigned(packet[96:98], 'big', 0, 65535)
        
        self.xband_virt_err_codes_12 = getUnsigned(packet[98:100], 'big', 0, 65535)
        
        self.xband_virt_err_codes_13 = getUnsigned(packet[100:102], 'big', 0, 65535)
        
        self.xband_virt_err_codes_14 = getUnsigned(packet[102:104], 'big', 0, 65535)
        
        self.xband_virt_err_codes_15 = getUnsigned(packet[104:106], 'big', 0, 65535)
        
        self.xband_virt_low_lim_thresh_0 = getUnsigned(packet[106:108], 'big', 0, 65535)
        
        self.xband_virt_low_lim_thresh_1 = getUnsigned(packet[108:110], 'big', 0, 65535)
        
        self.xband_virt_low_lim_thresh_2 = getUnsigned(packet[110:112], 'big', 0, 65535)
        
        self.xband_virt_low_lim_thresh_3 = getUnsigned(packet[112:114], 'big', 0, 65535)
        
        self.xband_virt_low_lim_thresh_4 = getUnsigned(packet[114:116], 'big', 0, 65535)
        
        self.xband_virt_low_lim_thresh_5 = getUnsigned(packet[116:118], 'big', 0, 65535)
        
        self.xband_virt_low_lim_thresh_6 = getUnsigned(packet[118:120], 'big', 0, 65535)
        
        self.xband_virt_low_lim_thresh_7 = getUnsigned(packet[120:122], 'big', 0, 65535)
        
        self.xband_virt_low_lim_thresh_8 = getUnsigned(packet[122:124], 'big', 0, 65535)
        
        self.xband_virt_low_lim_thresh_9 = getUnsigned(packet[124:126], 'big', 0, 65535)
        
        self.xband_virt_low_lim_thresh_10 = getUnsigned(packet[126:128], 'big', 0, 65535)
        
        self.xband_virt_low_lim_thresh_11 = getUnsigned(packet[128:130], 'big', 0, 65535)
        
        self.xband_virt_low_lim_thresh_12 = getUnsigned(packet[130:132], 'big', 0, 65535)
        
        self.xband_virt_low_lim_thresh_13 = getUnsigned(packet[132:134], 'big', 0, 65535)
        
        self.xband_virt_low_lim_thresh_14 = getUnsigned(packet[134:136], 'big', 0, 65535)
        
        self.xband_virt_low_lim_thresh_15 = getUnsigned(packet[136:138], 'big', 0, 65535)
        
        self.xband_virt_upper_lim_thresh_0 = getUnsigned(packet[138:140], 'big', 0, 65535)
        
        self.xband_virt_upper_lim_thresh_1 = getUnsigned(packet[140:142], 'big', 0, 65535)
        
        self.xband_virt_upper_lim_thresh_2 = getUnsigned(packet[142:144], 'big', 0, 65535)
        
        self.xband_virt_upper_lim_thresh_3 = getUnsigned(packet[144:146], 'big', 0, 65535)
        
        self.xband_virt_upper_lim_thresh_4 = getUnsigned(packet[146:148], 'big', 0, 65535)
        
        self.xband_virt_upper_lim_thresh_5 = getUnsigned(packet[148:150], 'big', 0, 65535)
        
        self.xband_virt_upper_lim_thresh_6 = getUnsigned(packet[150:152], 'big', 0, 65535)
        
        self.xband_virt_upper_lim_thresh_7 = getUnsigned(packet[152:154], 'big', 0, 65535)
        
        self.xband_virt_upper_lim_thresh_8 = getUnsigned(packet[154:156], 'big', 0, 65535)
        
        self.xband_virt_upper_lim_thresh_9 = getUnsigned(packet[156:158], 'big', 0, 65535)
        
        self.xband_virt_upper_lim_thresh_10 = getUnsigned(packet[158:160], 'big', 0, 65535)
        
        self.xband_virt_upper_lim_thresh_11 = getUnsigned(packet[160:162], 'big', 0, 65535)
        
        self.xband_virt_upper_lim_thresh_12 = getUnsigned(packet[162:164], 'big', 0, 65535)
        
        self.xband_virt_upper_lim_thresh_13 = getUnsigned(packet[164:166], 'big', 0, 65535)
        
        self.xband_virt_upper_lim_thresh_14 = getUnsigned(packet[166:168], 'big', 0, 65535)
        
        self.xband_virt_upper_lim_thresh_15 = getUnsigned(packet[168:170], 'big', 0, 65535)
        
        self.xband_virt_low_lim_resp_0 = getUnsigned(packet[170:172], 'big', 0, 65535)
        
        self.xband_virt_low_lim_resp_1 = getUnsigned(packet[172:174], 'big', 0, 65535)
        
        self.xband_virt_low_lim_resp_2 = getUnsigned(packet[174:176], 'big', 0, 65535)
        
        self.xband_virt_low_lim_resp_3 = getUnsigned(packet[176:178], 'big', 0, 65535)
        
        self.xband_virt_low_lim_resp_4 = getUnsigned(packet[178:180], 'big', 0, 65535)
        
        self.xband_virt_low_lim_resp_5 = getUnsigned(packet[180:182], 'big', 0, 65535)
        
        self.xband_virt_low_lim_resp_6 = getUnsigned(packet[182:184], 'big', 0, 65535)
        
        self.xband_virt_low_lim_resp_7 = getUnsigned(packet[184:186], 'big', 0, 65535)
        
        self.xband_virt_low_lim_resp_8 = getUnsigned(packet[186:188], 'big', 0, 65535)
        
        self.xband_virt_low_lim_resp_9 = getUnsigned(packet[188:190], 'big', 0, 65535)
        
        self.xband_virt_low_lim_resp_10 = getUnsigned(packet[190:192], 'big', 0, 65535)
        
        self.xband_virt_low_lim_resp_11 = getUnsigned(packet[192:194], 'big', 0, 65535)
        
        self.xband_virt_low_lim_resp_12 = getUnsigned(packet[194:196], 'big', 0, 65535)
        
        self.xband_virt_low_lim_resp_13 = getUnsigned(packet[196:198], 'big', 0, 65535)
        
        self.xband_virt_low_lim_resp_14 = getUnsigned(packet[198:200], 'big', 0, 65535)
        
        self.xband_virt_low_lim_resp_15 = getUnsigned(packet[200:202], 'big', 0, 65535)
        
        self.xband_virt_upper_lim_response_0 = getUnsigned(packet[202:204], 'big', 0, 65535)
        
        self.xband_virt_upper_lim_response_1 = getUnsigned(packet[204:206], 'big', 0, 65535)
        
        self.xband_virt_upper_lim_response_2 = getUnsigned(packet[206:208], 'big', 0, 65535)
        
        self.xband_virt_upper_lim_response_3 = getUnsigned(packet[208:210], 'big', 0, 65535)
        
        self.xband_virt_upper_lim_response_4 = getUnsigned(packet[210:212], 'big', 0, 65535)
        
        self.xband_virt_upper_lim_response_5 = getUnsigned(packet[212:214], 'big', 0, 65535)
        
        self.xband_virt_upper_lim_response_6 = getUnsigned(packet[214:216], 'big', 0, 65535)
        
        self.xband_virt_upper_lim_response_7 = getUnsigned(packet[216:218], 'big', 0, 65535)
        
        self.xband_virt_upper_lim_response_8 = getUnsigned(packet[218:220], 'big', 0, 65535)
        
        self.xband_virt_upper_lim_response_9 = getUnsigned(packet[220:222], 'big', 0, 65535)
        
        self.xband_virt_upper_lim_response_10 = getUnsigned(packet[222:224], 'big', 0, 65535)
        
        self.xband_virt_upper_lim_response_11 = getUnsigned(packet[224:226], 'big', 0, 65535)
        
        self.xband_virt_upper_lim_response_12 = getUnsigned(packet[226:228], 'big', 0, 65535)
        
        self.xband_virt_upper_lim_response_13 = getUnsigned(packet[228:230], 'big', 0, 65535)
        
        self.xband_virt_upper_lim_response_14 = getUnsigned(packet[230:232], 'big', 0, 65535)
        
        self.xband_virt_upper_lim_response_15 = getUnsigned(packet[232:234], 'big', 0, 65535)
        
        self.xband_read_cmd_result = getUnsigned(packet[234:235], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[235:236], 'big', 0, 255)
        
        self.xband_time_since_resp = getUnsigned(packet[236:238], 'big', 0, 65535)
        
        self.xband_register_pkt_checksum = getUnsigned(packet[238:242], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

        self.file_origin = file_origin

class TBL_FP_WATCH:
    def __str__(self):
        return 'TBL_FP_WATCH'

    def __init__(self, packet, pkt_time, tbl_id, file_origin):
        self.pkt_time = pkt_time
        self.file_origin = file_origin
        
        self.fp_watch_mask0 = getUnsigned(packet[0:4], 'little', 0, 4294967295)
        
        self.fp_watch_threshold0 = getUnsigned(packet[4:8], 'little', 0, 4294967295)
        
        self.fp_watch_msg0 = getUnsigned(packet[8:10], 'little', 0, 65535)
        try:
            self.fp_watch_msg0 = gen_states.CONVERT_fp_watch_msg0(self.fp_watch_msg0)
        except:
            pass
        
        self.fp_watch_offset0 = getUnsigned(packet[10:12], 'little', 0, 65535)
        
        self.fp_watch_response0 = getUnsigned(packet[12:14], 'little', 0, 65535)
        
        self.fp_watch_persist0 = getUnsigned(packet[14:16], 'little', 0, 65535)
        
        self.fp_watch_state0 = getUnsigned(packet[16:17], 'little', 0, 255)
        try:
            self.fp_watch_state0 = gen_states.CONVERT_fp_watch_state0(self.fp_watch_state0)
        except:
            pass
        
        self.fp_watch_type0 = getUnsigned(packet[17:18], 'little', 0, 255)
        try:
            self.fp_watch_type0 = gen_states.CONVERT_fp_watch_type0(self.fp_watch_type0)
        except:
            pass
        
        self.fp_watch_op0 = getUnsigned(packet[18:19], 'little', 0, 255)
        try:
            self.fp_watch_op0 = gen_states.CONVERT_fp_watch_op0(self.fp_watch_op0)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[19:20], 'big', 0, 255)
        
        self.fp_watch_mask1 = getUnsigned(packet[20:24], 'little', 0, 4294967295)
        
        self.fp_watch_threshold1 = getUnsigned(packet[24:28], 'little', 0, 4294967295)
        
        self.fp_watch_msg1 = getUnsigned(packet[28:30], 'little', 0, 65535)
        try:
            self.fp_watch_msg1 = gen_states.CONVERT_fp_watch_msg1(self.fp_watch_msg1)
        except:
            pass
        
        self.fp_watch_offset1 = getUnsigned(packet[30:32], 'little', 0, 65535)
        
        self.fp_watch_response1 = getUnsigned(packet[32:34], 'little', 0, 65535)
        
        self.fp_watch_persist1 = getUnsigned(packet[34:36], 'little', 0, 65535)
        
        self.fp_watch_state1 = getUnsigned(packet[36:37], 'little', 0, 255)
        try:
            self.fp_watch_state1 = gen_states.CONVERT_fp_watch_state1(self.fp_watch_state1)
        except:
            pass
        
        self.fp_watch_type1 = getUnsigned(packet[37:38], 'little', 0, 255)
        try:
            self.fp_watch_type1 = gen_states.CONVERT_fp_watch_type1(self.fp_watch_type1)
        except:
            pass
        
        self.fp_watch_op1 = getUnsigned(packet[38:39], 'little', 0, 255)
        try:
            self.fp_watch_op1 = gen_states.CONVERT_fp_watch_op1(self.fp_watch_op1)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[39:40], 'big', 0, 255)
        
        self.fp_watch_mask2 = getUnsigned(packet[40:44], 'little', 0, 4294967295)
        
        self.fp_watch_threshold2 = getUnsigned(packet[44:48], 'little', 0, 4294967295)
        
        self.fp_watch_msg2 = getUnsigned(packet[48:50], 'little', 0, 65535)
        try:
            self.fp_watch_msg2 = gen_states.CONVERT_fp_watch_msg2(self.fp_watch_msg2)
        except:
            pass
        
        self.fp_watch_offset2 = getUnsigned(packet[50:52], 'little', 0, 65535)
        
        self.fp_watch_response2 = getUnsigned(packet[52:54], 'little', 0, 65535)
        
        self.fp_watch_persist2 = getUnsigned(packet[54:56], 'little', 0, 65535)
        
        self.fp_watch_state2 = getUnsigned(packet[56:57], 'little', 0, 255)
        try:
            self.fp_watch_state2 = gen_states.CONVERT_fp_watch_state2(self.fp_watch_state2)
        except:
            pass
        
        self.fp_watch_type2 = getUnsigned(packet[57:58], 'little', 0, 255)
        try:
            self.fp_watch_type2 = gen_states.CONVERT_fp_watch_type2(self.fp_watch_type2)
        except:
            pass
        
        self.fp_watch_op2 = getUnsigned(packet[58:59], 'little', 0, 255)
        try:
            self.fp_watch_op2 = gen_states.CONVERT_fp_watch_op2(self.fp_watch_op2)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[59:60], 'big', 0, 255)
        
        self.fp_watch_mask3 = getUnsigned(packet[60:64], 'little', 0, 4294967295)
        
        self.fp_watch_threshold3 = getUnsigned(packet[64:68], 'little', 0, 4294967295)
        
        self.fp_watch_msg3 = getUnsigned(packet[68:70], 'little', 0, 65535)
        try:
            self.fp_watch_msg3 = gen_states.CONVERT_fp_watch_msg3(self.fp_watch_msg3)
        except:
            pass
        
        self.fp_watch_offset3 = getUnsigned(packet[70:72], 'little', 0, 65535)
        
        self.fp_watch_response3 = getUnsigned(packet[72:74], 'little', 0, 65535)
        
        self.fp_watch_persist3 = getUnsigned(packet[74:76], 'little', 0, 65535)
        
        self.fp_watch_state3 = getUnsigned(packet[76:77], 'little', 0, 255)
        try:
            self.fp_watch_state3 = gen_states.CONVERT_fp_watch_state3(self.fp_watch_state3)
        except:
            pass
        
        self.fp_watch_type3 = getUnsigned(packet[77:78], 'little', 0, 255)
        try:
            self.fp_watch_type3 = gen_states.CONVERT_fp_watch_type3(self.fp_watch_type3)
        except:
            pass
        
        self.fp_watch_op3 = getUnsigned(packet[78:79], 'little', 0, 255)
        try:
            self.fp_watch_op3 = gen_states.CONVERT_fp_watch_op3(self.fp_watch_op3)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[79:80], 'big', 0, 255)
        
        self.fp_watch_mask4 = getUnsigned(packet[80:84], 'little', 0, 4294967295)
        
        self.fp_watch_threshold4 = getUnsigned(packet[84:88], 'little', 0, 4294967295)
        
        self.fp_watch_msg4 = getUnsigned(packet[88:90], 'little', 0, 65535)
        try:
            self.fp_watch_msg4 = gen_states.CONVERT_fp_watch_msg4(self.fp_watch_msg4)
        except:
            pass
        
        self.fp_watch_offset4 = getUnsigned(packet[90:92], 'little', 0, 65535)
        
        self.fp_watch_response4 = getUnsigned(packet[92:94], 'little', 0, 65535)
        
        self.fp_watch_persist4 = getUnsigned(packet[94:96], 'little', 0, 65535)
        
        self.fp_watch_state4 = getUnsigned(packet[96:97], 'little', 0, 255)
        try:
            self.fp_watch_state4 = gen_states.CONVERT_fp_watch_state4(self.fp_watch_state4)
        except:
            pass
        
        self.fp_watch_type4 = getUnsigned(packet[97:98], 'little', 0, 255)
        try:
            self.fp_watch_type4 = gen_states.CONVERT_fp_watch_type4(self.fp_watch_type4)
        except:
            pass
        
        self.fp_watch_op4 = getUnsigned(packet[98:99], 'little', 0, 255)
        try:
            self.fp_watch_op4 = gen_states.CONVERT_fp_watch_op4(self.fp_watch_op4)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[99:100], 'big', 0, 255)
        
        self.fp_watch_mask5 = getUnsigned(packet[100:104], 'little', 0, 4294967295)
        
        self.fp_watch_threshold5 = getUnsigned(packet[104:108], 'little', 0, 4294967295)
        
        self.fp_watch_msg5 = getUnsigned(packet[108:110], 'little', 0, 65535)
        try:
            self.fp_watch_msg5 = gen_states.CONVERT_fp_watch_msg5(self.fp_watch_msg5)
        except:
            pass
        
        self.fp_watch_offset5 = getUnsigned(packet[110:112], 'little', 0, 65535)
        
        self.fp_watch_response5 = getUnsigned(packet[112:114], 'little', 0, 65535)
        
        self.fp_watch_persist5 = getUnsigned(packet[114:116], 'little', 0, 65535)
        
        self.fp_watch_state5 = getUnsigned(packet[116:117], 'little', 0, 255)
        try:
            self.fp_watch_state5 = gen_states.CONVERT_fp_watch_state5(self.fp_watch_state5)
        except:
            pass
        
        self.fp_watch_type5 = getUnsigned(packet[117:118], 'little', 0, 255)
        try:
            self.fp_watch_type5 = gen_states.CONVERT_fp_watch_type5(self.fp_watch_type5)
        except:
            pass
        
        self.fp_watch_op5 = getUnsigned(packet[118:119], 'little', 0, 255)
        try:
            self.fp_watch_op5 = gen_states.CONVERT_fp_watch_op5(self.fp_watch_op5)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[119:120], 'big', 0, 255)
        
        self.fp_watch_mask6 = getUnsigned(packet[120:124], 'little', 0, 4294967295)
        
        self.fp_watch_threshold6 = getUnsigned(packet[124:128], 'little', 0, 4294967295)
        
        self.fp_watch_msg6 = getUnsigned(packet[128:130], 'little', 0, 65535)
        try:
            self.fp_watch_msg6 = gen_states.CONVERT_fp_watch_msg6(self.fp_watch_msg6)
        except:
            pass
        
        self.fp_watch_offset6 = getUnsigned(packet[130:132], 'little', 0, 65535)
        
        self.fp_watch_response6 = getUnsigned(packet[132:134], 'little', 0, 65535)
        
        self.fp_watch_persist6 = getUnsigned(packet[134:136], 'little', 0, 65535)
        
        self.fp_watch_state6 = getUnsigned(packet[136:137], 'little', 0, 255)
        try:
            self.fp_watch_state6 = gen_states.CONVERT_fp_watch_state6(self.fp_watch_state6)
        except:
            pass
        
        self.fp_watch_type6 = getUnsigned(packet[137:138], 'little', 0, 255)
        try:
            self.fp_watch_type6 = gen_states.CONVERT_fp_watch_type6(self.fp_watch_type6)
        except:
            pass
        
        self.fp_watch_op6 = getUnsigned(packet[138:139], 'little', 0, 255)
        try:
            self.fp_watch_op6 = gen_states.CONVERT_fp_watch_op6(self.fp_watch_op6)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[139:140], 'big', 0, 255)
        
        self.fp_watch_mask7 = getUnsigned(packet[140:144], 'little', 0, 4294967295)
        
        self.fp_watch_threshold7 = getUnsigned(packet[144:148], 'little', 0, 4294967295)
        
        self.fp_watch_msg7 = getUnsigned(packet[148:150], 'little', 0, 65535)
        try:
            self.fp_watch_msg7 = gen_states.CONVERT_fp_watch_msg7(self.fp_watch_msg7)
        except:
            pass
        
        self.fp_watch_offset7 = getUnsigned(packet[150:152], 'little', 0, 65535)
        
        self.fp_watch_response7 = getUnsigned(packet[152:154], 'little', 0, 65535)
        
        self.fp_watch_persist7 = getUnsigned(packet[154:156], 'little', 0, 65535)
        
        self.fp_watch_state7 = getUnsigned(packet[156:157], 'little', 0, 255)
        try:
            self.fp_watch_state7 = gen_states.CONVERT_fp_watch_state7(self.fp_watch_state7)
        except:
            pass
        
        self.fp_watch_type7 = getUnsigned(packet[157:158], 'little', 0, 255)
        try:
            self.fp_watch_type7 = gen_states.CONVERT_fp_watch_type7(self.fp_watch_type7)
        except:
            pass
        
        self.fp_watch_op7 = getUnsigned(packet[158:159], 'little', 0, 255)
        try:
            self.fp_watch_op7 = gen_states.CONVERT_fp_watch_op7(self.fp_watch_op7)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[159:160], 'big', 0, 255)
        
        self.fp_watch_mask8 = getUnsigned(packet[160:164], 'little', 0, 4294967295)
        
        self.fp_watch_threshold8 = getUnsigned(packet[164:168], 'little', 0, 4294967295)
        
        self.fp_watch_msg8 = getUnsigned(packet[168:170], 'little', 0, 65535)
        try:
            self.fp_watch_msg8 = gen_states.CONVERT_fp_watch_msg8(self.fp_watch_msg8)
        except:
            pass
        
        self.fp_watch_offset8 = getUnsigned(packet[170:172], 'little', 0, 65535)
        
        self.fp_watch_response8 = getUnsigned(packet[172:174], 'little', 0, 65535)
        
        self.fp_watch_persist8 = getUnsigned(packet[174:176], 'little', 0, 65535)
        
        self.fp_watch_state8 = getUnsigned(packet[176:177], 'little', 0, 255)
        try:
            self.fp_watch_state8 = gen_states.CONVERT_fp_watch_state8(self.fp_watch_state8)
        except:
            pass
        
        self.fp_watch_type8 = getUnsigned(packet[177:178], 'little', 0, 255)
        try:
            self.fp_watch_type8 = gen_states.CONVERT_fp_watch_type8(self.fp_watch_type8)
        except:
            pass
        
        self.fp_watch_op8 = getUnsigned(packet[178:179], 'little', 0, 255)
        try:
            self.fp_watch_op8 = gen_states.CONVERT_fp_watch_op8(self.fp_watch_op8)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[179:180], 'big', 0, 255)
        
        self.fp_watch_mask9 = getUnsigned(packet[180:184], 'little', 0, 4294967295)
        
        self.fp_watch_threshold9 = getUnsigned(packet[184:188], 'little', 0, 4294967295)
        
        self.fp_watch_msg9 = getUnsigned(packet[188:190], 'little', 0, 65535)
        try:
            self.fp_watch_msg9 = gen_states.CONVERT_fp_watch_msg9(self.fp_watch_msg9)
        except:
            pass
        
        self.fp_watch_offset9 = getUnsigned(packet[190:192], 'little', 0, 65535)
        
        self.fp_watch_response9 = getUnsigned(packet[192:194], 'little', 0, 65535)
        
        self.fp_watch_persist9 = getUnsigned(packet[194:196], 'little', 0, 65535)
        
        self.fp_watch_state9 = getUnsigned(packet[196:197], 'little', 0, 255)
        try:
            self.fp_watch_state9 = gen_states.CONVERT_fp_watch_state9(self.fp_watch_state9)
        except:
            pass
        
        self.fp_watch_type9 = getUnsigned(packet[197:198], 'little', 0, 255)
        try:
            self.fp_watch_type9 = gen_states.CONVERT_fp_watch_type9(self.fp_watch_type9)
        except:
            pass
        
        self.fp_watch_op9 = getUnsigned(packet[198:199], 'little', 0, 255)
        try:
            self.fp_watch_op9 = gen_states.CONVERT_fp_watch_op9(self.fp_watch_op9)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[199:200], 'big', 0, 255)
        
        self.fp_watch_mask10 = getUnsigned(packet[200:204], 'little', 0, 4294967295)
        
        self.fp_watch_threshold10 = getUnsigned(packet[204:208], 'little', 0, 4294967295)
        
        self.fp_watch_msg10 = getUnsigned(packet[208:210], 'little', 0, 65535)
        try:
            self.fp_watch_msg10 = gen_states.CONVERT_fp_watch_msg10(self.fp_watch_msg10)
        except:
            pass
        
        self.fp_watch_offset10 = getUnsigned(packet[210:212], 'little', 0, 65535)
        
        self.fp_watch_response10 = getUnsigned(packet[212:214], 'little', 0, 65535)
        
        self.fp_watch_persist10 = getUnsigned(packet[214:216], 'little', 0, 65535)
        
        self.fp_watch_state10 = getUnsigned(packet[216:217], 'little', 0, 255)
        try:
            self.fp_watch_state10 = gen_states.CONVERT_fp_watch_state10(self.fp_watch_state10)
        except:
            pass
        
        self.fp_watch_type10 = getUnsigned(packet[217:218], 'little', 0, 255)
        try:
            self.fp_watch_type10 = gen_states.CONVERT_fp_watch_type10(self.fp_watch_type10)
        except:
            pass
        
        self.fp_watch_op10 = getUnsigned(packet[218:219], 'little', 0, 255)
        try:
            self.fp_watch_op10 = gen_states.CONVERT_fp_watch_op10(self.fp_watch_op10)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[219:220], 'big', 0, 255)
        
        self.fp_watch_mask11 = getUnsigned(packet[220:224], 'little', 0, 4294967295)
        
        self.fp_watch_threshold11 = getUnsigned(packet[224:228], 'little', 0, 4294967295)
        
        self.fp_watch_msg11 = getUnsigned(packet[228:230], 'little', 0, 65535)
        try:
            self.fp_watch_msg11 = gen_states.CONVERT_fp_watch_msg11(self.fp_watch_msg11)
        except:
            pass
        
        self.fp_watch_offset11 = getUnsigned(packet[230:232], 'little', 0, 65535)
        
        self.fp_watch_response11 = getUnsigned(packet[232:234], 'little', 0, 65535)
        
        self.fp_watch_persist11 = getUnsigned(packet[234:236], 'little', 0, 65535)
        
        self.fp_watch_state11 = getUnsigned(packet[236:237], 'little', 0, 255)
        try:
            self.fp_watch_state11 = gen_states.CONVERT_fp_watch_state11(self.fp_watch_state11)
        except:
            pass
        
        self.fp_watch_type11 = getUnsigned(packet[237:238], 'little', 0, 255)
        try:
            self.fp_watch_type11 = gen_states.CONVERT_fp_watch_type11(self.fp_watch_type11)
        except:
            pass
        
        self.fp_watch_op11 = getUnsigned(packet[238:239], 'little', 0, 255)
        try:
            self.fp_watch_op11 = gen_states.CONVERT_fp_watch_op11(self.fp_watch_op11)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[239:240], 'big', 0, 255)
        
        self.fp_watch_mask12 = getUnsigned(packet[240:244], 'little', 0, 4294967295)
        
        self.fp_watch_threshold12 = getUnsigned(packet[244:248], 'little', 0, 4294967295)
        
        self.fp_watch_msg12 = getUnsigned(packet[248:250], 'little', 0, 65535)
        try:
            self.fp_watch_msg12 = gen_states.CONVERT_fp_watch_msg12(self.fp_watch_msg12)
        except:
            pass
        
        self.fp_watch_offset12 = getUnsigned(packet[250:252], 'little', 0, 65535)
        
        self.fp_watch_response12 = getUnsigned(packet[252:254], 'little', 0, 65535)
        
        self.fp_watch_persist12 = getUnsigned(packet[254:256], 'little', 0, 65535)
        
        self.fp_watch_state12 = getUnsigned(packet[256:257], 'little', 0, 255)
        try:
            self.fp_watch_state12 = gen_states.CONVERT_fp_watch_state12(self.fp_watch_state12)
        except:
            pass
        
        self.fp_watch_type12 = getUnsigned(packet[257:258], 'little', 0, 255)
        try:
            self.fp_watch_type12 = gen_states.CONVERT_fp_watch_type12(self.fp_watch_type12)
        except:
            pass
        
        self.fp_watch_op12 = getUnsigned(packet[258:259], 'little', 0, 255)
        try:
            self.fp_watch_op12 = gen_states.CONVERT_fp_watch_op12(self.fp_watch_op12)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[259:260], 'big', 0, 255)
        
        self.fp_watch_mask13 = getUnsigned(packet[260:264], 'little', 0, 4294967295)
        
        self.fp_watch_threshold13 = getUnsigned(packet[264:268], 'little', 0, 4294967295)
        
        self.fp_watch_msg13 = getUnsigned(packet[268:270], 'little', 0, 65535)
        try:
            self.fp_watch_msg13 = gen_states.CONVERT_fp_watch_msg13(self.fp_watch_msg13)
        except:
            pass
        
        self.fp_watch_offset13 = getUnsigned(packet[270:272], 'little', 0, 65535)
        
        self.fp_watch_response13 = getUnsigned(packet[272:274], 'little', 0, 65535)
        
        self.fp_watch_persist13 = getUnsigned(packet[274:276], 'little', 0, 65535)
        
        self.fp_watch_state13 = getUnsigned(packet[276:277], 'little', 0, 255)
        try:
            self.fp_watch_state13 = gen_states.CONVERT_fp_watch_state13(self.fp_watch_state13)
        except:
            pass
        
        self.fp_watch_type13 = getUnsigned(packet[277:278], 'little', 0, 255)
        try:
            self.fp_watch_type13 = gen_states.CONVERT_fp_watch_type13(self.fp_watch_type13)
        except:
            pass
        
        self.fp_watch_op13 = getUnsigned(packet[278:279], 'little', 0, 255)
        try:
            self.fp_watch_op13 = gen_states.CONVERT_fp_watch_op13(self.fp_watch_op13)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[279:280], 'big', 0, 255)
        
        self.fp_watch_mask14 = getUnsigned(packet[280:284], 'little', 0, 4294967295)
        
        self.fp_watch_threshold14 = getUnsigned(packet[284:288], 'little', 0, 4294967295)
        
        self.fp_watch_msg14 = getUnsigned(packet[288:290], 'little', 0, 65535)
        try:
            self.fp_watch_msg14 = gen_states.CONVERT_fp_watch_msg14(self.fp_watch_msg14)
        except:
            pass
        
        self.fp_watch_offset14 = getUnsigned(packet[290:292], 'little', 0, 65535)
        
        self.fp_watch_response14 = getUnsigned(packet[292:294], 'little', 0, 65535)
        
        self.fp_watch_persist14 = getUnsigned(packet[294:296], 'little', 0, 65535)
        
        self.fp_watch_state14 = getUnsigned(packet[296:297], 'little', 0, 255)
        try:
            self.fp_watch_state14 = gen_states.CONVERT_fp_watch_state14(self.fp_watch_state14)
        except:
            pass
        
        self.fp_watch_type14 = getUnsigned(packet[297:298], 'little', 0, 255)
        try:
            self.fp_watch_type14 = gen_states.CONVERT_fp_watch_type14(self.fp_watch_type14)
        except:
            pass
        
        self.fp_watch_op14 = getUnsigned(packet[298:299], 'little', 0, 255)
        try:
            self.fp_watch_op14 = gen_states.CONVERT_fp_watch_op14(self.fp_watch_op14)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[299:300], 'big', 0, 255)
        
        self.fp_watch_mask15 = getUnsigned(packet[300:304], 'little', 0, 4294967295)
        
        self.fp_watch_threshold15 = getUnsigned(packet[304:308], 'little', 0, 4294967295)
        
        self.fp_watch_msg15 = getUnsigned(packet[308:310], 'little', 0, 65535)
        try:
            self.fp_watch_msg15 = gen_states.CONVERT_fp_watch_msg15(self.fp_watch_msg15)
        except:
            pass
        
        self.fp_watch_offset15 = getUnsigned(packet[310:312], 'little', 0, 65535)
        
        self.fp_watch_response15 = getUnsigned(packet[312:314], 'little', 0, 65535)
        
        self.fp_watch_persist15 = getUnsigned(packet[314:316], 'little', 0, 65535)
        
        self.fp_watch_state15 = getUnsigned(packet[316:317], 'little', 0, 255)
        try:
            self.fp_watch_state15 = gen_states.CONVERT_fp_watch_state15(self.fp_watch_state15)
        except:
            pass
        
        self.fp_watch_type15 = getUnsigned(packet[317:318], 'little', 0, 255)
        try:
            self.fp_watch_type15 = gen_states.CONVERT_fp_watch_type15(self.fp_watch_type15)
        except:
            pass
        
        self.fp_watch_op15 = getUnsigned(packet[318:319], 'little', 0, 255)
        try:
            self.fp_watch_op15 = gen_states.CONVERT_fp_watch_op15(self.fp_watch_op15)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[319:320], 'big', 0, 255)

class TBL_STORAGE:
    def __str__(self):
        return 'TBL_STORAGE'

    def __init__(self, packet, pkt_time, tbl_id, file_origin):
        self.pkt_time = pkt_time
        self.file_origin = file_origin
        
        self.store_tbl_media = getUnsigned(packet[0:1], 'little', 0, 255)
        try:
            self.store_tbl_media = gen_states.CONVERT_store_tbl_media(self.store_tbl_media)
        except:
            pass
        
        self.store_tbl_write = getUnsigned(packet[1:2], 'little', 0, 255)
        try:
            self.store_tbl_write = gen_states.CONVERT_store_tbl_write(self.store_tbl_write)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[2:3], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[3:4], 'big', 0, 255)
        
        self.store_tbl_save = getUnsigned(packet[4:8], 'little', 0, 4294967295)
        
        self.store_tbl_apid0 = getUnsigned(packet[8:10], 'little', 0, 65535)
        try:
            self.store_tbl_apid0 = gen_states.CONVERT_store_tbl_apid0(self.store_tbl_apid0)
        except:
            pass
        
        self.store_tbl_partition0 = getUnsigned(packet[10:11], 'little', 0, 255)
        try:
            self.store_tbl_partition0 = gen_states.CONVERT_store_tbl_partition0(self.store_tbl_partition0)
        except:
            pass
        
        self.store_tbl_apid_num0 = getUnsigned(packet[11:12], 'little', 0, 255)
        
        self.store_tbl_apid1 = getUnsigned(packet[12:14], 'little', 0, 65535)
        try:
            self.store_tbl_apid1 = gen_states.CONVERT_store_tbl_apid1(self.store_tbl_apid1)
        except:
            pass
        
        self.store_tbl_partition1 = getUnsigned(packet[14:15], 'little', 0, 255)
        try:
            self.store_tbl_partition1 = gen_states.CONVERT_store_tbl_partition1(self.store_tbl_partition1)
        except:
            pass
        
        self.store_tbl_apid_num1 = getUnsigned(packet[15:16], 'little', 0, 255)
        
        self.store_tbl_apid2 = getUnsigned(packet[16:18], 'little', 0, 65535)
        try:
            self.store_tbl_apid2 = gen_states.CONVERT_store_tbl_apid2(self.store_tbl_apid2)
        except:
            pass
        
        self.store_tbl_partition2 = getUnsigned(packet[18:19], 'little', 0, 255)
        try:
            self.store_tbl_partition2 = gen_states.CONVERT_store_tbl_partition2(self.store_tbl_partition2)
        except:
            pass
        
        self.store_tbl_apid_num2 = getUnsigned(packet[19:20], 'little', 0, 255)
        
        self.store_tbl_apid3 = getUnsigned(packet[20:22], 'little', 0, 65535)
        try:
            self.store_tbl_apid3 = gen_states.CONVERT_store_tbl_apid3(self.store_tbl_apid3)
        except:
            pass
        
        self.store_tbl_partition3 = getUnsigned(packet[22:23], 'little', 0, 255)
        try:
            self.store_tbl_partition3 = gen_states.CONVERT_store_tbl_partition3(self.store_tbl_partition3)
        except:
            pass
        
        self.store_tbl_apid_num3 = getUnsigned(packet[23:24], 'little', 0, 255)
        
        self.store_tbl_apid4 = getUnsigned(packet[24:26], 'little', 0, 65535)
        try:
            self.store_tbl_apid4 = gen_states.CONVERT_store_tbl_apid4(self.store_tbl_apid4)
        except:
            pass
        
        self.store_tbl_partition4 = getUnsigned(packet[26:27], 'little', 0, 255)
        try:
            self.store_tbl_partition4 = gen_states.CONVERT_store_tbl_partition4(self.store_tbl_partition4)
        except:
            pass
        
        self.store_tbl_apid_num4 = getUnsigned(packet[27:28], 'little', 0, 255)
        
        self.store_tbl_apid5 = getUnsigned(packet[28:30], 'little', 0, 65535)
        try:
            self.store_tbl_apid5 = gen_states.CONVERT_store_tbl_apid5(self.store_tbl_apid5)
        except:
            pass
        
        self.store_tbl_partition5 = getUnsigned(packet[30:31], 'little', 0, 255)
        try:
            self.store_tbl_partition5 = gen_states.CONVERT_store_tbl_partition5(self.store_tbl_partition5)
        except:
            pass
        
        self.store_tbl_apid_num5 = getUnsigned(packet[31:32], 'little', 0, 255)
        
        self.store_tbl_apid6 = getUnsigned(packet[32:34], 'little', 0, 65535)
        try:
            self.store_tbl_apid6 = gen_states.CONVERT_store_tbl_apid6(self.store_tbl_apid6)
        except:
            pass
        
        self.store_tbl_partition6 = getUnsigned(packet[34:35], 'little', 0, 255)
        try:
            self.store_tbl_partition6 = gen_states.CONVERT_store_tbl_partition6(self.store_tbl_partition6)
        except:
            pass
        
        self.store_tbl_apid_num6 = getUnsigned(packet[35:36], 'little', 0, 255)
        
        self.store_tbl_apid7 = getUnsigned(packet[36:38], 'little', 0, 65535)
        try:
            self.store_tbl_apid7 = gen_states.CONVERT_store_tbl_apid7(self.store_tbl_apid7)
        except:
            pass
        
        self.store_tbl_partition7 = getUnsigned(packet[38:39], 'little', 0, 255)
        try:
            self.store_tbl_partition7 = gen_states.CONVERT_store_tbl_partition7(self.store_tbl_partition7)
        except:
            pass
        
        self.store_tbl_apid_num7 = getUnsigned(packet[39:40], 'little', 0, 255)
        
        self.store_tbl_apid8 = getUnsigned(packet[40:42], 'little', 0, 65535)
        try:
            self.store_tbl_apid8 = gen_states.CONVERT_store_tbl_apid8(self.store_tbl_apid8)
        except:
            pass
        
        self.store_tbl_partition8 = getUnsigned(packet[42:43], 'little', 0, 255)
        try:
            self.store_tbl_partition8 = gen_states.CONVERT_store_tbl_partition8(self.store_tbl_partition8)
        except:
            pass
        
        self.store_tbl_apid_num8 = getUnsigned(packet[43:44], 'little', 0, 255)
        
        self.store_tbl_apid9 = getUnsigned(packet[44:46], 'little', 0, 65535)
        try:
            self.store_tbl_apid9 = gen_states.CONVERT_store_tbl_apid9(self.store_tbl_apid9)
        except:
            pass
        
        self.store_tbl_partition9 = getUnsigned(packet[46:47], 'little', 0, 255)
        try:
            self.store_tbl_partition9 = gen_states.CONVERT_store_tbl_partition9(self.store_tbl_partition9)
        except:
            pass
        
        self.store_tbl_apid_num9 = getUnsigned(packet[47:48], 'little', 0, 255)
        
        self.store_tbl_part_start_misc_nand = getUnsigned(packet[48:52], 'little', 0, 4294967295)
        
        self.store_tbl_part_size_misc_nand = getUnsigned(packet[52:56], 'little', 0, 4294967295)
        
        self.store_tbl_part_start_log_nand = getUnsigned(packet[56:60], 'little', 0, 4294967295)
        
        self.store_tbl_part_size_log_nand = getUnsigned(packet[60:64], 'little', 0, 4294967295)
        
        self.store_tbl_part_start_adcs_nand = getUnsigned(packet[64:68], 'little', 0, 4294967295)
        
        self.store_tbl_part_size_adcs_nand = getUnsigned(packet[68:72], 'little', 0, 4294967295)
        
        self.store_tbl_part_start_hk_nand = getUnsigned(packet[72:76], 'little', 0, 4294967295)
        
        self.store_tbl_part_size_hk_nand = getUnsigned(packet[76:80], 'little', 0, 4294967295)
        
        self.store_tbl_part_start_sci_nand = getUnsigned(packet[80:84], 'little', 0, 4294967295)
        
        self.store_tbl_part_size_sci_nand = getUnsigned(packet[84:88], 'little', 0, 4294967295)
        
        self.store_tbl_part_start_dsps_nand = getUnsigned(packet[88:92], 'little', 0, 4294967295)
        
        self.store_tbl_part_size_dsps_nand = getUnsigned(packet[92:96], 'little', 0, 4294967295)
        
        self.store_tbl_part_start_downlink_nand = getUnsigned(packet[96:100], 'little', 0, 4294967295)
        
        self.store_tbl_part_size_downlink_nand = getUnsigned(packet[100:104], 'little', 0, 4294967295)

class TBL_ADCS:
    def __str__(self):
        return 'TBL_ADCS'

    def __init__(self, packet, pkt_time, tbl_id, file_origin):
        self.pkt_time = pkt_time
        self.file_origin = file_origin
        
        self.tbl_adcs_css_eclipse = getUnsigned(packet[0:2], 'little', 0, 65535)
        
        self.tbl_adcs_css_count = getUnsigned(packet[2:3], 'little', 0, 255)
        
        self.tbl_adcs_eclipse_persist = getUnsigned(packet[3:4], 'little', 0, 255)
        
        self.tbl_adcs_fp_cmd_1 = getUnsigned(packet[4:5], 'little', 0, 255)
        
        self.tbl_adcs_fp_cmd_2 = getUnsigned(packet[5:6], 'little', 0, 255)
        
        self.tbl_adcs_fp_cmd_3 = getUnsigned(packet[6:7], 'little', 0, 255)
        
        self.tbl_adcs_fp_cmd_4 = getUnsigned(packet[7:8], 'little', 0, 255)
        
        try:
            self.tbl_adcs_fp_cmd_5 = getFloat(packet[8:12], 'LITTLE')
        except:
            print('Could not decode floating point item "tbl_adcs_fp_cmd_5" in "tbl_adcs"')
            self.tbl_adcs_fp_cmd_5 = 0
        
        self.tbl_adcs_ram_cmd_1 = getUnsigned(packet[12:13], 'little', 0, 255)
        
        self.tbl_adcs_ram_cmd_2 = getUnsigned(packet[13:14], 'little', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[14:15], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[15:16], 'big', 0, 255)
        
        try:
            self.tbl_adcs_ram_cmd_3 = getFloat(packet[16:20], 'LITTLE')
        except:
            print('Could not decode floating point item "tbl_adcs_ram_cmd_3" in "tbl_adcs"')
            self.tbl_adcs_ram_cmd_3 = 0
        
        try:
            self.tbl_adcs_ram_cmd_4 = getFloat(packet[20:24], 'LITTLE')
        except:
            print('Could not decode floating point item "tbl_adcs_ram_cmd_4" in "tbl_adcs"')
            self.tbl_adcs_ram_cmd_4 = 0
        
        try:
            self.tbl_adcs_ram_cmd_5 = getFloat(packet[24:28], 'LITTLE')
        except:
            print('Could not decode floating point item "tbl_adcs_ram_cmd_5" in "tbl_adcs"')
            self.tbl_adcs_ram_cmd_5 = 0
        
        try:
            self.tbl_adcs_ram_cmd_6 = getFloat(packet[28:32], 'LITTLE')
        except:
            print('Could not decode floating point item "tbl_adcs_ram_cmd_6" in "tbl_adcs"')
            self.tbl_adcs_ram_cmd_6 = 0

class TBL_TABLE_REG:
    def __str__(self):
        return 'TBL_TABLE_REG'

    def __init__(self, packet, pkt_time, tbl_id, file_origin):
        self.pkt_time = pkt_time
        self.file_origin = file_origin
        
        self.tbl_entry_reg_size0 = getUnsigned(packet[0:4], 'little', 0, 4294967295)
        
        self.tbl_entry_reg_id0 = getUnsigned(packet[4:5], 'little', 0, 255)
        try:
            self.tbl_entry_reg_id0 = gen_states.CONVERT_tbl_entry_reg_id0(self.tbl_entry_reg_id0)
        except:
            pass
        
        self.tbl_entry_addr_prime0 = getUnsigned(packet[5:6], 'little', 0, 255)
        
        self.tbl_entry_addr_back0 = getUnsigned(packet[6:7], 'little', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[7:8], 'big', 0, 255)
        
        self.tbl_entry_reg_size1 = getUnsigned(packet[8:12], 'little', 0, 4294967295)
        
        self.tbl_entry_reg_id1 = getUnsigned(packet[12:13], 'little', 0, 255)
        try:
            self.tbl_entry_reg_id1 = gen_states.CONVERT_tbl_entry_reg_id1(self.tbl_entry_reg_id1)
        except:
            pass
        
        self.tbl_entry_addr_prime1 = getUnsigned(packet[13:14], 'little', 0, 255)
        
        self.tbl_entry_addr_back1 = getUnsigned(packet[14:15], 'little', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[15:16], 'big', 0, 255)
        
        self.tbl_entry_reg_size2 = getUnsigned(packet[16:20], 'little', 0, 4294967295)
        
        self.tbl_entry_reg_id2 = getUnsigned(packet[20:21], 'little', 0, 255)
        try:
            self.tbl_entry_reg_id2 = gen_states.CONVERT_tbl_entry_reg_id2(self.tbl_entry_reg_id2)
        except:
            pass
        
        self.tbl_entry_addr_prime2 = getUnsigned(packet[21:22], 'little', 0, 255)
        
        self.tbl_entry_addr_back2 = getUnsigned(packet[22:23], 'little', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[23:24], 'big', 0, 255)
        
        self.tbl_entry_reg_size3 = getUnsigned(packet[24:28], 'little', 0, 4294967295)
        
        self.tbl_entry_reg_id3 = getUnsigned(packet[28:29], 'little', 0, 255)
        try:
            self.tbl_entry_reg_id3 = gen_states.CONVERT_tbl_entry_reg_id3(self.tbl_entry_reg_id3)
        except:
            pass
        
        self.tbl_entry_addr_prime3 = getUnsigned(packet[29:30], 'little', 0, 255)
        
        self.tbl_entry_addr_back3 = getUnsigned(packet[30:31], 'little', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[31:32], 'big', 0, 255)
        
        self.tbl_entry_reg_size4 = getUnsigned(packet[32:36], 'little', 0, 4294967295)
        
        self.tbl_entry_reg_id4 = getUnsigned(packet[36:37], 'little', 0, 255)
        try:
            self.tbl_entry_reg_id4 = gen_states.CONVERT_tbl_entry_reg_id4(self.tbl_entry_reg_id4)
        except:
            pass
        
        self.tbl_entry_addr_prime4 = getUnsigned(packet[37:38], 'little', 0, 255)
        
        self.tbl_entry_addr_back4 = getUnsigned(packet[38:39], 'little', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[39:40], 'big', 0, 255)
        
        self.tbl_entry_reg_size5 = getUnsigned(packet[40:44], 'little', 0, 4294967295)
        
        self.tbl_entry_reg_id5 = getUnsigned(packet[44:45], 'little', 0, 255)
        try:
            self.tbl_entry_reg_id5 = gen_states.CONVERT_tbl_entry_reg_id5(self.tbl_entry_reg_id5)
        except:
            pass
        
        self.tbl_entry_addr_prime5 = getUnsigned(packet[45:46], 'little', 0, 255)
        
        self.tbl_entry_addr_back5 = getUnsigned(packet[46:47], 'little', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[47:48], 'big', 0, 255)
        
        self.tbl_entry_reg_size6 = getUnsigned(packet[48:52], 'little', 0, 4294967295)
        
        self.tbl_entry_reg_id6 = getUnsigned(packet[52:53], 'little', 0, 255)
        try:
            self.tbl_entry_reg_id6 = gen_states.CONVERT_tbl_entry_reg_id6(self.tbl_entry_reg_id6)
        except:
            pass
        
        self.tbl_entry_addr_prime6 = getUnsigned(packet[53:54], 'little', 0, 255)
        
        self.tbl_entry_addr_back6 = getUnsigned(packet[54:55], 'little', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[55:56], 'big', 0, 255)
        
        self.tbl_entry_reg_size7 = getUnsigned(packet[56:60], 'little', 0, 4294967295)
        
        self.tbl_entry_reg_id7 = getUnsigned(packet[60:61], 'little', 0, 255)
        try:
            self.tbl_entry_reg_id7 = gen_states.CONVERT_tbl_entry_reg_id7(self.tbl_entry_reg_id7)
        except:
            pass
        
        self.tbl_entry_addr_prime7 = getUnsigned(packet[61:62], 'little', 0, 255)
        
        self.tbl_entry_addr_back7 = getUnsigned(packet[62:63], 'little', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[63:64], 'big', 0, 255)

class TBL_STREAM_DBG:
    def __str__(self):
        return 'TBL_STREAM_DBG'

    def __init__(self, packet, pkt_time, tbl_id, file_origin):
        self.pkt_time = pkt_time
        self.file_origin = file_origin
        
        self.tbl_stream_apid_DBG0 = getUnsigned(packet[0:2], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG0 = gen_states.CONVERT_tbl_stream_apid_DBG0(self.tbl_stream_apid_DBG0)
        except:
            pass
        
        self.tbl_stream_rate_DBG0 = getUnsigned(packet[2:4], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG0 = getUnsigned(packet[4:5], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG0 = gen_states.CONVERT_tbl_stream_priority_DBG0(self.tbl_stream_priority_DBG0)
        except:
            pass
        
        self.tbl_stream_valid_DBG0 = getUnsigned(packet[5:6], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG0 = gen_states.CONVERT_tbl_stream_valid_DBG0(self.tbl_stream_valid_DBG0)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[6:7], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[7:8], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG1 = getUnsigned(packet[8:10], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG1 = gen_states.CONVERT_tbl_stream_apid_DBG1(self.tbl_stream_apid_DBG1)
        except:
            pass
        
        self.tbl_stream_rate_DBG1 = getUnsigned(packet[10:12], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG1 = getUnsigned(packet[12:13], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG1 = gen_states.CONVERT_tbl_stream_priority_DBG1(self.tbl_stream_priority_DBG1)
        except:
            pass
        
        self.tbl_stream_valid_DBG1 = getUnsigned(packet[13:14], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG1 = gen_states.CONVERT_tbl_stream_valid_DBG1(self.tbl_stream_valid_DBG1)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[14:15], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[15:16], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG2 = getUnsigned(packet[16:18], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG2 = gen_states.CONVERT_tbl_stream_apid_DBG2(self.tbl_stream_apid_DBG2)
        except:
            pass
        
        self.tbl_stream_rate_DBG2 = getUnsigned(packet[18:20], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG2 = getUnsigned(packet[20:21], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG2 = gen_states.CONVERT_tbl_stream_priority_DBG2(self.tbl_stream_priority_DBG2)
        except:
            pass
        
        self.tbl_stream_valid_DBG2 = getUnsigned(packet[21:22], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG2 = gen_states.CONVERT_tbl_stream_valid_DBG2(self.tbl_stream_valid_DBG2)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[22:23], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[23:24], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG3 = getUnsigned(packet[24:26], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG3 = gen_states.CONVERT_tbl_stream_apid_DBG3(self.tbl_stream_apid_DBG3)
        except:
            pass
        
        self.tbl_stream_rate_DBG3 = getUnsigned(packet[26:28], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG3 = getUnsigned(packet[28:29], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG3 = gen_states.CONVERT_tbl_stream_priority_DBG3(self.tbl_stream_priority_DBG3)
        except:
            pass
        
        self.tbl_stream_valid_DBG3 = getUnsigned(packet[29:30], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG3 = gen_states.CONVERT_tbl_stream_valid_DBG3(self.tbl_stream_valid_DBG3)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[30:31], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[31:32], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG4 = getUnsigned(packet[32:34], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG4 = gen_states.CONVERT_tbl_stream_apid_DBG4(self.tbl_stream_apid_DBG4)
        except:
            pass
        
        self.tbl_stream_rate_DBG4 = getUnsigned(packet[34:36], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG4 = getUnsigned(packet[36:37], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG4 = gen_states.CONVERT_tbl_stream_priority_DBG4(self.tbl_stream_priority_DBG4)
        except:
            pass
        
        self.tbl_stream_valid_DBG4 = getUnsigned(packet[37:38], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG4 = gen_states.CONVERT_tbl_stream_valid_DBG4(self.tbl_stream_valid_DBG4)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[38:39], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[39:40], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG5 = getUnsigned(packet[40:42], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG5 = gen_states.CONVERT_tbl_stream_apid_DBG5(self.tbl_stream_apid_DBG5)
        except:
            pass
        
        self.tbl_stream_rate_DBG5 = getUnsigned(packet[42:44], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG5 = getUnsigned(packet[44:45], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG5 = gen_states.CONVERT_tbl_stream_priority_DBG5(self.tbl_stream_priority_DBG5)
        except:
            pass
        
        self.tbl_stream_valid_DBG5 = getUnsigned(packet[45:46], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG5 = gen_states.CONVERT_tbl_stream_valid_DBG5(self.tbl_stream_valid_DBG5)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[46:47], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[47:48], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG6 = getUnsigned(packet[48:50], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG6 = gen_states.CONVERT_tbl_stream_apid_DBG6(self.tbl_stream_apid_DBG6)
        except:
            pass
        
        self.tbl_stream_rate_DBG6 = getUnsigned(packet[50:52], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG6 = getUnsigned(packet[52:53], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG6 = gen_states.CONVERT_tbl_stream_priority_DBG6(self.tbl_stream_priority_DBG6)
        except:
            pass
        
        self.tbl_stream_valid_DBG6 = getUnsigned(packet[53:54], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG6 = gen_states.CONVERT_tbl_stream_valid_DBG6(self.tbl_stream_valid_DBG6)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[54:55], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[55:56], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG7 = getUnsigned(packet[56:58], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG7 = gen_states.CONVERT_tbl_stream_apid_DBG7(self.tbl_stream_apid_DBG7)
        except:
            pass
        
        self.tbl_stream_rate_DBG7 = getUnsigned(packet[58:60], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG7 = getUnsigned(packet[60:61], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG7 = gen_states.CONVERT_tbl_stream_priority_DBG7(self.tbl_stream_priority_DBG7)
        except:
            pass
        
        self.tbl_stream_valid_DBG7 = getUnsigned(packet[61:62], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG7 = gen_states.CONVERT_tbl_stream_valid_DBG7(self.tbl_stream_valid_DBG7)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[62:63], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[63:64], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG8 = getUnsigned(packet[64:66], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG8 = gen_states.CONVERT_tbl_stream_apid_DBG8(self.tbl_stream_apid_DBG8)
        except:
            pass
        
        self.tbl_stream_rate_DBG8 = getUnsigned(packet[66:68], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG8 = getUnsigned(packet[68:69], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG8 = gen_states.CONVERT_tbl_stream_priority_DBG8(self.tbl_stream_priority_DBG8)
        except:
            pass
        
        self.tbl_stream_valid_DBG8 = getUnsigned(packet[69:70], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG8 = gen_states.CONVERT_tbl_stream_valid_DBG8(self.tbl_stream_valid_DBG8)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[70:71], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[71:72], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG9 = getUnsigned(packet[72:74], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG9 = gen_states.CONVERT_tbl_stream_apid_DBG9(self.tbl_stream_apid_DBG9)
        except:
            pass
        
        self.tbl_stream_rate_DBG9 = getUnsigned(packet[74:76], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG9 = getUnsigned(packet[76:77], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG9 = gen_states.CONVERT_tbl_stream_priority_DBG9(self.tbl_stream_priority_DBG9)
        except:
            pass
        
        self.tbl_stream_valid_DBG9 = getUnsigned(packet[77:78], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG9 = gen_states.CONVERT_tbl_stream_valid_DBG9(self.tbl_stream_valid_DBG9)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[78:79], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[79:80], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG10 = getUnsigned(packet[80:82], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG10 = gen_states.CONVERT_tbl_stream_apid_DBG10(self.tbl_stream_apid_DBG10)
        except:
            pass
        
        self.tbl_stream_rate_DBG10 = getUnsigned(packet[82:84], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG10 = getUnsigned(packet[84:85], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG10 = gen_states.CONVERT_tbl_stream_priority_DBG10(self.tbl_stream_priority_DBG10)
        except:
            pass
        
        self.tbl_stream_valid_DBG10 = getUnsigned(packet[85:86], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG10 = gen_states.CONVERT_tbl_stream_valid_DBG10(self.tbl_stream_valid_DBG10)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[86:87], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[87:88], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG11 = getUnsigned(packet[88:90], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG11 = gen_states.CONVERT_tbl_stream_apid_DBG11(self.tbl_stream_apid_DBG11)
        except:
            pass
        
        self.tbl_stream_rate_DBG11 = getUnsigned(packet[90:92], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG11 = getUnsigned(packet[92:93], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG11 = gen_states.CONVERT_tbl_stream_priority_DBG11(self.tbl_stream_priority_DBG11)
        except:
            pass
        
        self.tbl_stream_valid_DBG11 = getUnsigned(packet[93:94], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG11 = gen_states.CONVERT_tbl_stream_valid_DBG11(self.tbl_stream_valid_DBG11)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[94:95], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[95:96], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG12 = getUnsigned(packet[96:98], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG12 = gen_states.CONVERT_tbl_stream_apid_DBG12(self.tbl_stream_apid_DBG12)
        except:
            pass
        
        self.tbl_stream_rate_DBG12 = getUnsigned(packet[98:100], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG12 = getUnsigned(packet[100:101], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG12 = gen_states.CONVERT_tbl_stream_priority_DBG12(self.tbl_stream_priority_DBG12)
        except:
            pass
        
        self.tbl_stream_valid_DBG12 = getUnsigned(packet[101:102], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG12 = gen_states.CONVERT_tbl_stream_valid_DBG12(self.tbl_stream_valid_DBG12)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[102:103], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[103:104], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG13 = getUnsigned(packet[104:106], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG13 = gen_states.CONVERT_tbl_stream_apid_DBG13(self.tbl_stream_apid_DBG13)
        except:
            pass
        
        self.tbl_stream_rate_DBG13 = getUnsigned(packet[106:108], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG13 = getUnsigned(packet[108:109], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG13 = gen_states.CONVERT_tbl_stream_priority_DBG13(self.tbl_stream_priority_DBG13)
        except:
            pass
        
        self.tbl_stream_valid_DBG13 = getUnsigned(packet[109:110], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG13 = gen_states.CONVERT_tbl_stream_valid_DBG13(self.tbl_stream_valid_DBG13)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[110:111], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[111:112], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG14 = getUnsigned(packet[112:114], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG14 = gen_states.CONVERT_tbl_stream_apid_DBG14(self.tbl_stream_apid_DBG14)
        except:
            pass
        
        self.tbl_stream_rate_DBG14 = getUnsigned(packet[114:116], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG14 = getUnsigned(packet[116:117], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG14 = gen_states.CONVERT_tbl_stream_priority_DBG14(self.tbl_stream_priority_DBG14)
        except:
            pass
        
        self.tbl_stream_valid_DBG14 = getUnsigned(packet[117:118], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG14 = gen_states.CONVERT_tbl_stream_valid_DBG14(self.tbl_stream_valid_DBG14)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[118:119], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[119:120], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG15 = getUnsigned(packet[120:122], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG15 = gen_states.CONVERT_tbl_stream_apid_DBG15(self.tbl_stream_apid_DBG15)
        except:
            pass
        
        self.tbl_stream_rate_DBG15 = getUnsigned(packet[122:124], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG15 = getUnsigned(packet[124:125], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG15 = gen_states.CONVERT_tbl_stream_priority_DBG15(self.tbl_stream_priority_DBG15)
        except:
            pass
        
        self.tbl_stream_valid_DBG15 = getUnsigned(packet[125:126], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG15 = gen_states.CONVERT_tbl_stream_valid_DBG15(self.tbl_stream_valid_DBG15)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[126:127], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[127:128], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG16 = getUnsigned(packet[128:130], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG16 = gen_states.CONVERT_tbl_stream_apid_DBG16(self.tbl_stream_apid_DBG16)
        except:
            pass
        
        self.tbl_stream_rate_DBG16 = getUnsigned(packet[130:132], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG16 = getUnsigned(packet[132:133], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG16 = gen_states.CONVERT_tbl_stream_priority_DBG16(self.tbl_stream_priority_DBG16)
        except:
            pass
        
        self.tbl_stream_valid_DBG16 = getUnsigned(packet[133:134], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG16 = gen_states.CONVERT_tbl_stream_valid_DBG16(self.tbl_stream_valid_DBG16)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[134:135], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[135:136], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG17 = getUnsigned(packet[136:138], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG17 = gen_states.CONVERT_tbl_stream_apid_DBG17(self.tbl_stream_apid_DBG17)
        except:
            pass
        
        self.tbl_stream_rate_DBG17 = getUnsigned(packet[138:140], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG17 = getUnsigned(packet[140:141], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG17 = gen_states.CONVERT_tbl_stream_priority_DBG17(self.tbl_stream_priority_DBG17)
        except:
            pass
        
        self.tbl_stream_valid_DBG17 = getUnsigned(packet[141:142], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG17 = gen_states.CONVERT_tbl_stream_valid_DBG17(self.tbl_stream_valid_DBG17)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[142:143], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[143:144], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG18 = getUnsigned(packet[144:146], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG18 = gen_states.CONVERT_tbl_stream_apid_DBG18(self.tbl_stream_apid_DBG18)
        except:
            pass
        
        self.tbl_stream_rate_DBG18 = getUnsigned(packet[146:148], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG18 = getUnsigned(packet[148:149], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG18 = gen_states.CONVERT_tbl_stream_priority_DBG18(self.tbl_stream_priority_DBG18)
        except:
            pass
        
        self.tbl_stream_valid_DBG18 = getUnsigned(packet[149:150], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG18 = gen_states.CONVERT_tbl_stream_valid_DBG18(self.tbl_stream_valid_DBG18)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[150:151], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[151:152], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG19 = getUnsigned(packet[152:154], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG19 = gen_states.CONVERT_tbl_stream_apid_DBG19(self.tbl_stream_apid_DBG19)
        except:
            pass
        
        self.tbl_stream_rate_DBG19 = getUnsigned(packet[154:156], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG19 = getUnsigned(packet[156:157], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG19 = gen_states.CONVERT_tbl_stream_priority_DBG19(self.tbl_stream_priority_DBG19)
        except:
            pass
        
        self.tbl_stream_valid_DBG19 = getUnsigned(packet[157:158], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG19 = gen_states.CONVERT_tbl_stream_valid_DBG19(self.tbl_stream_valid_DBG19)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[158:159], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[159:160], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG20 = getUnsigned(packet[160:162], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG20 = gen_states.CONVERT_tbl_stream_apid_DBG20(self.tbl_stream_apid_DBG20)
        except:
            pass
        
        self.tbl_stream_rate_DBG20 = getUnsigned(packet[162:164], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG20 = getUnsigned(packet[164:165], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG20 = gen_states.CONVERT_tbl_stream_priority_DBG20(self.tbl_stream_priority_DBG20)
        except:
            pass
        
        self.tbl_stream_valid_DBG20 = getUnsigned(packet[165:166], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG20 = gen_states.CONVERT_tbl_stream_valid_DBG20(self.tbl_stream_valid_DBG20)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[166:167], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[167:168], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG21 = getUnsigned(packet[168:170], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG21 = gen_states.CONVERT_tbl_stream_apid_DBG21(self.tbl_stream_apid_DBG21)
        except:
            pass
        
        self.tbl_stream_rate_DBG21 = getUnsigned(packet[170:172], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG21 = getUnsigned(packet[172:173], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG21 = gen_states.CONVERT_tbl_stream_priority_DBG21(self.tbl_stream_priority_DBG21)
        except:
            pass
        
        self.tbl_stream_valid_DBG21 = getUnsigned(packet[173:174], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG21 = gen_states.CONVERT_tbl_stream_valid_DBG21(self.tbl_stream_valid_DBG21)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[174:175], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[175:176], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG22 = getUnsigned(packet[176:178], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG22 = gen_states.CONVERT_tbl_stream_apid_DBG22(self.tbl_stream_apid_DBG22)
        except:
            pass
        
        self.tbl_stream_rate_DBG22 = getUnsigned(packet[178:180], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG22 = getUnsigned(packet[180:181], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG22 = gen_states.CONVERT_tbl_stream_priority_DBG22(self.tbl_stream_priority_DBG22)
        except:
            pass
        
        self.tbl_stream_valid_DBG22 = getUnsigned(packet[181:182], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG22 = gen_states.CONVERT_tbl_stream_valid_DBG22(self.tbl_stream_valid_DBG22)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[182:183], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[183:184], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG23 = getUnsigned(packet[184:186], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG23 = gen_states.CONVERT_tbl_stream_apid_DBG23(self.tbl_stream_apid_DBG23)
        except:
            pass
        
        self.tbl_stream_rate_DBG23 = getUnsigned(packet[186:188], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG23 = getUnsigned(packet[188:189], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG23 = gen_states.CONVERT_tbl_stream_priority_DBG23(self.tbl_stream_priority_DBG23)
        except:
            pass
        
        self.tbl_stream_valid_DBG23 = getUnsigned(packet[189:190], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG23 = gen_states.CONVERT_tbl_stream_valid_DBG23(self.tbl_stream_valid_DBG23)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[190:191], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[191:192], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG24 = getUnsigned(packet[192:194], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG24 = gen_states.CONVERT_tbl_stream_apid_DBG24(self.tbl_stream_apid_DBG24)
        except:
            pass
        
        self.tbl_stream_rate_DBG24 = getUnsigned(packet[194:196], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG24 = getUnsigned(packet[196:197], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG24 = gen_states.CONVERT_tbl_stream_priority_DBG24(self.tbl_stream_priority_DBG24)
        except:
            pass
        
        self.tbl_stream_valid_DBG24 = getUnsigned(packet[197:198], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG24 = gen_states.CONVERT_tbl_stream_valid_DBG24(self.tbl_stream_valid_DBG24)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[198:199], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[199:200], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG25 = getUnsigned(packet[200:202], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG25 = gen_states.CONVERT_tbl_stream_apid_DBG25(self.tbl_stream_apid_DBG25)
        except:
            pass
        
        self.tbl_stream_rate_DBG25 = getUnsigned(packet[202:204], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG25 = getUnsigned(packet[204:205], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG25 = gen_states.CONVERT_tbl_stream_priority_DBG25(self.tbl_stream_priority_DBG25)
        except:
            pass
        
        self.tbl_stream_valid_DBG25 = getUnsigned(packet[205:206], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG25 = gen_states.CONVERT_tbl_stream_valid_DBG25(self.tbl_stream_valid_DBG25)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[206:207], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[207:208], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG26 = getUnsigned(packet[208:210], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG26 = gen_states.CONVERT_tbl_stream_apid_DBG26(self.tbl_stream_apid_DBG26)
        except:
            pass
        
        self.tbl_stream_rate_DBG26 = getUnsigned(packet[210:212], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG26 = getUnsigned(packet[212:213], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG26 = gen_states.CONVERT_tbl_stream_priority_DBG26(self.tbl_stream_priority_DBG26)
        except:
            pass
        
        self.tbl_stream_valid_DBG26 = getUnsigned(packet[213:214], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG26 = gen_states.CONVERT_tbl_stream_valid_DBG26(self.tbl_stream_valid_DBG26)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[214:215], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[215:216], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG27 = getUnsigned(packet[216:218], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG27 = gen_states.CONVERT_tbl_stream_apid_DBG27(self.tbl_stream_apid_DBG27)
        except:
            pass
        
        self.tbl_stream_rate_DBG27 = getUnsigned(packet[218:220], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG27 = getUnsigned(packet[220:221], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG27 = gen_states.CONVERT_tbl_stream_priority_DBG27(self.tbl_stream_priority_DBG27)
        except:
            pass
        
        self.tbl_stream_valid_DBG27 = getUnsigned(packet[221:222], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG27 = gen_states.CONVERT_tbl_stream_valid_DBG27(self.tbl_stream_valid_DBG27)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[222:223], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[223:224], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG28 = getUnsigned(packet[224:226], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG28 = gen_states.CONVERT_tbl_stream_apid_DBG28(self.tbl_stream_apid_DBG28)
        except:
            pass
        
        self.tbl_stream_rate_DBG28 = getUnsigned(packet[226:228], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG28 = getUnsigned(packet[228:229], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG28 = gen_states.CONVERT_tbl_stream_priority_DBG28(self.tbl_stream_priority_DBG28)
        except:
            pass
        
        self.tbl_stream_valid_DBG28 = getUnsigned(packet[229:230], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG28 = gen_states.CONVERT_tbl_stream_valid_DBG28(self.tbl_stream_valid_DBG28)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[230:231], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[231:232], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG29 = getUnsigned(packet[232:234], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG29 = gen_states.CONVERT_tbl_stream_apid_DBG29(self.tbl_stream_apid_DBG29)
        except:
            pass
        
        self.tbl_stream_rate_DBG29 = getUnsigned(packet[234:236], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG29 = getUnsigned(packet[236:237], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG29 = gen_states.CONVERT_tbl_stream_priority_DBG29(self.tbl_stream_priority_DBG29)
        except:
            pass
        
        self.tbl_stream_valid_DBG29 = getUnsigned(packet[237:238], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG29 = gen_states.CONVERT_tbl_stream_valid_DBG29(self.tbl_stream_valid_DBG29)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[238:239], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[239:240], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG30 = getUnsigned(packet[240:242], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG30 = gen_states.CONVERT_tbl_stream_apid_DBG30(self.tbl_stream_apid_DBG30)
        except:
            pass
        
        self.tbl_stream_rate_DBG30 = getUnsigned(packet[242:244], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG30 = getUnsigned(packet[244:245], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG30 = gen_states.CONVERT_tbl_stream_priority_DBG30(self.tbl_stream_priority_DBG30)
        except:
            pass
        
        self.tbl_stream_valid_DBG30 = getUnsigned(packet[245:246], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG30 = gen_states.CONVERT_tbl_stream_valid_DBG30(self.tbl_stream_valid_DBG30)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[246:247], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[247:248], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG31 = getUnsigned(packet[248:250], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG31 = gen_states.CONVERT_tbl_stream_apid_DBG31(self.tbl_stream_apid_DBG31)
        except:
            pass
        
        self.tbl_stream_rate_DBG31 = getUnsigned(packet[250:252], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG31 = getUnsigned(packet[252:253], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG31 = gen_states.CONVERT_tbl_stream_priority_DBG31(self.tbl_stream_priority_DBG31)
        except:
            pass
        
        self.tbl_stream_valid_DBG31 = getUnsigned(packet[253:254], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG31 = gen_states.CONVERT_tbl_stream_valid_DBG31(self.tbl_stream_valid_DBG31)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[254:255], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[255:256], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG32 = getUnsigned(packet[256:258], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG32 = gen_states.CONVERT_tbl_stream_apid_DBG32(self.tbl_stream_apid_DBG32)
        except:
            pass
        
        self.tbl_stream_rate_DBG32 = getUnsigned(packet[258:260], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG32 = getUnsigned(packet[260:261], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG32 = gen_states.CONVERT_tbl_stream_priority_DBG32(self.tbl_stream_priority_DBG32)
        except:
            pass
        
        self.tbl_stream_valid_DBG32 = getUnsigned(packet[261:262], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG32 = gen_states.CONVERT_tbl_stream_valid_DBG32(self.tbl_stream_valid_DBG32)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[262:263], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[263:264], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG33 = getUnsigned(packet[264:266], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG33 = gen_states.CONVERT_tbl_stream_apid_DBG33(self.tbl_stream_apid_DBG33)
        except:
            pass
        
        self.tbl_stream_rate_DBG33 = getUnsigned(packet[266:268], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG33 = getUnsigned(packet[268:269], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG33 = gen_states.CONVERT_tbl_stream_priority_DBG33(self.tbl_stream_priority_DBG33)
        except:
            pass
        
        self.tbl_stream_valid_DBG33 = getUnsigned(packet[269:270], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG33 = gen_states.CONVERT_tbl_stream_valid_DBG33(self.tbl_stream_valid_DBG33)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[270:271], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[271:272], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG34 = getUnsigned(packet[272:274], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG34 = gen_states.CONVERT_tbl_stream_apid_DBG34(self.tbl_stream_apid_DBG34)
        except:
            pass
        
        self.tbl_stream_rate_DBG34 = getUnsigned(packet[274:276], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG34 = getUnsigned(packet[276:277], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG34 = gen_states.CONVERT_tbl_stream_priority_DBG34(self.tbl_stream_priority_DBG34)
        except:
            pass
        
        self.tbl_stream_valid_DBG34 = getUnsigned(packet[277:278], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG34 = gen_states.CONVERT_tbl_stream_valid_DBG34(self.tbl_stream_valid_DBG34)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[278:279], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[279:280], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG35 = getUnsigned(packet[280:282], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG35 = gen_states.CONVERT_tbl_stream_apid_DBG35(self.tbl_stream_apid_DBG35)
        except:
            pass
        
        self.tbl_stream_rate_DBG35 = getUnsigned(packet[282:284], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG35 = getUnsigned(packet[284:285], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG35 = gen_states.CONVERT_tbl_stream_priority_DBG35(self.tbl_stream_priority_DBG35)
        except:
            pass
        
        self.tbl_stream_valid_DBG35 = getUnsigned(packet[285:286], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG35 = gen_states.CONVERT_tbl_stream_valid_DBG35(self.tbl_stream_valid_DBG35)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[286:287], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[287:288], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG36 = getUnsigned(packet[288:290], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG36 = gen_states.CONVERT_tbl_stream_apid_DBG36(self.tbl_stream_apid_DBG36)
        except:
            pass
        
        self.tbl_stream_rate_DBG36 = getUnsigned(packet[290:292], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG36 = getUnsigned(packet[292:293], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG36 = gen_states.CONVERT_tbl_stream_priority_DBG36(self.tbl_stream_priority_DBG36)
        except:
            pass
        
        self.tbl_stream_valid_DBG36 = getUnsigned(packet[293:294], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG36 = gen_states.CONVERT_tbl_stream_valid_DBG36(self.tbl_stream_valid_DBG36)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[294:295], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[295:296], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG37 = getUnsigned(packet[296:298], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG37 = gen_states.CONVERT_tbl_stream_apid_DBG37(self.tbl_stream_apid_DBG37)
        except:
            pass
        
        self.tbl_stream_rate_DBG37 = getUnsigned(packet[298:300], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG37 = getUnsigned(packet[300:301], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG37 = gen_states.CONVERT_tbl_stream_priority_DBG37(self.tbl_stream_priority_DBG37)
        except:
            pass
        
        self.tbl_stream_valid_DBG37 = getUnsigned(packet[301:302], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG37 = gen_states.CONVERT_tbl_stream_valid_DBG37(self.tbl_stream_valid_DBG37)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[302:303], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[303:304], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG38 = getUnsigned(packet[304:306], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG38 = gen_states.CONVERT_tbl_stream_apid_DBG38(self.tbl_stream_apid_DBG38)
        except:
            pass
        
        self.tbl_stream_rate_DBG38 = getUnsigned(packet[306:308], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG38 = getUnsigned(packet[308:309], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG38 = gen_states.CONVERT_tbl_stream_priority_DBG38(self.tbl_stream_priority_DBG38)
        except:
            pass
        
        self.tbl_stream_valid_DBG38 = getUnsigned(packet[309:310], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG38 = gen_states.CONVERT_tbl_stream_valid_DBG38(self.tbl_stream_valid_DBG38)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[310:311], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[311:312], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG39 = getUnsigned(packet[312:314], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG39 = gen_states.CONVERT_tbl_stream_apid_DBG39(self.tbl_stream_apid_DBG39)
        except:
            pass
        
        self.tbl_stream_rate_DBG39 = getUnsigned(packet[314:316], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG39 = getUnsigned(packet[316:317], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG39 = gen_states.CONVERT_tbl_stream_priority_DBG39(self.tbl_stream_priority_DBG39)
        except:
            pass
        
        self.tbl_stream_valid_DBG39 = getUnsigned(packet[317:318], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG39 = gen_states.CONVERT_tbl_stream_valid_DBG39(self.tbl_stream_valid_DBG39)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[318:319], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[319:320], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG40 = getUnsigned(packet[320:322], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG40 = gen_states.CONVERT_tbl_stream_apid_DBG40(self.tbl_stream_apid_DBG40)
        except:
            pass
        
        self.tbl_stream_rate_DBG40 = getUnsigned(packet[322:324], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG40 = getUnsigned(packet[324:325], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG40 = gen_states.CONVERT_tbl_stream_priority_DBG40(self.tbl_stream_priority_DBG40)
        except:
            pass
        
        self.tbl_stream_valid_DBG40 = getUnsigned(packet[325:326], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG40 = gen_states.CONVERT_tbl_stream_valid_DBG40(self.tbl_stream_valid_DBG40)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[326:327], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[327:328], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG41 = getUnsigned(packet[328:330], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG41 = gen_states.CONVERT_tbl_stream_apid_DBG41(self.tbl_stream_apid_DBG41)
        except:
            pass
        
        self.tbl_stream_rate_DBG41 = getUnsigned(packet[330:332], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG41 = getUnsigned(packet[332:333], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG41 = gen_states.CONVERT_tbl_stream_priority_DBG41(self.tbl_stream_priority_DBG41)
        except:
            pass
        
        self.tbl_stream_valid_DBG41 = getUnsigned(packet[333:334], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG41 = gen_states.CONVERT_tbl_stream_valid_DBG41(self.tbl_stream_valid_DBG41)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[334:335], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[335:336], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG42 = getUnsigned(packet[336:338], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG42 = gen_states.CONVERT_tbl_stream_apid_DBG42(self.tbl_stream_apid_DBG42)
        except:
            pass
        
        self.tbl_stream_rate_DBG42 = getUnsigned(packet[338:340], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG42 = getUnsigned(packet[340:341], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG42 = gen_states.CONVERT_tbl_stream_priority_DBG42(self.tbl_stream_priority_DBG42)
        except:
            pass
        
        self.tbl_stream_valid_DBG42 = getUnsigned(packet[341:342], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG42 = gen_states.CONVERT_tbl_stream_valid_DBG42(self.tbl_stream_valid_DBG42)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[342:343], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[343:344], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG43 = getUnsigned(packet[344:346], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG43 = gen_states.CONVERT_tbl_stream_apid_DBG43(self.tbl_stream_apid_DBG43)
        except:
            pass
        
        self.tbl_stream_rate_DBG43 = getUnsigned(packet[346:348], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG43 = getUnsigned(packet[348:349], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG43 = gen_states.CONVERT_tbl_stream_priority_DBG43(self.tbl_stream_priority_DBG43)
        except:
            pass
        
        self.tbl_stream_valid_DBG43 = getUnsigned(packet[349:350], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG43 = gen_states.CONVERT_tbl_stream_valid_DBG43(self.tbl_stream_valid_DBG43)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[350:351], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[351:352], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG44 = getUnsigned(packet[352:354], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG44 = gen_states.CONVERT_tbl_stream_apid_DBG44(self.tbl_stream_apid_DBG44)
        except:
            pass
        
        self.tbl_stream_rate_DBG44 = getUnsigned(packet[354:356], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG44 = getUnsigned(packet[356:357], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG44 = gen_states.CONVERT_tbl_stream_priority_DBG44(self.tbl_stream_priority_DBG44)
        except:
            pass
        
        self.tbl_stream_valid_DBG44 = getUnsigned(packet[357:358], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG44 = gen_states.CONVERT_tbl_stream_valid_DBG44(self.tbl_stream_valid_DBG44)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[358:359], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[359:360], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG45 = getUnsigned(packet[360:362], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG45 = gen_states.CONVERT_tbl_stream_apid_DBG45(self.tbl_stream_apid_DBG45)
        except:
            pass
        
        self.tbl_stream_rate_DBG45 = getUnsigned(packet[362:364], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG45 = getUnsigned(packet[364:365], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG45 = gen_states.CONVERT_tbl_stream_priority_DBG45(self.tbl_stream_priority_DBG45)
        except:
            pass
        
        self.tbl_stream_valid_DBG45 = getUnsigned(packet[365:366], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG45 = gen_states.CONVERT_tbl_stream_valid_DBG45(self.tbl_stream_valid_DBG45)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[366:367], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[367:368], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG46 = getUnsigned(packet[368:370], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG46 = gen_states.CONVERT_tbl_stream_apid_DBG46(self.tbl_stream_apid_DBG46)
        except:
            pass
        
        self.tbl_stream_rate_DBG46 = getUnsigned(packet[370:372], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG46 = getUnsigned(packet[372:373], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG46 = gen_states.CONVERT_tbl_stream_priority_DBG46(self.tbl_stream_priority_DBG46)
        except:
            pass
        
        self.tbl_stream_valid_DBG46 = getUnsigned(packet[373:374], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG46 = gen_states.CONVERT_tbl_stream_valid_DBG46(self.tbl_stream_valid_DBG46)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[374:375], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[375:376], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG47 = getUnsigned(packet[376:378], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG47 = gen_states.CONVERT_tbl_stream_apid_DBG47(self.tbl_stream_apid_DBG47)
        except:
            pass
        
        self.tbl_stream_rate_DBG47 = getUnsigned(packet[378:380], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG47 = getUnsigned(packet[380:381], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG47 = gen_states.CONVERT_tbl_stream_priority_DBG47(self.tbl_stream_priority_DBG47)
        except:
            pass
        
        self.tbl_stream_valid_DBG47 = getUnsigned(packet[381:382], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG47 = gen_states.CONVERT_tbl_stream_valid_DBG47(self.tbl_stream_valid_DBG47)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[382:383], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[383:384], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG48 = getUnsigned(packet[384:386], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG48 = gen_states.CONVERT_tbl_stream_apid_DBG48(self.tbl_stream_apid_DBG48)
        except:
            pass
        
        self.tbl_stream_rate_DBG48 = getUnsigned(packet[386:388], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG48 = getUnsigned(packet[388:389], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG48 = gen_states.CONVERT_tbl_stream_priority_DBG48(self.tbl_stream_priority_DBG48)
        except:
            pass
        
        self.tbl_stream_valid_DBG48 = getUnsigned(packet[389:390], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG48 = gen_states.CONVERT_tbl_stream_valid_DBG48(self.tbl_stream_valid_DBG48)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[390:391], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[391:392], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG49 = getUnsigned(packet[392:394], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG49 = gen_states.CONVERT_tbl_stream_apid_DBG49(self.tbl_stream_apid_DBG49)
        except:
            pass
        
        self.tbl_stream_rate_DBG49 = getUnsigned(packet[394:396], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG49 = getUnsigned(packet[396:397], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG49 = gen_states.CONVERT_tbl_stream_priority_DBG49(self.tbl_stream_priority_DBG49)
        except:
            pass
        
        self.tbl_stream_valid_DBG49 = getUnsigned(packet[397:398], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG49 = gen_states.CONVERT_tbl_stream_valid_DBG49(self.tbl_stream_valid_DBG49)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[398:399], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[399:400], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG50 = getUnsigned(packet[400:402], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG50 = gen_states.CONVERT_tbl_stream_apid_DBG50(self.tbl_stream_apid_DBG50)
        except:
            pass
        
        self.tbl_stream_rate_DBG50 = getUnsigned(packet[402:404], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG50 = getUnsigned(packet[404:405], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG50 = gen_states.CONVERT_tbl_stream_priority_DBG50(self.tbl_stream_priority_DBG50)
        except:
            pass
        
        self.tbl_stream_valid_DBG50 = getUnsigned(packet[405:406], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG50 = gen_states.CONVERT_tbl_stream_valid_DBG50(self.tbl_stream_valid_DBG50)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[406:407], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[407:408], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG51 = getUnsigned(packet[408:410], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG51 = gen_states.CONVERT_tbl_stream_apid_DBG51(self.tbl_stream_apid_DBG51)
        except:
            pass
        
        self.tbl_stream_rate_DBG51 = getUnsigned(packet[410:412], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG51 = getUnsigned(packet[412:413], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG51 = gen_states.CONVERT_tbl_stream_priority_DBG51(self.tbl_stream_priority_DBG51)
        except:
            pass
        
        self.tbl_stream_valid_DBG51 = getUnsigned(packet[413:414], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG51 = gen_states.CONVERT_tbl_stream_valid_DBG51(self.tbl_stream_valid_DBG51)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[414:415], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[415:416], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG52 = getUnsigned(packet[416:418], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG52 = gen_states.CONVERT_tbl_stream_apid_DBG52(self.tbl_stream_apid_DBG52)
        except:
            pass
        
        self.tbl_stream_rate_DBG52 = getUnsigned(packet[418:420], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG52 = getUnsigned(packet[420:421], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG52 = gen_states.CONVERT_tbl_stream_priority_DBG52(self.tbl_stream_priority_DBG52)
        except:
            pass
        
        self.tbl_stream_valid_DBG52 = getUnsigned(packet[421:422], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG52 = gen_states.CONVERT_tbl_stream_valid_DBG52(self.tbl_stream_valid_DBG52)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[422:423], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[423:424], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG53 = getUnsigned(packet[424:426], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG53 = gen_states.CONVERT_tbl_stream_apid_DBG53(self.tbl_stream_apid_DBG53)
        except:
            pass
        
        self.tbl_stream_rate_DBG53 = getUnsigned(packet[426:428], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG53 = getUnsigned(packet[428:429], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG53 = gen_states.CONVERT_tbl_stream_priority_DBG53(self.tbl_stream_priority_DBG53)
        except:
            pass
        
        self.tbl_stream_valid_DBG53 = getUnsigned(packet[429:430], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG53 = gen_states.CONVERT_tbl_stream_valid_DBG53(self.tbl_stream_valid_DBG53)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[430:431], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[431:432], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG54 = getUnsigned(packet[432:434], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG54 = gen_states.CONVERT_tbl_stream_apid_DBG54(self.tbl_stream_apid_DBG54)
        except:
            pass
        
        self.tbl_stream_rate_DBG54 = getUnsigned(packet[434:436], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG54 = getUnsigned(packet[436:437], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG54 = gen_states.CONVERT_tbl_stream_priority_DBG54(self.tbl_stream_priority_DBG54)
        except:
            pass
        
        self.tbl_stream_valid_DBG54 = getUnsigned(packet[437:438], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG54 = gen_states.CONVERT_tbl_stream_valid_DBG54(self.tbl_stream_valid_DBG54)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[438:439], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[439:440], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG55 = getUnsigned(packet[440:442], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG55 = gen_states.CONVERT_tbl_stream_apid_DBG55(self.tbl_stream_apid_DBG55)
        except:
            pass
        
        self.tbl_stream_rate_DBG55 = getUnsigned(packet[442:444], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG55 = getUnsigned(packet[444:445], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG55 = gen_states.CONVERT_tbl_stream_priority_DBG55(self.tbl_stream_priority_DBG55)
        except:
            pass
        
        self.tbl_stream_valid_DBG55 = getUnsigned(packet[445:446], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG55 = gen_states.CONVERT_tbl_stream_valid_DBG55(self.tbl_stream_valid_DBG55)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[446:447], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[447:448], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG56 = getUnsigned(packet[448:450], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG56 = gen_states.CONVERT_tbl_stream_apid_DBG56(self.tbl_stream_apid_DBG56)
        except:
            pass
        
        self.tbl_stream_rate_DBG56 = getUnsigned(packet[450:452], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG56 = getUnsigned(packet[452:453], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG56 = gen_states.CONVERT_tbl_stream_priority_DBG56(self.tbl_stream_priority_DBG56)
        except:
            pass
        
        self.tbl_stream_valid_DBG56 = getUnsigned(packet[453:454], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG56 = gen_states.CONVERT_tbl_stream_valid_DBG56(self.tbl_stream_valid_DBG56)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[454:455], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[455:456], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG57 = getUnsigned(packet[456:458], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG57 = gen_states.CONVERT_tbl_stream_apid_DBG57(self.tbl_stream_apid_DBG57)
        except:
            pass
        
        self.tbl_stream_rate_DBG57 = getUnsigned(packet[458:460], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG57 = getUnsigned(packet[460:461], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG57 = gen_states.CONVERT_tbl_stream_priority_DBG57(self.tbl_stream_priority_DBG57)
        except:
            pass
        
        self.tbl_stream_valid_DBG57 = getUnsigned(packet[461:462], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG57 = gen_states.CONVERT_tbl_stream_valid_DBG57(self.tbl_stream_valid_DBG57)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[462:463], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[463:464], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG58 = getUnsigned(packet[464:466], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG58 = gen_states.CONVERT_tbl_stream_apid_DBG58(self.tbl_stream_apid_DBG58)
        except:
            pass
        
        self.tbl_stream_rate_DBG58 = getUnsigned(packet[466:468], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG58 = getUnsigned(packet[468:469], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG58 = gen_states.CONVERT_tbl_stream_priority_DBG58(self.tbl_stream_priority_DBG58)
        except:
            pass
        
        self.tbl_stream_valid_DBG58 = getUnsigned(packet[469:470], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG58 = gen_states.CONVERT_tbl_stream_valid_DBG58(self.tbl_stream_valid_DBG58)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[470:471], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[471:472], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG59 = getUnsigned(packet[472:474], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG59 = gen_states.CONVERT_tbl_stream_apid_DBG59(self.tbl_stream_apid_DBG59)
        except:
            pass
        
        self.tbl_stream_rate_DBG59 = getUnsigned(packet[474:476], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG59 = getUnsigned(packet[476:477], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG59 = gen_states.CONVERT_tbl_stream_priority_DBG59(self.tbl_stream_priority_DBG59)
        except:
            pass
        
        self.tbl_stream_valid_DBG59 = getUnsigned(packet[477:478], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG59 = gen_states.CONVERT_tbl_stream_valid_DBG59(self.tbl_stream_valid_DBG59)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[478:479], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[479:480], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG60 = getUnsigned(packet[480:482], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG60 = gen_states.CONVERT_tbl_stream_apid_DBG60(self.tbl_stream_apid_DBG60)
        except:
            pass
        
        self.tbl_stream_rate_DBG60 = getUnsigned(packet[482:484], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG60 = getUnsigned(packet[484:485], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG60 = gen_states.CONVERT_tbl_stream_priority_DBG60(self.tbl_stream_priority_DBG60)
        except:
            pass
        
        self.tbl_stream_valid_DBG60 = getUnsigned(packet[485:486], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG60 = gen_states.CONVERT_tbl_stream_valid_DBG60(self.tbl_stream_valid_DBG60)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[486:487], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[487:488], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG61 = getUnsigned(packet[488:490], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG61 = gen_states.CONVERT_tbl_stream_apid_DBG61(self.tbl_stream_apid_DBG61)
        except:
            pass
        
        self.tbl_stream_rate_DBG61 = getUnsigned(packet[490:492], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG61 = getUnsigned(packet[492:493], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG61 = gen_states.CONVERT_tbl_stream_priority_DBG61(self.tbl_stream_priority_DBG61)
        except:
            pass
        
        self.tbl_stream_valid_DBG61 = getUnsigned(packet[493:494], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG61 = gen_states.CONVERT_tbl_stream_valid_DBG61(self.tbl_stream_valid_DBG61)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[494:495], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[495:496], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG62 = getUnsigned(packet[496:498], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG62 = gen_states.CONVERT_tbl_stream_apid_DBG62(self.tbl_stream_apid_DBG62)
        except:
            pass
        
        self.tbl_stream_rate_DBG62 = getUnsigned(packet[498:500], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG62 = getUnsigned(packet[500:501], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG62 = gen_states.CONVERT_tbl_stream_priority_DBG62(self.tbl_stream_priority_DBG62)
        except:
            pass
        
        self.tbl_stream_valid_DBG62 = getUnsigned(packet[501:502], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG62 = gen_states.CONVERT_tbl_stream_valid_DBG62(self.tbl_stream_valid_DBG62)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[502:503], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[503:504], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG63 = getUnsigned(packet[504:506], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG63 = gen_states.CONVERT_tbl_stream_apid_DBG63(self.tbl_stream_apid_DBG63)
        except:
            pass
        
        self.tbl_stream_rate_DBG63 = getUnsigned(packet[506:508], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG63 = getUnsigned(packet[508:509], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG63 = gen_states.CONVERT_tbl_stream_priority_DBG63(self.tbl_stream_priority_DBG63)
        except:
            pass
        
        self.tbl_stream_valid_DBG63 = getUnsigned(packet[509:510], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG63 = gen_states.CONVERT_tbl_stream_valid_DBG63(self.tbl_stream_valid_DBG63)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[510:511], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[511:512], 'big', 0, 255)
        
        self.tbl_stream_apid_DBG64 = getUnsigned(packet[512:514], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_DBG64 = gen_states.CONVERT_tbl_stream_apid_DBG64(self.tbl_stream_apid_DBG64)
        except:
            pass
        
        self.tbl_stream_rate_DBG64 = getUnsigned(packet[514:516], 'little', 0, 65535)
        
        self.tbl_stream_priority_DBG64 = getUnsigned(packet[516:517], 'little', 0, 255)
        try:
            self.tbl_stream_priority_DBG64 = gen_states.CONVERT_tbl_stream_priority_DBG64(self.tbl_stream_priority_DBG64)
        except:
            pass
        
        self.tbl_stream_valid_DBG64 = getUnsigned(packet[517:518], 'little', 0, 255)
        try:
            self.tbl_stream_valid_DBG64 = gen_states.CONVERT_tbl_stream_valid_DBG64(self.tbl_stream_valid_DBG64)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[518:519], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[519:520], 'big', 0, 255)

class TBL_STREAM_STORE:
    def __str__(self):
        return 'TBL_STREAM_STORE'

    def __init__(self, packet, pkt_time, tbl_id, file_origin):
        self.pkt_time = pkt_time
        self.file_origin = file_origin
        
        self.tbl_stream_apid_STORE0 = getUnsigned(packet[0:2], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE0 = gen_states.CONVERT_tbl_stream_apid_STORE0(self.tbl_stream_apid_STORE0)
        except:
            pass
        
        self.tbl_stream_rate_STORE0 = getUnsigned(packet[2:4], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE0 = getUnsigned(packet[4:5], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE0 = gen_states.CONVERT_tbl_stream_priority_STORE0(self.tbl_stream_priority_STORE0)
        except:
            pass
        
        self.tbl_stream_valid_STORE0 = getUnsigned(packet[5:6], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE0 = gen_states.CONVERT_tbl_stream_valid_STORE0(self.tbl_stream_valid_STORE0)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[6:7], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[7:8], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE1 = getUnsigned(packet[8:10], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE1 = gen_states.CONVERT_tbl_stream_apid_STORE1(self.tbl_stream_apid_STORE1)
        except:
            pass
        
        self.tbl_stream_rate_STORE1 = getUnsigned(packet[10:12], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE1 = getUnsigned(packet[12:13], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE1 = gen_states.CONVERT_tbl_stream_priority_STORE1(self.tbl_stream_priority_STORE1)
        except:
            pass
        
        self.tbl_stream_valid_STORE1 = getUnsigned(packet[13:14], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE1 = gen_states.CONVERT_tbl_stream_valid_STORE1(self.tbl_stream_valid_STORE1)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[14:15], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[15:16], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE2 = getUnsigned(packet[16:18], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE2 = gen_states.CONVERT_tbl_stream_apid_STORE2(self.tbl_stream_apid_STORE2)
        except:
            pass
        
        self.tbl_stream_rate_STORE2 = getUnsigned(packet[18:20], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE2 = getUnsigned(packet[20:21], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE2 = gen_states.CONVERT_tbl_stream_priority_STORE2(self.tbl_stream_priority_STORE2)
        except:
            pass
        
        self.tbl_stream_valid_STORE2 = getUnsigned(packet[21:22], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE2 = gen_states.CONVERT_tbl_stream_valid_STORE2(self.tbl_stream_valid_STORE2)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[22:23], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[23:24], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE3 = getUnsigned(packet[24:26], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE3 = gen_states.CONVERT_tbl_stream_apid_STORE3(self.tbl_stream_apid_STORE3)
        except:
            pass
        
        self.tbl_stream_rate_STORE3 = getUnsigned(packet[26:28], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE3 = getUnsigned(packet[28:29], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE3 = gen_states.CONVERT_tbl_stream_priority_STORE3(self.tbl_stream_priority_STORE3)
        except:
            pass
        
        self.tbl_stream_valid_STORE3 = getUnsigned(packet[29:30], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE3 = gen_states.CONVERT_tbl_stream_valid_STORE3(self.tbl_stream_valid_STORE3)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[30:31], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[31:32], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE4 = getUnsigned(packet[32:34], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE4 = gen_states.CONVERT_tbl_stream_apid_STORE4(self.tbl_stream_apid_STORE4)
        except:
            pass
        
        self.tbl_stream_rate_STORE4 = getUnsigned(packet[34:36], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE4 = getUnsigned(packet[36:37], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE4 = gen_states.CONVERT_tbl_stream_priority_STORE4(self.tbl_stream_priority_STORE4)
        except:
            pass
        
        self.tbl_stream_valid_STORE4 = getUnsigned(packet[37:38], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE4 = gen_states.CONVERT_tbl_stream_valid_STORE4(self.tbl_stream_valid_STORE4)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[38:39], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[39:40], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE5 = getUnsigned(packet[40:42], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE5 = gen_states.CONVERT_tbl_stream_apid_STORE5(self.tbl_stream_apid_STORE5)
        except:
            pass
        
        self.tbl_stream_rate_STORE5 = getUnsigned(packet[42:44], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE5 = getUnsigned(packet[44:45], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE5 = gen_states.CONVERT_tbl_stream_priority_STORE5(self.tbl_stream_priority_STORE5)
        except:
            pass
        
        self.tbl_stream_valid_STORE5 = getUnsigned(packet[45:46], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE5 = gen_states.CONVERT_tbl_stream_valid_STORE5(self.tbl_stream_valid_STORE5)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[46:47], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[47:48], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE6 = getUnsigned(packet[48:50], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE6 = gen_states.CONVERT_tbl_stream_apid_STORE6(self.tbl_stream_apid_STORE6)
        except:
            pass
        
        self.tbl_stream_rate_STORE6 = getUnsigned(packet[50:52], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE6 = getUnsigned(packet[52:53], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE6 = gen_states.CONVERT_tbl_stream_priority_STORE6(self.tbl_stream_priority_STORE6)
        except:
            pass
        
        self.tbl_stream_valid_STORE6 = getUnsigned(packet[53:54], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE6 = gen_states.CONVERT_tbl_stream_valid_STORE6(self.tbl_stream_valid_STORE6)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[54:55], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[55:56], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE7 = getUnsigned(packet[56:58], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE7 = gen_states.CONVERT_tbl_stream_apid_STORE7(self.tbl_stream_apid_STORE7)
        except:
            pass
        
        self.tbl_stream_rate_STORE7 = getUnsigned(packet[58:60], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE7 = getUnsigned(packet[60:61], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE7 = gen_states.CONVERT_tbl_stream_priority_STORE7(self.tbl_stream_priority_STORE7)
        except:
            pass
        
        self.tbl_stream_valid_STORE7 = getUnsigned(packet[61:62], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE7 = gen_states.CONVERT_tbl_stream_valid_STORE7(self.tbl_stream_valid_STORE7)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[62:63], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[63:64], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE8 = getUnsigned(packet[64:66], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE8 = gen_states.CONVERT_tbl_stream_apid_STORE8(self.tbl_stream_apid_STORE8)
        except:
            pass
        
        self.tbl_stream_rate_STORE8 = getUnsigned(packet[66:68], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE8 = getUnsigned(packet[68:69], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE8 = gen_states.CONVERT_tbl_stream_priority_STORE8(self.tbl_stream_priority_STORE8)
        except:
            pass
        
        self.tbl_stream_valid_STORE8 = getUnsigned(packet[69:70], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE8 = gen_states.CONVERT_tbl_stream_valid_STORE8(self.tbl_stream_valid_STORE8)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[70:71], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[71:72], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE9 = getUnsigned(packet[72:74], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE9 = gen_states.CONVERT_tbl_stream_apid_STORE9(self.tbl_stream_apid_STORE9)
        except:
            pass
        
        self.tbl_stream_rate_STORE9 = getUnsigned(packet[74:76], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE9 = getUnsigned(packet[76:77], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE9 = gen_states.CONVERT_tbl_stream_priority_STORE9(self.tbl_stream_priority_STORE9)
        except:
            pass
        
        self.tbl_stream_valid_STORE9 = getUnsigned(packet[77:78], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE9 = gen_states.CONVERT_tbl_stream_valid_STORE9(self.tbl_stream_valid_STORE9)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[78:79], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[79:80], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE10 = getUnsigned(packet[80:82], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE10 = gen_states.CONVERT_tbl_stream_apid_STORE10(self.tbl_stream_apid_STORE10)
        except:
            pass
        
        self.tbl_stream_rate_STORE10 = getUnsigned(packet[82:84], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE10 = getUnsigned(packet[84:85], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE10 = gen_states.CONVERT_tbl_stream_priority_STORE10(self.tbl_stream_priority_STORE10)
        except:
            pass
        
        self.tbl_stream_valid_STORE10 = getUnsigned(packet[85:86], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE10 = gen_states.CONVERT_tbl_stream_valid_STORE10(self.tbl_stream_valid_STORE10)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[86:87], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[87:88], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE11 = getUnsigned(packet[88:90], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE11 = gen_states.CONVERT_tbl_stream_apid_STORE11(self.tbl_stream_apid_STORE11)
        except:
            pass
        
        self.tbl_stream_rate_STORE11 = getUnsigned(packet[90:92], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE11 = getUnsigned(packet[92:93], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE11 = gen_states.CONVERT_tbl_stream_priority_STORE11(self.tbl_stream_priority_STORE11)
        except:
            pass
        
        self.tbl_stream_valid_STORE11 = getUnsigned(packet[93:94], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE11 = gen_states.CONVERT_tbl_stream_valid_STORE11(self.tbl_stream_valid_STORE11)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[94:95], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[95:96], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE12 = getUnsigned(packet[96:98], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE12 = gen_states.CONVERT_tbl_stream_apid_STORE12(self.tbl_stream_apid_STORE12)
        except:
            pass
        
        self.tbl_stream_rate_STORE12 = getUnsigned(packet[98:100], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE12 = getUnsigned(packet[100:101], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE12 = gen_states.CONVERT_tbl_stream_priority_STORE12(self.tbl_stream_priority_STORE12)
        except:
            pass
        
        self.tbl_stream_valid_STORE12 = getUnsigned(packet[101:102], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE12 = gen_states.CONVERT_tbl_stream_valid_STORE12(self.tbl_stream_valid_STORE12)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[102:103], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[103:104], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE13 = getUnsigned(packet[104:106], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE13 = gen_states.CONVERT_tbl_stream_apid_STORE13(self.tbl_stream_apid_STORE13)
        except:
            pass
        
        self.tbl_stream_rate_STORE13 = getUnsigned(packet[106:108], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE13 = getUnsigned(packet[108:109], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE13 = gen_states.CONVERT_tbl_stream_priority_STORE13(self.tbl_stream_priority_STORE13)
        except:
            pass
        
        self.tbl_stream_valid_STORE13 = getUnsigned(packet[109:110], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE13 = gen_states.CONVERT_tbl_stream_valid_STORE13(self.tbl_stream_valid_STORE13)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[110:111], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[111:112], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE14 = getUnsigned(packet[112:114], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE14 = gen_states.CONVERT_tbl_stream_apid_STORE14(self.tbl_stream_apid_STORE14)
        except:
            pass
        
        self.tbl_stream_rate_STORE14 = getUnsigned(packet[114:116], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE14 = getUnsigned(packet[116:117], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE14 = gen_states.CONVERT_tbl_stream_priority_STORE14(self.tbl_stream_priority_STORE14)
        except:
            pass
        
        self.tbl_stream_valid_STORE14 = getUnsigned(packet[117:118], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE14 = gen_states.CONVERT_tbl_stream_valid_STORE14(self.tbl_stream_valid_STORE14)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[118:119], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[119:120], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE15 = getUnsigned(packet[120:122], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE15 = gen_states.CONVERT_tbl_stream_apid_STORE15(self.tbl_stream_apid_STORE15)
        except:
            pass
        
        self.tbl_stream_rate_STORE15 = getUnsigned(packet[122:124], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE15 = getUnsigned(packet[124:125], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE15 = gen_states.CONVERT_tbl_stream_priority_STORE15(self.tbl_stream_priority_STORE15)
        except:
            pass
        
        self.tbl_stream_valid_STORE15 = getUnsigned(packet[125:126], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE15 = gen_states.CONVERT_tbl_stream_valid_STORE15(self.tbl_stream_valid_STORE15)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[126:127], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[127:128], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE16 = getUnsigned(packet[128:130], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE16 = gen_states.CONVERT_tbl_stream_apid_STORE16(self.tbl_stream_apid_STORE16)
        except:
            pass
        
        self.tbl_stream_rate_STORE16 = getUnsigned(packet[130:132], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE16 = getUnsigned(packet[132:133], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE16 = gen_states.CONVERT_tbl_stream_priority_STORE16(self.tbl_stream_priority_STORE16)
        except:
            pass
        
        self.tbl_stream_valid_STORE16 = getUnsigned(packet[133:134], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE16 = gen_states.CONVERT_tbl_stream_valid_STORE16(self.tbl_stream_valid_STORE16)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[134:135], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[135:136], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE17 = getUnsigned(packet[136:138], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE17 = gen_states.CONVERT_tbl_stream_apid_STORE17(self.tbl_stream_apid_STORE17)
        except:
            pass
        
        self.tbl_stream_rate_STORE17 = getUnsigned(packet[138:140], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE17 = getUnsigned(packet[140:141], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE17 = gen_states.CONVERT_tbl_stream_priority_STORE17(self.tbl_stream_priority_STORE17)
        except:
            pass
        
        self.tbl_stream_valid_STORE17 = getUnsigned(packet[141:142], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE17 = gen_states.CONVERT_tbl_stream_valid_STORE17(self.tbl_stream_valid_STORE17)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[142:143], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[143:144], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE18 = getUnsigned(packet[144:146], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE18 = gen_states.CONVERT_tbl_stream_apid_STORE18(self.tbl_stream_apid_STORE18)
        except:
            pass
        
        self.tbl_stream_rate_STORE18 = getUnsigned(packet[146:148], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE18 = getUnsigned(packet[148:149], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE18 = gen_states.CONVERT_tbl_stream_priority_STORE18(self.tbl_stream_priority_STORE18)
        except:
            pass
        
        self.tbl_stream_valid_STORE18 = getUnsigned(packet[149:150], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE18 = gen_states.CONVERT_tbl_stream_valid_STORE18(self.tbl_stream_valid_STORE18)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[150:151], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[151:152], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE19 = getUnsigned(packet[152:154], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE19 = gen_states.CONVERT_tbl_stream_apid_STORE19(self.tbl_stream_apid_STORE19)
        except:
            pass
        
        self.tbl_stream_rate_STORE19 = getUnsigned(packet[154:156], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE19 = getUnsigned(packet[156:157], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE19 = gen_states.CONVERT_tbl_stream_priority_STORE19(self.tbl_stream_priority_STORE19)
        except:
            pass
        
        self.tbl_stream_valid_STORE19 = getUnsigned(packet[157:158], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE19 = gen_states.CONVERT_tbl_stream_valid_STORE19(self.tbl_stream_valid_STORE19)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[158:159], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[159:160], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE20 = getUnsigned(packet[160:162], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE20 = gen_states.CONVERT_tbl_stream_apid_STORE20(self.tbl_stream_apid_STORE20)
        except:
            pass
        
        self.tbl_stream_rate_STORE20 = getUnsigned(packet[162:164], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE20 = getUnsigned(packet[164:165], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE20 = gen_states.CONVERT_tbl_stream_priority_STORE20(self.tbl_stream_priority_STORE20)
        except:
            pass
        
        self.tbl_stream_valid_STORE20 = getUnsigned(packet[165:166], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE20 = gen_states.CONVERT_tbl_stream_valid_STORE20(self.tbl_stream_valid_STORE20)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[166:167], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[167:168], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE21 = getUnsigned(packet[168:170], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE21 = gen_states.CONVERT_tbl_stream_apid_STORE21(self.tbl_stream_apid_STORE21)
        except:
            pass
        
        self.tbl_stream_rate_STORE21 = getUnsigned(packet[170:172], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE21 = getUnsigned(packet[172:173], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE21 = gen_states.CONVERT_tbl_stream_priority_STORE21(self.tbl_stream_priority_STORE21)
        except:
            pass
        
        self.tbl_stream_valid_STORE21 = getUnsigned(packet[173:174], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE21 = gen_states.CONVERT_tbl_stream_valid_STORE21(self.tbl_stream_valid_STORE21)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[174:175], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[175:176], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE22 = getUnsigned(packet[176:178], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE22 = gen_states.CONVERT_tbl_stream_apid_STORE22(self.tbl_stream_apid_STORE22)
        except:
            pass
        
        self.tbl_stream_rate_STORE22 = getUnsigned(packet[178:180], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE22 = getUnsigned(packet[180:181], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE22 = gen_states.CONVERT_tbl_stream_priority_STORE22(self.tbl_stream_priority_STORE22)
        except:
            pass
        
        self.tbl_stream_valid_STORE22 = getUnsigned(packet[181:182], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE22 = gen_states.CONVERT_tbl_stream_valid_STORE22(self.tbl_stream_valid_STORE22)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[182:183], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[183:184], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE23 = getUnsigned(packet[184:186], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE23 = gen_states.CONVERT_tbl_stream_apid_STORE23(self.tbl_stream_apid_STORE23)
        except:
            pass
        
        self.tbl_stream_rate_STORE23 = getUnsigned(packet[186:188], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE23 = getUnsigned(packet[188:189], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE23 = gen_states.CONVERT_tbl_stream_priority_STORE23(self.tbl_stream_priority_STORE23)
        except:
            pass
        
        self.tbl_stream_valid_STORE23 = getUnsigned(packet[189:190], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE23 = gen_states.CONVERT_tbl_stream_valid_STORE23(self.tbl_stream_valid_STORE23)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[190:191], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[191:192], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE24 = getUnsigned(packet[192:194], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE24 = gen_states.CONVERT_tbl_stream_apid_STORE24(self.tbl_stream_apid_STORE24)
        except:
            pass
        
        self.tbl_stream_rate_STORE24 = getUnsigned(packet[194:196], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE24 = getUnsigned(packet[196:197], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE24 = gen_states.CONVERT_tbl_stream_priority_STORE24(self.tbl_stream_priority_STORE24)
        except:
            pass
        
        self.tbl_stream_valid_STORE24 = getUnsigned(packet[197:198], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE24 = gen_states.CONVERT_tbl_stream_valid_STORE24(self.tbl_stream_valid_STORE24)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[198:199], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[199:200], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE25 = getUnsigned(packet[200:202], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE25 = gen_states.CONVERT_tbl_stream_apid_STORE25(self.tbl_stream_apid_STORE25)
        except:
            pass
        
        self.tbl_stream_rate_STORE25 = getUnsigned(packet[202:204], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE25 = getUnsigned(packet[204:205], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE25 = gen_states.CONVERT_tbl_stream_priority_STORE25(self.tbl_stream_priority_STORE25)
        except:
            pass
        
        self.tbl_stream_valid_STORE25 = getUnsigned(packet[205:206], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE25 = gen_states.CONVERT_tbl_stream_valid_STORE25(self.tbl_stream_valid_STORE25)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[206:207], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[207:208], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE26 = getUnsigned(packet[208:210], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE26 = gen_states.CONVERT_tbl_stream_apid_STORE26(self.tbl_stream_apid_STORE26)
        except:
            pass
        
        self.tbl_stream_rate_STORE26 = getUnsigned(packet[210:212], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE26 = getUnsigned(packet[212:213], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE26 = gen_states.CONVERT_tbl_stream_priority_STORE26(self.tbl_stream_priority_STORE26)
        except:
            pass
        
        self.tbl_stream_valid_STORE26 = getUnsigned(packet[213:214], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE26 = gen_states.CONVERT_tbl_stream_valid_STORE26(self.tbl_stream_valid_STORE26)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[214:215], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[215:216], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE27 = getUnsigned(packet[216:218], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE27 = gen_states.CONVERT_tbl_stream_apid_STORE27(self.tbl_stream_apid_STORE27)
        except:
            pass
        
        self.tbl_stream_rate_STORE27 = getUnsigned(packet[218:220], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE27 = getUnsigned(packet[220:221], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE27 = gen_states.CONVERT_tbl_stream_priority_STORE27(self.tbl_stream_priority_STORE27)
        except:
            pass
        
        self.tbl_stream_valid_STORE27 = getUnsigned(packet[221:222], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE27 = gen_states.CONVERT_tbl_stream_valid_STORE27(self.tbl_stream_valid_STORE27)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[222:223], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[223:224], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE28 = getUnsigned(packet[224:226], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE28 = gen_states.CONVERT_tbl_stream_apid_STORE28(self.tbl_stream_apid_STORE28)
        except:
            pass
        
        self.tbl_stream_rate_STORE28 = getUnsigned(packet[226:228], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE28 = getUnsigned(packet[228:229], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE28 = gen_states.CONVERT_tbl_stream_priority_STORE28(self.tbl_stream_priority_STORE28)
        except:
            pass
        
        self.tbl_stream_valid_STORE28 = getUnsigned(packet[229:230], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE28 = gen_states.CONVERT_tbl_stream_valid_STORE28(self.tbl_stream_valid_STORE28)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[230:231], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[231:232], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE29 = getUnsigned(packet[232:234], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE29 = gen_states.CONVERT_tbl_stream_apid_STORE29(self.tbl_stream_apid_STORE29)
        except:
            pass
        
        self.tbl_stream_rate_STORE29 = getUnsigned(packet[234:236], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE29 = getUnsigned(packet[236:237], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE29 = gen_states.CONVERT_tbl_stream_priority_STORE29(self.tbl_stream_priority_STORE29)
        except:
            pass
        
        self.tbl_stream_valid_STORE29 = getUnsigned(packet[237:238], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE29 = gen_states.CONVERT_tbl_stream_valid_STORE29(self.tbl_stream_valid_STORE29)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[238:239], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[239:240], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE30 = getUnsigned(packet[240:242], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE30 = gen_states.CONVERT_tbl_stream_apid_STORE30(self.tbl_stream_apid_STORE30)
        except:
            pass
        
        self.tbl_stream_rate_STORE30 = getUnsigned(packet[242:244], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE30 = getUnsigned(packet[244:245], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE30 = gen_states.CONVERT_tbl_stream_priority_STORE30(self.tbl_stream_priority_STORE30)
        except:
            pass
        
        self.tbl_stream_valid_STORE30 = getUnsigned(packet[245:246], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE30 = gen_states.CONVERT_tbl_stream_valid_STORE30(self.tbl_stream_valid_STORE30)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[246:247], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[247:248], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE31 = getUnsigned(packet[248:250], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE31 = gen_states.CONVERT_tbl_stream_apid_STORE31(self.tbl_stream_apid_STORE31)
        except:
            pass
        
        self.tbl_stream_rate_STORE31 = getUnsigned(packet[250:252], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE31 = getUnsigned(packet[252:253], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE31 = gen_states.CONVERT_tbl_stream_priority_STORE31(self.tbl_stream_priority_STORE31)
        except:
            pass
        
        self.tbl_stream_valid_STORE31 = getUnsigned(packet[253:254], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE31 = gen_states.CONVERT_tbl_stream_valid_STORE31(self.tbl_stream_valid_STORE31)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[254:255], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[255:256], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE32 = getUnsigned(packet[256:258], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE32 = gen_states.CONVERT_tbl_stream_apid_STORE32(self.tbl_stream_apid_STORE32)
        except:
            pass
        
        self.tbl_stream_rate_STORE32 = getUnsigned(packet[258:260], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE32 = getUnsigned(packet[260:261], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE32 = gen_states.CONVERT_tbl_stream_priority_STORE32(self.tbl_stream_priority_STORE32)
        except:
            pass
        
        self.tbl_stream_valid_STORE32 = getUnsigned(packet[261:262], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE32 = gen_states.CONVERT_tbl_stream_valid_STORE32(self.tbl_stream_valid_STORE32)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[262:263], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[263:264], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE33 = getUnsigned(packet[264:266], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE33 = gen_states.CONVERT_tbl_stream_apid_STORE33(self.tbl_stream_apid_STORE33)
        except:
            pass
        
        self.tbl_stream_rate_STORE33 = getUnsigned(packet[266:268], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE33 = getUnsigned(packet[268:269], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE33 = gen_states.CONVERT_tbl_stream_priority_STORE33(self.tbl_stream_priority_STORE33)
        except:
            pass
        
        self.tbl_stream_valid_STORE33 = getUnsigned(packet[269:270], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE33 = gen_states.CONVERT_tbl_stream_valid_STORE33(self.tbl_stream_valid_STORE33)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[270:271], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[271:272], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE34 = getUnsigned(packet[272:274], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE34 = gen_states.CONVERT_tbl_stream_apid_STORE34(self.tbl_stream_apid_STORE34)
        except:
            pass
        
        self.tbl_stream_rate_STORE34 = getUnsigned(packet[274:276], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE34 = getUnsigned(packet[276:277], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE34 = gen_states.CONVERT_tbl_stream_priority_STORE34(self.tbl_stream_priority_STORE34)
        except:
            pass
        
        self.tbl_stream_valid_STORE34 = getUnsigned(packet[277:278], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE34 = gen_states.CONVERT_tbl_stream_valid_STORE34(self.tbl_stream_valid_STORE34)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[278:279], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[279:280], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE35 = getUnsigned(packet[280:282], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE35 = gen_states.CONVERT_tbl_stream_apid_STORE35(self.tbl_stream_apid_STORE35)
        except:
            pass
        
        self.tbl_stream_rate_STORE35 = getUnsigned(packet[282:284], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE35 = getUnsigned(packet[284:285], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE35 = gen_states.CONVERT_tbl_stream_priority_STORE35(self.tbl_stream_priority_STORE35)
        except:
            pass
        
        self.tbl_stream_valid_STORE35 = getUnsigned(packet[285:286], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE35 = gen_states.CONVERT_tbl_stream_valid_STORE35(self.tbl_stream_valid_STORE35)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[286:287], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[287:288], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE36 = getUnsigned(packet[288:290], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE36 = gen_states.CONVERT_tbl_stream_apid_STORE36(self.tbl_stream_apid_STORE36)
        except:
            pass
        
        self.tbl_stream_rate_STORE36 = getUnsigned(packet[290:292], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE36 = getUnsigned(packet[292:293], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE36 = gen_states.CONVERT_tbl_stream_priority_STORE36(self.tbl_stream_priority_STORE36)
        except:
            pass
        
        self.tbl_stream_valid_STORE36 = getUnsigned(packet[293:294], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE36 = gen_states.CONVERT_tbl_stream_valid_STORE36(self.tbl_stream_valid_STORE36)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[294:295], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[295:296], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE37 = getUnsigned(packet[296:298], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE37 = gen_states.CONVERT_tbl_stream_apid_STORE37(self.tbl_stream_apid_STORE37)
        except:
            pass
        
        self.tbl_stream_rate_STORE37 = getUnsigned(packet[298:300], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE37 = getUnsigned(packet[300:301], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE37 = gen_states.CONVERT_tbl_stream_priority_STORE37(self.tbl_stream_priority_STORE37)
        except:
            pass
        
        self.tbl_stream_valid_STORE37 = getUnsigned(packet[301:302], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE37 = gen_states.CONVERT_tbl_stream_valid_STORE37(self.tbl_stream_valid_STORE37)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[302:303], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[303:304], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE38 = getUnsigned(packet[304:306], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE38 = gen_states.CONVERT_tbl_stream_apid_STORE38(self.tbl_stream_apid_STORE38)
        except:
            pass
        
        self.tbl_stream_rate_STORE38 = getUnsigned(packet[306:308], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE38 = getUnsigned(packet[308:309], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE38 = gen_states.CONVERT_tbl_stream_priority_STORE38(self.tbl_stream_priority_STORE38)
        except:
            pass
        
        self.tbl_stream_valid_STORE38 = getUnsigned(packet[309:310], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE38 = gen_states.CONVERT_tbl_stream_valid_STORE38(self.tbl_stream_valid_STORE38)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[310:311], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[311:312], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE39 = getUnsigned(packet[312:314], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE39 = gen_states.CONVERT_tbl_stream_apid_STORE39(self.tbl_stream_apid_STORE39)
        except:
            pass
        
        self.tbl_stream_rate_STORE39 = getUnsigned(packet[314:316], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE39 = getUnsigned(packet[316:317], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE39 = gen_states.CONVERT_tbl_stream_priority_STORE39(self.tbl_stream_priority_STORE39)
        except:
            pass
        
        self.tbl_stream_valid_STORE39 = getUnsigned(packet[317:318], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE39 = gen_states.CONVERT_tbl_stream_valid_STORE39(self.tbl_stream_valid_STORE39)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[318:319], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[319:320], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE40 = getUnsigned(packet[320:322], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE40 = gen_states.CONVERT_tbl_stream_apid_STORE40(self.tbl_stream_apid_STORE40)
        except:
            pass
        
        self.tbl_stream_rate_STORE40 = getUnsigned(packet[322:324], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE40 = getUnsigned(packet[324:325], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE40 = gen_states.CONVERT_tbl_stream_priority_STORE40(self.tbl_stream_priority_STORE40)
        except:
            pass
        
        self.tbl_stream_valid_STORE40 = getUnsigned(packet[325:326], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE40 = gen_states.CONVERT_tbl_stream_valid_STORE40(self.tbl_stream_valid_STORE40)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[326:327], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[327:328], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE41 = getUnsigned(packet[328:330], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE41 = gen_states.CONVERT_tbl_stream_apid_STORE41(self.tbl_stream_apid_STORE41)
        except:
            pass
        
        self.tbl_stream_rate_STORE41 = getUnsigned(packet[330:332], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE41 = getUnsigned(packet[332:333], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE41 = gen_states.CONVERT_tbl_stream_priority_STORE41(self.tbl_stream_priority_STORE41)
        except:
            pass
        
        self.tbl_stream_valid_STORE41 = getUnsigned(packet[333:334], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE41 = gen_states.CONVERT_tbl_stream_valid_STORE41(self.tbl_stream_valid_STORE41)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[334:335], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[335:336], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE42 = getUnsigned(packet[336:338], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE42 = gen_states.CONVERT_tbl_stream_apid_STORE42(self.tbl_stream_apid_STORE42)
        except:
            pass
        
        self.tbl_stream_rate_STORE42 = getUnsigned(packet[338:340], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE42 = getUnsigned(packet[340:341], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE42 = gen_states.CONVERT_tbl_stream_priority_STORE42(self.tbl_stream_priority_STORE42)
        except:
            pass
        
        self.tbl_stream_valid_STORE42 = getUnsigned(packet[341:342], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE42 = gen_states.CONVERT_tbl_stream_valid_STORE42(self.tbl_stream_valid_STORE42)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[342:343], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[343:344], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE43 = getUnsigned(packet[344:346], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE43 = gen_states.CONVERT_tbl_stream_apid_STORE43(self.tbl_stream_apid_STORE43)
        except:
            pass
        
        self.tbl_stream_rate_STORE43 = getUnsigned(packet[346:348], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE43 = getUnsigned(packet[348:349], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE43 = gen_states.CONVERT_tbl_stream_priority_STORE43(self.tbl_stream_priority_STORE43)
        except:
            pass
        
        self.tbl_stream_valid_STORE43 = getUnsigned(packet[349:350], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE43 = gen_states.CONVERT_tbl_stream_valid_STORE43(self.tbl_stream_valid_STORE43)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[350:351], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[351:352], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE44 = getUnsigned(packet[352:354], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE44 = gen_states.CONVERT_tbl_stream_apid_STORE44(self.tbl_stream_apid_STORE44)
        except:
            pass
        
        self.tbl_stream_rate_STORE44 = getUnsigned(packet[354:356], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE44 = getUnsigned(packet[356:357], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE44 = gen_states.CONVERT_tbl_stream_priority_STORE44(self.tbl_stream_priority_STORE44)
        except:
            pass
        
        self.tbl_stream_valid_STORE44 = getUnsigned(packet[357:358], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE44 = gen_states.CONVERT_tbl_stream_valid_STORE44(self.tbl_stream_valid_STORE44)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[358:359], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[359:360], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE45 = getUnsigned(packet[360:362], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE45 = gen_states.CONVERT_tbl_stream_apid_STORE45(self.tbl_stream_apid_STORE45)
        except:
            pass
        
        self.tbl_stream_rate_STORE45 = getUnsigned(packet[362:364], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE45 = getUnsigned(packet[364:365], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE45 = gen_states.CONVERT_tbl_stream_priority_STORE45(self.tbl_stream_priority_STORE45)
        except:
            pass
        
        self.tbl_stream_valid_STORE45 = getUnsigned(packet[365:366], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE45 = gen_states.CONVERT_tbl_stream_valid_STORE45(self.tbl_stream_valid_STORE45)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[366:367], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[367:368], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE46 = getUnsigned(packet[368:370], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE46 = gen_states.CONVERT_tbl_stream_apid_STORE46(self.tbl_stream_apid_STORE46)
        except:
            pass
        
        self.tbl_stream_rate_STORE46 = getUnsigned(packet[370:372], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE46 = getUnsigned(packet[372:373], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE46 = gen_states.CONVERT_tbl_stream_priority_STORE46(self.tbl_stream_priority_STORE46)
        except:
            pass
        
        self.tbl_stream_valid_STORE46 = getUnsigned(packet[373:374], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE46 = gen_states.CONVERT_tbl_stream_valid_STORE46(self.tbl_stream_valid_STORE46)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[374:375], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[375:376], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE47 = getUnsigned(packet[376:378], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE47 = gen_states.CONVERT_tbl_stream_apid_STORE47(self.tbl_stream_apid_STORE47)
        except:
            pass
        
        self.tbl_stream_rate_STORE47 = getUnsigned(packet[378:380], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE47 = getUnsigned(packet[380:381], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE47 = gen_states.CONVERT_tbl_stream_priority_STORE47(self.tbl_stream_priority_STORE47)
        except:
            pass
        
        self.tbl_stream_valid_STORE47 = getUnsigned(packet[381:382], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE47 = gen_states.CONVERT_tbl_stream_valid_STORE47(self.tbl_stream_valid_STORE47)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[382:383], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[383:384], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE48 = getUnsigned(packet[384:386], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE48 = gen_states.CONVERT_tbl_stream_apid_STORE48(self.tbl_stream_apid_STORE48)
        except:
            pass
        
        self.tbl_stream_rate_STORE48 = getUnsigned(packet[386:388], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE48 = getUnsigned(packet[388:389], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE48 = gen_states.CONVERT_tbl_stream_priority_STORE48(self.tbl_stream_priority_STORE48)
        except:
            pass
        
        self.tbl_stream_valid_STORE48 = getUnsigned(packet[389:390], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE48 = gen_states.CONVERT_tbl_stream_valid_STORE48(self.tbl_stream_valid_STORE48)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[390:391], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[391:392], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE49 = getUnsigned(packet[392:394], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE49 = gen_states.CONVERT_tbl_stream_apid_STORE49(self.tbl_stream_apid_STORE49)
        except:
            pass
        
        self.tbl_stream_rate_STORE49 = getUnsigned(packet[394:396], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE49 = getUnsigned(packet[396:397], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE49 = gen_states.CONVERT_tbl_stream_priority_STORE49(self.tbl_stream_priority_STORE49)
        except:
            pass
        
        self.tbl_stream_valid_STORE49 = getUnsigned(packet[397:398], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE49 = gen_states.CONVERT_tbl_stream_valid_STORE49(self.tbl_stream_valid_STORE49)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[398:399], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[399:400], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE50 = getUnsigned(packet[400:402], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE50 = gen_states.CONVERT_tbl_stream_apid_STORE50(self.tbl_stream_apid_STORE50)
        except:
            pass
        
        self.tbl_stream_rate_STORE50 = getUnsigned(packet[402:404], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE50 = getUnsigned(packet[404:405], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE50 = gen_states.CONVERT_tbl_stream_priority_STORE50(self.tbl_stream_priority_STORE50)
        except:
            pass
        
        self.tbl_stream_valid_STORE50 = getUnsigned(packet[405:406], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE50 = gen_states.CONVERT_tbl_stream_valid_STORE50(self.tbl_stream_valid_STORE50)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[406:407], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[407:408], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE51 = getUnsigned(packet[408:410], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE51 = gen_states.CONVERT_tbl_stream_apid_STORE51(self.tbl_stream_apid_STORE51)
        except:
            pass
        
        self.tbl_stream_rate_STORE51 = getUnsigned(packet[410:412], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE51 = getUnsigned(packet[412:413], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE51 = gen_states.CONVERT_tbl_stream_priority_STORE51(self.tbl_stream_priority_STORE51)
        except:
            pass
        
        self.tbl_stream_valid_STORE51 = getUnsigned(packet[413:414], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE51 = gen_states.CONVERT_tbl_stream_valid_STORE51(self.tbl_stream_valid_STORE51)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[414:415], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[415:416], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE52 = getUnsigned(packet[416:418], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE52 = gen_states.CONVERT_tbl_stream_apid_STORE52(self.tbl_stream_apid_STORE52)
        except:
            pass
        
        self.tbl_stream_rate_STORE52 = getUnsigned(packet[418:420], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE52 = getUnsigned(packet[420:421], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE52 = gen_states.CONVERT_tbl_stream_priority_STORE52(self.tbl_stream_priority_STORE52)
        except:
            pass
        
        self.tbl_stream_valid_STORE52 = getUnsigned(packet[421:422], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE52 = gen_states.CONVERT_tbl_stream_valid_STORE52(self.tbl_stream_valid_STORE52)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[422:423], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[423:424], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE53 = getUnsigned(packet[424:426], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE53 = gen_states.CONVERT_tbl_stream_apid_STORE53(self.tbl_stream_apid_STORE53)
        except:
            pass
        
        self.tbl_stream_rate_STORE53 = getUnsigned(packet[426:428], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE53 = getUnsigned(packet[428:429], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE53 = gen_states.CONVERT_tbl_stream_priority_STORE53(self.tbl_stream_priority_STORE53)
        except:
            pass
        
        self.tbl_stream_valid_STORE53 = getUnsigned(packet[429:430], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE53 = gen_states.CONVERT_tbl_stream_valid_STORE53(self.tbl_stream_valid_STORE53)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[430:431], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[431:432], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE54 = getUnsigned(packet[432:434], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE54 = gen_states.CONVERT_tbl_stream_apid_STORE54(self.tbl_stream_apid_STORE54)
        except:
            pass
        
        self.tbl_stream_rate_STORE54 = getUnsigned(packet[434:436], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE54 = getUnsigned(packet[436:437], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE54 = gen_states.CONVERT_tbl_stream_priority_STORE54(self.tbl_stream_priority_STORE54)
        except:
            pass
        
        self.tbl_stream_valid_STORE54 = getUnsigned(packet[437:438], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE54 = gen_states.CONVERT_tbl_stream_valid_STORE54(self.tbl_stream_valid_STORE54)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[438:439], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[439:440], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE55 = getUnsigned(packet[440:442], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE55 = gen_states.CONVERT_tbl_stream_apid_STORE55(self.tbl_stream_apid_STORE55)
        except:
            pass
        
        self.tbl_stream_rate_STORE55 = getUnsigned(packet[442:444], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE55 = getUnsigned(packet[444:445], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE55 = gen_states.CONVERT_tbl_stream_priority_STORE55(self.tbl_stream_priority_STORE55)
        except:
            pass
        
        self.tbl_stream_valid_STORE55 = getUnsigned(packet[445:446], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE55 = gen_states.CONVERT_tbl_stream_valid_STORE55(self.tbl_stream_valid_STORE55)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[446:447], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[447:448], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE56 = getUnsigned(packet[448:450], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE56 = gen_states.CONVERT_tbl_stream_apid_STORE56(self.tbl_stream_apid_STORE56)
        except:
            pass
        
        self.tbl_stream_rate_STORE56 = getUnsigned(packet[450:452], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE56 = getUnsigned(packet[452:453], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE56 = gen_states.CONVERT_tbl_stream_priority_STORE56(self.tbl_stream_priority_STORE56)
        except:
            pass
        
        self.tbl_stream_valid_STORE56 = getUnsigned(packet[453:454], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE56 = gen_states.CONVERT_tbl_stream_valid_STORE56(self.tbl_stream_valid_STORE56)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[454:455], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[455:456], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE57 = getUnsigned(packet[456:458], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE57 = gen_states.CONVERT_tbl_stream_apid_STORE57(self.tbl_stream_apid_STORE57)
        except:
            pass
        
        self.tbl_stream_rate_STORE57 = getUnsigned(packet[458:460], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE57 = getUnsigned(packet[460:461], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE57 = gen_states.CONVERT_tbl_stream_priority_STORE57(self.tbl_stream_priority_STORE57)
        except:
            pass
        
        self.tbl_stream_valid_STORE57 = getUnsigned(packet[461:462], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE57 = gen_states.CONVERT_tbl_stream_valid_STORE57(self.tbl_stream_valid_STORE57)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[462:463], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[463:464], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE58 = getUnsigned(packet[464:466], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE58 = gen_states.CONVERT_tbl_stream_apid_STORE58(self.tbl_stream_apid_STORE58)
        except:
            pass
        
        self.tbl_stream_rate_STORE58 = getUnsigned(packet[466:468], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE58 = getUnsigned(packet[468:469], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE58 = gen_states.CONVERT_tbl_stream_priority_STORE58(self.tbl_stream_priority_STORE58)
        except:
            pass
        
        self.tbl_stream_valid_STORE58 = getUnsigned(packet[469:470], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE58 = gen_states.CONVERT_tbl_stream_valid_STORE58(self.tbl_stream_valid_STORE58)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[470:471], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[471:472], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE59 = getUnsigned(packet[472:474], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE59 = gen_states.CONVERT_tbl_stream_apid_STORE59(self.tbl_stream_apid_STORE59)
        except:
            pass
        
        self.tbl_stream_rate_STORE59 = getUnsigned(packet[474:476], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE59 = getUnsigned(packet[476:477], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE59 = gen_states.CONVERT_tbl_stream_priority_STORE59(self.tbl_stream_priority_STORE59)
        except:
            pass
        
        self.tbl_stream_valid_STORE59 = getUnsigned(packet[477:478], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE59 = gen_states.CONVERT_tbl_stream_valid_STORE59(self.tbl_stream_valid_STORE59)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[478:479], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[479:480], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE60 = getUnsigned(packet[480:482], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE60 = gen_states.CONVERT_tbl_stream_apid_STORE60(self.tbl_stream_apid_STORE60)
        except:
            pass
        
        self.tbl_stream_rate_STORE60 = getUnsigned(packet[482:484], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE60 = getUnsigned(packet[484:485], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE60 = gen_states.CONVERT_tbl_stream_priority_STORE60(self.tbl_stream_priority_STORE60)
        except:
            pass
        
        self.tbl_stream_valid_STORE60 = getUnsigned(packet[485:486], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE60 = gen_states.CONVERT_tbl_stream_valid_STORE60(self.tbl_stream_valid_STORE60)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[486:487], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[487:488], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE61 = getUnsigned(packet[488:490], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE61 = gen_states.CONVERT_tbl_stream_apid_STORE61(self.tbl_stream_apid_STORE61)
        except:
            pass
        
        self.tbl_stream_rate_STORE61 = getUnsigned(packet[490:492], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE61 = getUnsigned(packet[492:493], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE61 = gen_states.CONVERT_tbl_stream_priority_STORE61(self.tbl_stream_priority_STORE61)
        except:
            pass
        
        self.tbl_stream_valid_STORE61 = getUnsigned(packet[493:494], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE61 = gen_states.CONVERT_tbl_stream_valid_STORE61(self.tbl_stream_valid_STORE61)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[494:495], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[495:496], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE62 = getUnsigned(packet[496:498], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE62 = gen_states.CONVERT_tbl_stream_apid_STORE62(self.tbl_stream_apid_STORE62)
        except:
            pass
        
        self.tbl_stream_rate_STORE62 = getUnsigned(packet[498:500], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE62 = getUnsigned(packet[500:501], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE62 = gen_states.CONVERT_tbl_stream_priority_STORE62(self.tbl_stream_priority_STORE62)
        except:
            pass
        
        self.tbl_stream_valid_STORE62 = getUnsigned(packet[501:502], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE62 = gen_states.CONVERT_tbl_stream_valid_STORE62(self.tbl_stream_valid_STORE62)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[502:503], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[503:504], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE63 = getUnsigned(packet[504:506], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE63 = gen_states.CONVERT_tbl_stream_apid_STORE63(self.tbl_stream_apid_STORE63)
        except:
            pass
        
        self.tbl_stream_rate_STORE63 = getUnsigned(packet[506:508], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE63 = getUnsigned(packet[508:509], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE63 = gen_states.CONVERT_tbl_stream_priority_STORE63(self.tbl_stream_priority_STORE63)
        except:
            pass
        
        self.tbl_stream_valid_STORE63 = getUnsigned(packet[509:510], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE63 = gen_states.CONVERT_tbl_stream_valid_STORE63(self.tbl_stream_valid_STORE63)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[510:511], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[511:512], 'big', 0, 255)
        
        self.tbl_stream_apid_STORE64 = getUnsigned(packet[512:514], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_STORE64 = gen_states.CONVERT_tbl_stream_apid_STORE64(self.tbl_stream_apid_STORE64)
        except:
            pass
        
        self.tbl_stream_rate_STORE64 = getUnsigned(packet[514:516], 'little', 0, 65535)
        
        self.tbl_stream_priority_STORE64 = getUnsigned(packet[516:517], 'little', 0, 255)
        try:
            self.tbl_stream_priority_STORE64 = gen_states.CONVERT_tbl_stream_priority_STORE64(self.tbl_stream_priority_STORE64)
        except:
            pass
        
        self.tbl_stream_valid_STORE64 = getUnsigned(packet[517:518], 'little', 0, 255)
        try:
            self.tbl_stream_valid_STORE64 = gen_states.CONVERT_tbl_stream_valid_STORE64(self.tbl_stream_valid_STORE64)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[518:519], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[519:520], 'big', 0, 255)

class TBL_STREAM_UHF:
    def __str__(self):
        return 'TBL_STREAM_UHF'

    def __init__(self, packet, pkt_time, tbl_id, file_origin):
        self.pkt_time = pkt_time
        self.file_origin = file_origin
        
        self.tbl_stream_apid_UHF0 = getUnsigned(packet[0:2], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF0 = gen_states.CONVERT_tbl_stream_apid_UHF0(self.tbl_stream_apid_UHF0)
        except:
            pass
        
        self.tbl_stream_rate_UHF0 = getUnsigned(packet[2:4], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF0 = getUnsigned(packet[4:5], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF0 = gen_states.CONVERT_tbl_stream_priority_UHF0(self.tbl_stream_priority_UHF0)
        except:
            pass
        
        self.tbl_stream_valid_UHF0 = getUnsigned(packet[5:6], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF0 = gen_states.CONVERT_tbl_stream_valid_UHF0(self.tbl_stream_valid_UHF0)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[6:7], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[7:8], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF1 = getUnsigned(packet[8:10], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF1 = gen_states.CONVERT_tbl_stream_apid_UHF1(self.tbl_stream_apid_UHF1)
        except:
            pass
        
        self.tbl_stream_rate_UHF1 = getUnsigned(packet[10:12], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF1 = getUnsigned(packet[12:13], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF1 = gen_states.CONVERT_tbl_stream_priority_UHF1(self.tbl_stream_priority_UHF1)
        except:
            pass
        
        self.tbl_stream_valid_UHF1 = getUnsigned(packet[13:14], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF1 = gen_states.CONVERT_tbl_stream_valid_UHF1(self.tbl_stream_valid_UHF1)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[14:15], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[15:16], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF2 = getUnsigned(packet[16:18], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF2 = gen_states.CONVERT_tbl_stream_apid_UHF2(self.tbl_stream_apid_UHF2)
        except:
            pass
        
        self.tbl_stream_rate_UHF2 = getUnsigned(packet[18:20], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF2 = getUnsigned(packet[20:21], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF2 = gen_states.CONVERT_tbl_stream_priority_UHF2(self.tbl_stream_priority_UHF2)
        except:
            pass
        
        self.tbl_stream_valid_UHF2 = getUnsigned(packet[21:22], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF2 = gen_states.CONVERT_tbl_stream_valid_UHF2(self.tbl_stream_valid_UHF2)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[22:23], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[23:24], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF3 = getUnsigned(packet[24:26], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF3 = gen_states.CONVERT_tbl_stream_apid_UHF3(self.tbl_stream_apid_UHF3)
        except:
            pass
        
        self.tbl_stream_rate_UHF3 = getUnsigned(packet[26:28], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF3 = getUnsigned(packet[28:29], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF3 = gen_states.CONVERT_tbl_stream_priority_UHF3(self.tbl_stream_priority_UHF3)
        except:
            pass
        
        self.tbl_stream_valid_UHF3 = getUnsigned(packet[29:30], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF3 = gen_states.CONVERT_tbl_stream_valid_UHF3(self.tbl_stream_valid_UHF3)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[30:31], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[31:32], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF4 = getUnsigned(packet[32:34], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF4 = gen_states.CONVERT_tbl_stream_apid_UHF4(self.tbl_stream_apid_UHF4)
        except:
            pass
        
        self.tbl_stream_rate_UHF4 = getUnsigned(packet[34:36], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF4 = getUnsigned(packet[36:37], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF4 = gen_states.CONVERT_tbl_stream_priority_UHF4(self.tbl_stream_priority_UHF4)
        except:
            pass
        
        self.tbl_stream_valid_UHF4 = getUnsigned(packet[37:38], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF4 = gen_states.CONVERT_tbl_stream_valid_UHF4(self.tbl_stream_valid_UHF4)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[38:39], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[39:40], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF5 = getUnsigned(packet[40:42], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF5 = gen_states.CONVERT_tbl_stream_apid_UHF5(self.tbl_stream_apid_UHF5)
        except:
            pass
        
        self.tbl_stream_rate_UHF5 = getUnsigned(packet[42:44], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF5 = getUnsigned(packet[44:45], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF5 = gen_states.CONVERT_tbl_stream_priority_UHF5(self.tbl_stream_priority_UHF5)
        except:
            pass
        
        self.tbl_stream_valid_UHF5 = getUnsigned(packet[45:46], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF5 = gen_states.CONVERT_tbl_stream_valid_UHF5(self.tbl_stream_valid_UHF5)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[46:47], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[47:48], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF6 = getUnsigned(packet[48:50], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF6 = gen_states.CONVERT_tbl_stream_apid_UHF6(self.tbl_stream_apid_UHF6)
        except:
            pass
        
        self.tbl_stream_rate_UHF6 = getUnsigned(packet[50:52], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF6 = getUnsigned(packet[52:53], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF6 = gen_states.CONVERT_tbl_stream_priority_UHF6(self.tbl_stream_priority_UHF6)
        except:
            pass
        
        self.tbl_stream_valid_UHF6 = getUnsigned(packet[53:54], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF6 = gen_states.CONVERT_tbl_stream_valid_UHF6(self.tbl_stream_valid_UHF6)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[54:55], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[55:56], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF7 = getUnsigned(packet[56:58], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF7 = gen_states.CONVERT_tbl_stream_apid_UHF7(self.tbl_stream_apid_UHF7)
        except:
            pass
        
        self.tbl_stream_rate_UHF7 = getUnsigned(packet[58:60], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF7 = getUnsigned(packet[60:61], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF7 = gen_states.CONVERT_tbl_stream_priority_UHF7(self.tbl_stream_priority_UHF7)
        except:
            pass
        
        self.tbl_stream_valid_UHF7 = getUnsigned(packet[61:62], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF7 = gen_states.CONVERT_tbl_stream_valid_UHF7(self.tbl_stream_valid_UHF7)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[62:63], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[63:64], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF8 = getUnsigned(packet[64:66], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF8 = gen_states.CONVERT_tbl_stream_apid_UHF8(self.tbl_stream_apid_UHF8)
        except:
            pass
        
        self.tbl_stream_rate_UHF8 = getUnsigned(packet[66:68], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF8 = getUnsigned(packet[68:69], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF8 = gen_states.CONVERT_tbl_stream_priority_UHF8(self.tbl_stream_priority_UHF8)
        except:
            pass
        
        self.tbl_stream_valid_UHF8 = getUnsigned(packet[69:70], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF8 = gen_states.CONVERT_tbl_stream_valid_UHF8(self.tbl_stream_valid_UHF8)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[70:71], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[71:72], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF9 = getUnsigned(packet[72:74], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF9 = gen_states.CONVERT_tbl_stream_apid_UHF9(self.tbl_stream_apid_UHF9)
        except:
            pass
        
        self.tbl_stream_rate_UHF9 = getUnsigned(packet[74:76], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF9 = getUnsigned(packet[76:77], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF9 = gen_states.CONVERT_tbl_stream_priority_UHF9(self.tbl_stream_priority_UHF9)
        except:
            pass
        
        self.tbl_stream_valid_UHF9 = getUnsigned(packet[77:78], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF9 = gen_states.CONVERT_tbl_stream_valid_UHF9(self.tbl_stream_valid_UHF9)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[78:79], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[79:80], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF10 = getUnsigned(packet[80:82], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF10 = gen_states.CONVERT_tbl_stream_apid_UHF10(self.tbl_stream_apid_UHF10)
        except:
            pass
        
        self.tbl_stream_rate_UHF10 = getUnsigned(packet[82:84], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF10 = getUnsigned(packet[84:85], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF10 = gen_states.CONVERT_tbl_stream_priority_UHF10(self.tbl_stream_priority_UHF10)
        except:
            pass
        
        self.tbl_stream_valid_UHF10 = getUnsigned(packet[85:86], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF10 = gen_states.CONVERT_tbl_stream_valid_UHF10(self.tbl_stream_valid_UHF10)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[86:87], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[87:88], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF11 = getUnsigned(packet[88:90], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF11 = gen_states.CONVERT_tbl_stream_apid_UHF11(self.tbl_stream_apid_UHF11)
        except:
            pass
        
        self.tbl_stream_rate_UHF11 = getUnsigned(packet[90:92], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF11 = getUnsigned(packet[92:93], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF11 = gen_states.CONVERT_tbl_stream_priority_UHF11(self.tbl_stream_priority_UHF11)
        except:
            pass
        
        self.tbl_stream_valid_UHF11 = getUnsigned(packet[93:94], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF11 = gen_states.CONVERT_tbl_stream_valid_UHF11(self.tbl_stream_valid_UHF11)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[94:95], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[95:96], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF12 = getUnsigned(packet[96:98], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF12 = gen_states.CONVERT_tbl_stream_apid_UHF12(self.tbl_stream_apid_UHF12)
        except:
            pass
        
        self.tbl_stream_rate_UHF12 = getUnsigned(packet[98:100], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF12 = getUnsigned(packet[100:101], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF12 = gen_states.CONVERT_tbl_stream_priority_UHF12(self.tbl_stream_priority_UHF12)
        except:
            pass
        
        self.tbl_stream_valid_UHF12 = getUnsigned(packet[101:102], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF12 = gen_states.CONVERT_tbl_stream_valid_UHF12(self.tbl_stream_valid_UHF12)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[102:103], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[103:104], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF13 = getUnsigned(packet[104:106], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF13 = gen_states.CONVERT_tbl_stream_apid_UHF13(self.tbl_stream_apid_UHF13)
        except:
            pass
        
        self.tbl_stream_rate_UHF13 = getUnsigned(packet[106:108], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF13 = getUnsigned(packet[108:109], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF13 = gen_states.CONVERT_tbl_stream_priority_UHF13(self.tbl_stream_priority_UHF13)
        except:
            pass
        
        self.tbl_stream_valid_UHF13 = getUnsigned(packet[109:110], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF13 = gen_states.CONVERT_tbl_stream_valid_UHF13(self.tbl_stream_valid_UHF13)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[110:111], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[111:112], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF14 = getUnsigned(packet[112:114], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF14 = gen_states.CONVERT_tbl_stream_apid_UHF14(self.tbl_stream_apid_UHF14)
        except:
            pass
        
        self.tbl_stream_rate_UHF14 = getUnsigned(packet[114:116], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF14 = getUnsigned(packet[116:117], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF14 = gen_states.CONVERT_tbl_stream_priority_UHF14(self.tbl_stream_priority_UHF14)
        except:
            pass
        
        self.tbl_stream_valid_UHF14 = getUnsigned(packet[117:118], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF14 = gen_states.CONVERT_tbl_stream_valid_UHF14(self.tbl_stream_valid_UHF14)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[118:119], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[119:120], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF15 = getUnsigned(packet[120:122], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF15 = gen_states.CONVERT_tbl_stream_apid_UHF15(self.tbl_stream_apid_UHF15)
        except:
            pass
        
        self.tbl_stream_rate_UHF15 = getUnsigned(packet[122:124], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF15 = getUnsigned(packet[124:125], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF15 = gen_states.CONVERT_tbl_stream_priority_UHF15(self.tbl_stream_priority_UHF15)
        except:
            pass
        
        self.tbl_stream_valid_UHF15 = getUnsigned(packet[125:126], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF15 = gen_states.CONVERT_tbl_stream_valid_UHF15(self.tbl_stream_valid_UHF15)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[126:127], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[127:128], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF16 = getUnsigned(packet[128:130], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF16 = gen_states.CONVERT_tbl_stream_apid_UHF16(self.tbl_stream_apid_UHF16)
        except:
            pass
        
        self.tbl_stream_rate_UHF16 = getUnsigned(packet[130:132], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF16 = getUnsigned(packet[132:133], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF16 = gen_states.CONVERT_tbl_stream_priority_UHF16(self.tbl_stream_priority_UHF16)
        except:
            pass
        
        self.tbl_stream_valid_UHF16 = getUnsigned(packet[133:134], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF16 = gen_states.CONVERT_tbl_stream_valid_UHF16(self.tbl_stream_valid_UHF16)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[134:135], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[135:136], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF17 = getUnsigned(packet[136:138], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF17 = gen_states.CONVERT_tbl_stream_apid_UHF17(self.tbl_stream_apid_UHF17)
        except:
            pass
        
        self.tbl_stream_rate_UHF17 = getUnsigned(packet[138:140], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF17 = getUnsigned(packet[140:141], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF17 = gen_states.CONVERT_tbl_stream_priority_UHF17(self.tbl_stream_priority_UHF17)
        except:
            pass
        
        self.tbl_stream_valid_UHF17 = getUnsigned(packet[141:142], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF17 = gen_states.CONVERT_tbl_stream_valid_UHF17(self.tbl_stream_valid_UHF17)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[142:143], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[143:144], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF18 = getUnsigned(packet[144:146], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF18 = gen_states.CONVERT_tbl_stream_apid_UHF18(self.tbl_stream_apid_UHF18)
        except:
            pass
        
        self.tbl_stream_rate_UHF18 = getUnsigned(packet[146:148], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF18 = getUnsigned(packet[148:149], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF18 = gen_states.CONVERT_tbl_stream_priority_UHF18(self.tbl_stream_priority_UHF18)
        except:
            pass
        
        self.tbl_stream_valid_UHF18 = getUnsigned(packet[149:150], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF18 = gen_states.CONVERT_tbl_stream_valid_UHF18(self.tbl_stream_valid_UHF18)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[150:151], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[151:152], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF19 = getUnsigned(packet[152:154], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF19 = gen_states.CONVERT_tbl_stream_apid_UHF19(self.tbl_stream_apid_UHF19)
        except:
            pass
        
        self.tbl_stream_rate_UHF19 = getUnsigned(packet[154:156], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF19 = getUnsigned(packet[156:157], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF19 = gen_states.CONVERT_tbl_stream_priority_UHF19(self.tbl_stream_priority_UHF19)
        except:
            pass
        
        self.tbl_stream_valid_UHF19 = getUnsigned(packet[157:158], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF19 = gen_states.CONVERT_tbl_stream_valid_UHF19(self.tbl_stream_valid_UHF19)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[158:159], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[159:160], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF20 = getUnsigned(packet[160:162], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF20 = gen_states.CONVERT_tbl_stream_apid_UHF20(self.tbl_stream_apid_UHF20)
        except:
            pass
        
        self.tbl_stream_rate_UHF20 = getUnsigned(packet[162:164], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF20 = getUnsigned(packet[164:165], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF20 = gen_states.CONVERT_tbl_stream_priority_UHF20(self.tbl_stream_priority_UHF20)
        except:
            pass
        
        self.tbl_stream_valid_UHF20 = getUnsigned(packet[165:166], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF20 = gen_states.CONVERT_tbl_stream_valid_UHF20(self.tbl_stream_valid_UHF20)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[166:167], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[167:168], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF21 = getUnsigned(packet[168:170], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF21 = gen_states.CONVERT_tbl_stream_apid_UHF21(self.tbl_stream_apid_UHF21)
        except:
            pass
        
        self.tbl_stream_rate_UHF21 = getUnsigned(packet[170:172], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF21 = getUnsigned(packet[172:173], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF21 = gen_states.CONVERT_tbl_stream_priority_UHF21(self.tbl_stream_priority_UHF21)
        except:
            pass
        
        self.tbl_stream_valid_UHF21 = getUnsigned(packet[173:174], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF21 = gen_states.CONVERT_tbl_stream_valid_UHF21(self.tbl_stream_valid_UHF21)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[174:175], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[175:176], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF22 = getUnsigned(packet[176:178], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF22 = gen_states.CONVERT_tbl_stream_apid_UHF22(self.tbl_stream_apid_UHF22)
        except:
            pass
        
        self.tbl_stream_rate_UHF22 = getUnsigned(packet[178:180], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF22 = getUnsigned(packet[180:181], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF22 = gen_states.CONVERT_tbl_stream_priority_UHF22(self.tbl_stream_priority_UHF22)
        except:
            pass
        
        self.tbl_stream_valid_UHF22 = getUnsigned(packet[181:182], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF22 = gen_states.CONVERT_tbl_stream_valid_UHF22(self.tbl_stream_valid_UHF22)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[182:183], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[183:184], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF23 = getUnsigned(packet[184:186], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF23 = gen_states.CONVERT_tbl_stream_apid_UHF23(self.tbl_stream_apid_UHF23)
        except:
            pass
        
        self.tbl_stream_rate_UHF23 = getUnsigned(packet[186:188], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF23 = getUnsigned(packet[188:189], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF23 = gen_states.CONVERT_tbl_stream_priority_UHF23(self.tbl_stream_priority_UHF23)
        except:
            pass
        
        self.tbl_stream_valid_UHF23 = getUnsigned(packet[189:190], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF23 = gen_states.CONVERT_tbl_stream_valid_UHF23(self.tbl_stream_valid_UHF23)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[190:191], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[191:192], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF24 = getUnsigned(packet[192:194], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF24 = gen_states.CONVERT_tbl_stream_apid_UHF24(self.tbl_stream_apid_UHF24)
        except:
            pass
        
        self.tbl_stream_rate_UHF24 = getUnsigned(packet[194:196], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF24 = getUnsigned(packet[196:197], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF24 = gen_states.CONVERT_tbl_stream_priority_UHF24(self.tbl_stream_priority_UHF24)
        except:
            pass
        
        self.tbl_stream_valid_UHF24 = getUnsigned(packet[197:198], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF24 = gen_states.CONVERT_tbl_stream_valid_UHF24(self.tbl_stream_valid_UHF24)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[198:199], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[199:200], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF25 = getUnsigned(packet[200:202], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF25 = gen_states.CONVERT_tbl_stream_apid_UHF25(self.tbl_stream_apid_UHF25)
        except:
            pass
        
        self.tbl_stream_rate_UHF25 = getUnsigned(packet[202:204], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF25 = getUnsigned(packet[204:205], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF25 = gen_states.CONVERT_tbl_stream_priority_UHF25(self.tbl_stream_priority_UHF25)
        except:
            pass
        
        self.tbl_stream_valid_UHF25 = getUnsigned(packet[205:206], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF25 = gen_states.CONVERT_tbl_stream_valid_UHF25(self.tbl_stream_valid_UHF25)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[206:207], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[207:208], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF26 = getUnsigned(packet[208:210], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF26 = gen_states.CONVERT_tbl_stream_apid_UHF26(self.tbl_stream_apid_UHF26)
        except:
            pass
        
        self.tbl_stream_rate_UHF26 = getUnsigned(packet[210:212], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF26 = getUnsigned(packet[212:213], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF26 = gen_states.CONVERT_tbl_stream_priority_UHF26(self.tbl_stream_priority_UHF26)
        except:
            pass
        
        self.tbl_stream_valid_UHF26 = getUnsigned(packet[213:214], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF26 = gen_states.CONVERT_tbl_stream_valid_UHF26(self.tbl_stream_valid_UHF26)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[214:215], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[215:216], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF27 = getUnsigned(packet[216:218], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF27 = gen_states.CONVERT_tbl_stream_apid_UHF27(self.tbl_stream_apid_UHF27)
        except:
            pass
        
        self.tbl_stream_rate_UHF27 = getUnsigned(packet[218:220], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF27 = getUnsigned(packet[220:221], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF27 = gen_states.CONVERT_tbl_stream_priority_UHF27(self.tbl_stream_priority_UHF27)
        except:
            pass
        
        self.tbl_stream_valid_UHF27 = getUnsigned(packet[221:222], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF27 = gen_states.CONVERT_tbl_stream_valid_UHF27(self.tbl_stream_valid_UHF27)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[222:223], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[223:224], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF28 = getUnsigned(packet[224:226], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF28 = gen_states.CONVERT_tbl_stream_apid_UHF28(self.tbl_stream_apid_UHF28)
        except:
            pass
        
        self.tbl_stream_rate_UHF28 = getUnsigned(packet[226:228], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF28 = getUnsigned(packet[228:229], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF28 = gen_states.CONVERT_tbl_stream_priority_UHF28(self.tbl_stream_priority_UHF28)
        except:
            pass
        
        self.tbl_stream_valid_UHF28 = getUnsigned(packet[229:230], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF28 = gen_states.CONVERT_tbl_stream_valid_UHF28(self.tbl_stream_valid_UHF28)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[230:231], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[231:232], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF29 = getUnsigned(packet[232:234], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF29 = gen_states.CONVERT_tbl_stream_apid_UHF29(self.tbl_stream_apid_UHF29)
        except:
            pass
        
        self.tbl_stream_rate_UHF29 = getUnsigned(packet[234:236], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF29 = getUnsigned(packet[236:237], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF29 = gen_states.CONVERT_tbl_stream_priority_UHF29(self.tbl_stream_priority_UHF29)
        except:
            pass
        
        self.tbl_stream_valid_UHF29 = getUnsigned(packet[237:238], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF29 = gen_states.CONVERT_tbl_stream_valid_UHF29(self.tbl_stream_valid_UHF29)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[238:239], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[239:240], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF30 = getUnsigned(packet[240:242], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF30 = gen_states.CONVERT_tbl_stream_apid_UHF30(self.tbl_stream_apid_UHF30)
        except:
            pass
        
        self.tbl_stream_rate_UHF30 = getUnsigned(packet[242:244], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF30 = getUnsigned(packet[244:245], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF30 = gen_states.CONVERT_tbl_stream_priority_UHF30(self.tbl_stream_priority_UHF30)
        except:
            pass
        
        self.tbl_stream_valid_UHF30 = getUnsigned(packet[245:246], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF30 = gen_states.CONVERT_tbl_stream_valid_UHF30(self.tbl_stream_valid_UHF30)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[246:247], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[247:248], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF31 = getUnsigned(packet[248:250], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF31 = gen_states.CONVERT_tbl_stream_apid_UHF31(self.tbl_stream_apid_UHF31)
        except:
            pass
        
        self.tbl_stream_rate_UHF31 = getUnsigned(packet[250:252], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF31 = getUnsigned(packet[252:253], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF31 = gen_states.CONVERT_tbl_stream_priority_UHF31(self.tbl_stream_priority_UHF31)
        except:
            pass
        
        self.tbl_stream_valid_UHF31 = getUnsigned(packet[253:254], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF31 = gen_states.CONVERT_tbl_stream_valid_UHF31(self.tbl_stream_valid_UHF31)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[254:255], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[255:256], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF32 = getUnsigned(packet[256:258], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF32 = gen_states.CONVERT_tbl_stream_apid_UHF32(self.tbl_stream_apid_UHF32)
        except:
            pass
        
        self.tbl_stream_rate_UHF32 = getUnsigned(packet[258:260], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF32 = getUnsigned(packet[260:261], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF32 = gen_states.CONVERT_tbl_stream_priority_UHF32(self.tbl_stream_priority_UHF32)
        except:
            pass
        
        self.tbl_stream_valid_UHF32 = getUnsigned(packet[261:262], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF32 = gen_states.CONVERT_tbl_stream_valid_UHF32(self.tbl_stream_valid_UHF32)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[262:263], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[263:264], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF33 = getUnsigned(packet[264:266], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF33 = gen_states.CONVERT_tbl_stream_apid_UHF33(self.tbl_stream_apid_UHF33)
        except:
            pass
        
        self.tbl_stream_rate_UHF33 = getUnsigned(packet[266:268], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF33 = getUnsigned(packet[268:269], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF33 = gen_states.CONVERT_tbl_stream_priority_UHF33(self.tbl_stream_priority_UHF33)
        except:
            pass
        
        self.tbl_stream_valid_UHF33 = getUnsigned(packet[269:270], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF33 = gen_states.CONVERT_tbl_stream_valid_UHF33(self.tbl_stream_valid_UHF33)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[270:271], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[271:272], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF34 = getUnsigned(packet[272:274], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF34 = gen_states.CONVERT_tbl_stream_apid_UHF34(self.tbl_stream_apid_UHF34)
        except:
            pass
        
        self.tbl_stream_rate_UHF34 = getUnsigned(packet[274:276], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF34 = getUnsigned(packet[276:277], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF34 = gen_states.CONVERT_tbl_stream_priority_UHF34(self.tbl_stream_priority_UHF34)
        except:
            pass
        
        self.tbl_stream_valid_UHF34 = getUnsigned(packet[277:278], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF34 = gen_states.CONVERT_tbl_stream_valid_UHF34(self.tbl_stream_valid_UHF34)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[278:279], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[279:280], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF35 = getUnsigned(packet[280:282], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF35 = gen_states.CONVERT_tbl_stream_apid_UHF35(self.tbl_stream_apid_UHF35)
        except:
            pass
        
        self.tbl_stream_rate_UHF35 = getUnsigned(packet[282:284], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF35 = getUnsigned(packet[284:285], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF35 = gen_states.CONVERT_tbl_stream_priority_UHF35(self.tbl_stream_priority_UHF35)
        except:
            pass
        
        self.tbl_stream_valid_UHF35 = getUnsigned(packet[285:286], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF35 = gen_states.CONVERT_tbl_stream_valid_UHF35(self.tbl_stream_valid_UHF35)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[286:287], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[287:288], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF36 = getUnsigned(packet[288:290], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF36 = gen_states.CONVERT_tbl_stream_apid_UHF36(self.tbl_stream_apid_UHF36)
        except:
            pass
        
        self.tbl_stream_rate_UHF36 = getUnsigned(packet[290:292], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF36 = getUnsigned(packet[292:293], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF36 = gen_states.CONVERT_tbl_stream_priority_UHF36(self.tbl_stream_priority_UHF36)
        except:
            pass
        
        self.tbl_stream_valid_UHF36 = getUnsigned(packet[293:294], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF36 = gen_states.CONVERT_tbl_stream_valid_UHF36(self.tbl_stream_valid_UHF36)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[294:295], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[295:296], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF37 = getUnsigned(packet[296:298], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF37 = gen_states.CONVERT_tbl_stream_apid_UHF37(self.tbl_stream_apid_UHF37)
        except:
            pass
        
        self.tbl_stream_rate_UHF37 = getUnsigned(packet[298:300], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF37 = getUnsigned(packet[300:301], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF37 = gen_states.CONVERT_tbl_stream_priority_UHF37(self.tbl_stream_priority_UHF37)
        except:
            pass
        
        self.tbl_stream_valid_UHF37 = getUnsigned(packet[301:302], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF37 = gen_states.CONVERT_tbl_stream_valid_UHF37(self.tbl_stream_valid_UHF37)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[302:303], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[303:304], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF38 = getUnsigned(packet[304:306], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF38 = gen_states.CONVERT_tbl_stream_apid_UHF38(self.tbl_stream_apid_UHF38)
        except:
            pass
        
        self.tbl_stream_rate_UHF38 = getUnsigned(packet[306:308], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF38 = getUnsigned(packet[308:309], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF38 = gen_states.CONVERT_tbl_stream_priority_UHF38(self.tbl_stream_priority_UHF38)
        except:
            pass
        
        self.tbl_stream_valid_UHF38 = getUnsigned(packet[309:310], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF38 = gen_states.CONVERT_tbl_stream_valid_UHF38(self.tbl_stream_valid_UHF38)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[310:311], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[311:312], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF39 = getUnsigned(packet[312:314], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF39 = gen_states.CONVERT_tbl_stream_apid_UHF39(self.tbl_stream_apid_UHF39)
        except:
            pass
        
        self.tbl_stream_rate_UHF39 = getUnsigned(packet[314:316], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF39 = getUnsigned(packet[316:317], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF39 = gen_states.CONVERT_tbl_stream_priority_UHF39(self.tbl_stream_priority_UHF39)
        except:
            pass
        
        self.tbl_stream_valid_UHF39 = getUnsigned(packet[317:318], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF39 = gen_states.CONVERT_tbl_stream_valid_UHF39(self.tbl_stream_valid_UHF39)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[318:319], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[319:320], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF40 = getUnsigned(packet[320:322], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF40 = gen_states.CONVERT_tbl_stream_apid_UHF40(self.tbl_stream_apid_UHF40)
        except:
            pass
        
        self.tbl_stream_rate_UHF40 = getUnsigned(packet[322:324], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF40 = getUnsigned(packet[324:325], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF40 = gen_states.CONVERT_tbl_stream_priority_UHF40(self.tbl_stream_priority_UHF40)
        except:
            pass
        
        self.tbl_stream_valid_UHF40 = getUnsigned(packet[325:326], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF40 = gen_states.CONVERT_tbl_stream_valid_UHF40(self.tbl_stream_valid_UHF40)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[326:327], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[327:328], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF41 = getUnsigned(packet[328:330], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF41 = gen_states.CONVERT_tbl_stream_apid_UHF41(self.tbl_stream_apid_UHF41)
        except:
            pass
        
        self.tbl_stream_rate_UHF41 = getUnsigned(packet[330:332], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF41 = getUnsigned(packet[332:333], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF41 = gen_states.CONVERT_tbl_stream_priority_UHF41(self.tbl_stream_priority_UHF41)
        except:
            pass
        
        self.tbl_stream_valid_UHF41 = getUnsigned(packet[333:334], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF41 = gen_states.CONVERT_tbl_stream_valid_UHF41(self.tbl_stream_valid_UHF41)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[334:335], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[335:336], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF42 = getUnsigned(packet[336:338], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF42 = gen_states.CONVERT_tbl_stream_apid_UHF42(self.tbl_stream_apid_UHF42)
        except:
            pass
        
        self.tbl_stream_rate_UHF42 = getUnsigned(packet[338:340], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF42 = getUnsigned(packet[340:341], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF42 = gen_states.CONVERT_tbl_stream_priority_UHF42(self.tbl_stream_priority_UHF42)
        except:
            pass
        
        self.tbl_stream_valid_UHF42 = getUnsigned(packet[341:342], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF42 = gen_states.CONVERT_tbl_stream_valid_UHF42(self.tbl_stream_valid_UHF42)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[342:343], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[343:344], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF43 = getUnsigned(packet[344:346], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF43 = gen_states.CONVERT_tbl_stream_apid_UHF43(self.tbl_stream_apid_UHF43)
        except:
            pass
        
        self.tbl_stream_rate_UHF43 = getUnsigned(packet[346:348], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF43 = getUnsigned(packet[348:349], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF43 = gen_states.CONVERT_tbl_stream_priority_UHF43(self.tbl_stream_priority_UHF43)
        except:
            pass
        
        self.tbl_stream_valid_UHF43 = getUnsigned(packet[349:350], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF43 = gen_states.CONVERT_tbl_stream_valid_UHF43(self.tbl_stream_valid_UHF43)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[350:351], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[351:352], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF44 = getUnsigned(packet[352:354], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF44 = gen_states.CONVERT_tbl_stream_apid_UHF44(self.tbl_stream_apid_UHF44)
        except:
            pass
        
        self.tbl_stream_rate_UHF44 = getUnsigned(packet[354:356], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF44 = getUnsigned(packet[356:357], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF44 = gen_states.CONVERT_tbl_stream_priority_UHF44(self.tbl_stream_priority_UHF44)
        except:
            pass
        
        self.tbl_stream_valid_UHF44 = getUnsigned(packet[357:358], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF44 = gen_states.CONVERT_tbl_stream_valid_UHF44(self.tbl_stream_valid_UHF44)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[358:359], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[359:360], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF45 = getUnsigned(packet[360:362], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF45 = gen_states.CONVERT_tbl_stream_apid_UHF45(self.tbl_stream_apid_UHF45)
        except:
            pass
        
        self.tbl_stream_rate_UHF45 = getUnsigned(packet[362:364], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF45 = getUnsigned(packet[364:365], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF45 = gen_states.CONVERT_tbl_stream_priority_UHF45(self.tbl_stream_priority_UHF45)
        except:
            pass
        
        self.tbl_stream_valid_UHF45 = getUnsigned(packet[365:366], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF45 = gen_states.CONVERT_tbl_stream_valid_UHF45(self.tbl_stream_valid_UHF45)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[366:367], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[367:368], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF46 = getUnsigned(packet[368:370], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF46 = gen_states.CONVERT_tbl_stream_apid_UHF46(self.tbl_stream_apid_UHF46)
        except:
            pass
        
        self.tbl_stream_rate_UHF46 = getUnsigned(packet[370:372], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF46 = getUnsigned(packet[372:373], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF46 = gen_states.CONVERT_tbl_stream_priority_UHF46(self.tbl_stream_priority_UHF46)
        except:
            pass
        
        self.tbl_stream_valid_UHF46 = getUnsigned(packet[373:374], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF46 = gen_states.CONVERT_tbl_stream_valid_UHF46(self.tbl_stream_valid_UHF46)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[374:375], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[375:376], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF47 = getUnsigned(packet[376:378], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF47 = gen_states.CONVERT_tbl_stream_apid_UHF47(self.tbl_stream_apid_UHF47)
        except:
            pass
        
        self.tbl_stream_rate_UHF47 = getUnsigned(packet[378:380], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF47 = getUnsigned(packet[380:381], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF47 = gen_states.CONVERT_tbl_stream_priority_UHF47(self.tbl_stream_priority_UHF47)
        except:
            pass
        
        self.tbl_stream_valid_UHF47 = getUnsigned(packet[381:382], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF47 = gen_states.CONVERT_tbl_stream_valid_UHF47(self.tbl_stream_valid_UHF47)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[382:383], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[383:384], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF48 = getUnsigned(packet[384:386], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF48 = gen_states.CONVERT_tbl_stream_apid_UHF48(self.tbl_stream_apid_UHF48)
        except:
            pass
        
        self.tbl_stream_rate_UHF48 = getUnsigned(packet[386:388], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF48 = getUnsigned(packet[388:389], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF48 = gen_states.CONVERT_tbl_stream_priority_UHF48(self.tbl_stream_priority_UHF48)
        except:
            pass
        
        self.tbl_stream_valid_UHF48 = getUnsigned(packet[389:390], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF48 = gen_states.CONVERT_tbl_stream_valid_UHF48(self.tbl_stream_valid_UHF48)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[390:391], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[391:392], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF49 = getUnsigned(packet[392:394], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF49 = gen_states.CONVERT_tbl_stream_apid_UHF49(self.tbl_stream_apid_UHF49)
        except:
            pass
        
        self.tbl_stream_rate_UHF49 = getUnsigned(packet[394:396], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF49 = getUnsigned(packet[396:397], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF49 = gen_states.CONVERT_tbl_stream_priority_UHF49(self.tbl_stream_priority_UHF49)
        except:
            pass
        
        self.tbl_stream_valid_UHF49 = getUnsigned(packet[397:398], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF49 = gen_states.CONVERT_tbl_stream_valid_UHF49(self.tbl_stream_valid_UHF49)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[398:399], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[399:400], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF50 = getUnsigned(packet[400:402], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF50 = gen_states.CONVERT_tbl_stream_apid_UHF50(self.tbl_stream_apid_UHF50)
        except:
            pass
        
        self.tbl_stream_rate_UHF50 = getUnsigned(packet[402:404], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF50 = getUnsigned(packet[404:405], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF50 = gen_states.CONVERT_tbl_stream_priority_UHF50(self.tbl_stream_priority_UHF50)
        except:
            pass
        
        self.tbl_stream_valid_UHF50 = getUnsigned(packet[405:406], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF50 = gen_states.CONVERT_tbl_stream_valid_UHF50(self.tbl_stream_valid_UHF50)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[406:407], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[407:408], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF51 = getUnsigned(packet[408:410], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF51 = gen_states.CONVERT_tbl_stream_apid_UHF51(self.tbl_stream_apid_UHF51)
        except:
            pass
        
        self.tbl_stream_rate_UHF51 = getUnsigned(packet[410:412], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF51 = getUnsigned(packet[412:413], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF51 = gen_states.CONVERT_tbl_stream_priority_UHF51(self.tbl_stream_priority_UHF51)
        except:
            pass
        
        self.tbl_stream_valid_UHF51 = getUnsigned(packet[413:414], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF51 = gen_states.CONVERT_tbl_stream_valid_UHF51(self.tbl_stream_valid_UHF51)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[414:415], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[415:416], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF52 = getUnsigned(packet[416:418], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF52 = gen_states.CONVERT_tbl_stream_apid_UHF52(self.tbl_stream_apid_UHF52)
        except:
            pass
        
        self.tbl_stream_rate_UHF52 = getUnsigned(packet[418:420], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF52 = getUnsigned(packet[420:421], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF52 = gen_states.CONVERT_tbl_stream_priority_UHF52(self.tbl_stream_priority_UHF52)
        except:
            pass
        
        self.tbl_stream_valid_UHF52 = getUnsigned(packet[421:422], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF52 = gen_states.CONVERT_tbl_stream_valid_UHF52(self.tbl_stream_valid_UHF52)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[422:423], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[423:424], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF53 = getUnsigned(packet[424:426], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF53 = gen_states.CONVERT_tbl_stream_apid_UHF53(self.tbl_stream_apid_UHF53)
        except:
            pass
        
        self.tbl_stream_rate_UHF53 = getUnsigned(packet[426:428], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF53 = getUnsigned(packet[428:429], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF53 = gen_states.CONVERT_tbl_stream_priority_UHF53(self.tbl_stream_priority_UHF53)
        except:
            pass
        
        self.tbl_stream_valid_UHF53 = getUnsigned(packet[429:430], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF53 = gen_states.CONVERT_tbl_stream_valid_UHF53(self.tbl_stream_valid_UHF53)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[430:431], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[431:432], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF54 = getUnsigned(packet[432:434], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF54 = gen_states.CONVERT_tbl_stream_apid_UHF54(self.tbl_stream_apid_UHF54)
        except:
            pass
        
        self.tbl_stream_rate_UHF54 = getUnsigned(packet[434:436], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF54 = getUnsigned(packet[436:437], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF54 = gen_states.CONVERT_tbl_stream_priority_UHF54(self.tbl_stream_priority_UHF54)
        except:
            pass
        
        self.tbl_stream_valid_UHF54 = getUnsigned(packet[437:438], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF54 = gen_states.CONVERT_tbl_stream_valid_UHF54(self.tbl_stream_valid_UHF54)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[438:439], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[439:440], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF55 = getUnsigned(packet[440:442], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF55 = gen_states.CONVERT_tbl_stream_apid_UHF55(self.tbl_stream_apid_UHF55)
        except:
            pass
        
        self.tbl_stream_rate_UHF55 = getUnsigned(packet[442:444], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF55 = getUnsigned(packet[444:445], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF55 = gen_states.CONVERT_tbl_stream_priority_UHF55(self.tbl_stream_priority_UHF55)
        except:
            pass
        
        self.tbl_stream_valid_UHF55 = getUnsigned(packet[445:446], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF55 = gen_states.CONVERT_tbl_stream_valid_UHF55(self.tbl_stream_valid_UHF55)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[446:447], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[447:448], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF56 = getUnsigned(packet[448:450], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF56 = gen_states.CONVERT_tbl_stream_apid_UHF56(self.tbl_stream_apid_UHF56)
        except:
            pass
        
        self.tbl_stream_rate_UHF56 = getUnsigned(packet[450:452], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF56 = getUnsigned(packet[452:453], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF56 = gen_states.CONVERT_tbl_stream_priority_UHF56(self.tbl_stream_priority_UHF56)
        except:
            pass
        
        self.tbl_stream_valid_UHF56 = getUnsigned(packet[453:454], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF56 = gen_states.CONVERT_tbl_stream_valid_UHF56(self.tbl_stream_valid_UHF56)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[454:455], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[455:456], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF57 = getUnsigned(packet[456:458], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF57 = gen_states.CONVERT_tbl_stream_apid_UHF57(self.tbl_stream_apid_UHF57)
        except:
            pass
        
        self.tbl_stream_rate_UHF57 = getUnsigned(packet[458:460], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF57 = getUnsigned(packet[460:461], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF57 = gen_states.CONVERT_tbl_stream_priority_UHF57(self.tbl_stream_priority_UHF57)
        except:
            pass
        
        self.tbl_stream_valid_UHF57 = getUnsigned(packet[461:462], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF57 = gen_states.CONVERT_tbl_stream_valid_UHF57(self.tbl_stream_valid_UHF57)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[462:463], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[463:464], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF58 = getUnsigned(packet[464:466], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF58 = gen_states.CONVERT_tbl_stream_apid_UHF58(self.tbl_stream_apid_UHF58)
        except:
            pass
        
        self.tbl_stream_rate_UHF58 = getUnsigned(packet[466:468], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF58 = getUnsigned(packet[468:469], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF58 = gen_states.CONVERT_tbl_stream_priority_UHF58(self.tbl_stream_priority_UHF58)
        except:
            pass
        
        self.tbl_stream_valid_UHF58 = getUnsigned(packet[469:470], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF58 = gen_states.CONVERT_tbl_stream_valid_UHF58(self.tbl_stream_valid_UHF58)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[470:471], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[471:472], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF59 = getUnsigned(packet[472:474], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF59 = gen_states.CONVERT_tbl_stream_apid_UHF59(self.tbl_stream_apid_UHF59)
        except:
            pass
        
        self.tbl_stream_rate_UHF59 = getUnsigned(packet[474:476], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF59 = getUnsigned(packet[476:477], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF59 = gen_states.CONVERT_tbl_stream_priority_UHF59(self.tbl_stream_priority_UHF59)
        except:
            pass
        
        self.tbl_stream_valid_UHF59 = getUnsigned(packet[477:478], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF59 = gen_states.CONVERT_tbl_stream_valid_UHF59(self.tbl_stream_valid_UHF59)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[478:479], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[479:480], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF60 = getUnsigned(packet[480:482], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF60 = gen_states.CONVERT_tbl_stream_apid_UHF60(self.tbl_stream_apid_UHF60)
        except:
            pass
        
        self.tbl_stream_rate_UHF60 = getUnsigned(packet[482:484], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF60 = getUnsigned(packet[484:485], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF60 = gen_states.CONVERT_tbl_stream_priority_UHF60(self.tbl_stream_priority_UHF60)
        except:
            pass
        
        self.tbl_stream_valid_UHF60 = getUnsigned(packet[485:486], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF60 = gen_states.CONVERT_tbl_stream_valid_UHF60(self.tbl_stream_valid_UHF60)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[486:487], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[487:488], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF61 = getUnsigned(packet[488:490], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF61 = gen_states.CONVERT_tbl_stream_apid_UHF61(self.tbl_stream_apid_UHF61)
        except:
            pass
        
        self.tbl_stream_rate_UHF61 = getUnsigned(packet[490:492], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF61 = getUnsigned(packet[492:493], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF61 = gen_states.CONVERT_tbl_stream_priority_UHF61(self.tbl_stream_priority_UHF61)
        except:
            pass
        
        self.tbl_stream_valid_UHF61 = getUnsigned(packet[493:494], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF61 = gen_states.CONVERT_tbl_stream_valid_UHF61(self.tbl_stream_valid_UHF61)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[494:495], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[495:496], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF62 = getUnsigned(packet[496:498], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF62 = gen_states.CONVERT_tbl_stream_apid_UHF62(self.tbl_stream_apid_UHF62)
        except:
            pass
        
        self.tbl_stream_rate_UHF62 = getUnsigned(packet[498:500], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF62 = getUnsigned(packet[500:501], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF62 = gen_states.CONVERT_tbl_stream_priority_UHF62(self.tbl_stream_priority_UHF62)
        except:
            pass
        
        self.tbl_stream_valid_UHF62 = getUnsigned(packet[501:502], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF62 = gen_states.CONVERT_tbl_stream_valid_UHF62(self.tbl_stream_valid_UHF62)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[502:503], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[503:504], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF63 = getUnsigned(packet[504:506], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF63 = gen_states.CONVERT_tbl_stream_apid_UHF63(self.tbl_stream_apid_UHF63)
        except:
            pass
        
        self.tbl_stream_rate_UHF63 = getUnsigned(packet[506:508], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF63 = getUnsigned(packet[508:509], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF63 = gen_states.CONVERT_tbl_stream_priority_UHF63(self.tbl_stream_priority_UHF63)
        except:
            pass
        
        self.tbl_stream_valid_UHF63 = getUnsigned(packet[509:510], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF63 = gen_states.CONVERT_tbl_stream_valid_UHF63(self.tbl_stream_valid_UHF63)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[510:511], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[511:512], 'big', 0, 255)
        
        self.tbl_stream_apid_UHF64 = getUnsigned(packet[512:514], 'little', 0, 65535)
        try:
            self.tbl_stream_apid_UHF64 = gen_states.CONVERT_tbl_stream_apid_UHF64(self.tbl_stream_apid_UHF64)
        except:
            pass
        
        self.tbl_stream_rate_UHF64 = getUnsigned(packet[514:516], 'little', 0, 65535)
        
        self.tbl_stream_priority_UHF64 = getUnsigned(packet[516:517], 'little', 0, 255)
        try:
            self.tbl_stream_priority_UHF64 = gen_states.CONVERT_tbl_stream_priority_UHF64(self.tbl_stream_priority_UHF64)
        except:
            pass
        
        self.tbl_stream_valid_UHF64 = getUnsigned(packet[517:518], 'little', 0, 255)
        try:
            self.tbl_stream_valid_UHF64 = gen_states.CONVERT_tbl_stream_valid_UHF64(self.tbl_stream_valid_UHF64)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[518:519], 'big', 0, 255)
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[519:520], 'big', 0, 255)

class TBL_MODE:
    def __str__(self):
        return 'TBL_MODE'

    def __init__(self, packet, pkt_time, tbl_id, file_origin):
        self.pkt_time = pkt_time
        self.file_origin = file_origin
        
        self.tbl_mode_clt_threshold = getUnsigned(packet[0:4], 'little', 0, 4294967295)
        
        try:
            self.tbl_phx_to_safe_thresh = getFloat(packet[4:8], 'LITTLE')
        except:
            print('Could not decode floating point item "tbl_phx_to_safe_thresh" in "tbl_mode"')
            self.tbl_phx_to_safe_thresh = 0
        
        try:
            self.tbl_safe_to_phx_thresh = getFloat(packet[8:12], 'LITTLE')
        except:
            print('Could not decode floating point item "tbl_safe_to_phx_thresh" in "tbl_mode"')
            self.tbl_safe_to_phx_thresh = 0
        
        try:
            self.tbl_sci_to_safe_thresh = getFloat(packet[12:16], 'LITTLE')
        except:
            print('Could not decode floating point item "tbl_sci_to_safe_thresh" in "tbl_mode"')
            self.tbl_sci_to_safe_thresh = 0
        
        try:
            self.tbl_safe_to_sci_thresh = getFloat(packet[16:20], 'LITTLE')
        except:
            print('Could not decode floating point item "tbl_safe_to_sci_thresh" in "tbl_mode"')
            self.tbl_safe_to_sci_thresh = 0
        
        self.tbl_mode_persist = getUnsigned(packet[20:21], 'little', 0, 255)
        
        self.tbl_allow_auto_promote_science = getUnsigned(packet[21:22], 'little', 0, 255)
        try:
            self.tbl_allow_auto_promote_science = gen_states.CONVERT_tbl_allow_auto_promote_science(self.tbl_allow_auto_promote_science)
        except:
            pass
        
        self.tbl_downlink_mode_active = getUnsigned(packet[22:23], 'little', 0, 255)
        try:
            self.tbl_downlink_mode_active = gen_states.CONVERT_tbl_downlink_mode_active(self.tbl_downlink_mode_active)
        except:
            pass
        
        self.REUSABLE_SPARE_8 = getUnsigned(packet[23:24], 'big', 0, 255)

APID_DICT = {}
APID_DICT[11] = DES_HK
APID_DICT[14] = DES_TASK
APID_DICT[19] = DES_TIME
APID_DICT[7] = FP_HK
APID_DICT[22] = FP_TEST
APID_DICT[37] = FLASH_HK
APID_DICT[5] = SEQ_HK
APID_DICT[21] = STORAGE_HK
APID_DICT[33] = UHF_HK
APID_DICT[34] = UHF_PASS
APID_DICT[16] = PAYLOAD_HK
APID_DICT[28] = BATTERY_ANA_0
APID_DICT[39] = ADCS_HK
APID_DICT[63] = ADCS_L0
APID_DICT[12] = CMD_HK
APID_DICT[2] = LIB_HK
APID_DICT[20] = LOG_MSG
APID_DICT[15] = LOG_HK
APID_DICT[3] = MEM_HK
APID_DICT[6] = MEM_DUMP
APID_DICT[17] = TLM_HK
APID_DICT[8] = TBL_HK
APID_DICT[41] = ADCS_TLM_PROC
APID_DICT[43] = ADCS_GENERAL
APID_DICT[44] = ADCS_TIME
APID_DICT[45] = ADCS_REFS
APID_DICT[46] = ADCS_ATT_DET
APID_DICT[47] = ADCS_ATT_CMD
APID_DICT[48] = ADCS_RW_DRIVE
APID_DICT[49] = ADCS_TRACKER
APID_DICT[50] = ADCS_ATT_CTRL
APID_DICT[51] = ADCS_MOMENTUM
APID_DICT[52] = ADCS_CSS
APID_DICT[53] = ADCS_MAG
APID_DICT[54] = ADCS_IMU
APID_DICT[55] = ADCS_CLOCK_SYNC
APID_DICT[56] = ADCS_ANALOGS
APID_DICT[57] = ADCS_TABLES
APID_DICT[58] = ADCS_TRACKER_2
APID_DICT[59] = ADCS_GPS
APID_DICT[60] = ADCS_CAL
APID_DICT[61] = ADCS_TRACKER_CTRL
APID_DICT[62] = ADCS_EXT_TRACKER_2
APID_DICT[30] = EPS_HK
APID_DICT[27] = ANA_HK
APID_DICT[4] = HW_HK
APID_DICT[36] = VERSION
APID_DICT[1] = SW_STAT
APID_DICT[26] = MODE_HK
APID_DICT[40] = XBAND_HK_PKT
APID_DICT[69] = XBAND_REGISTER_PKT

TBL_ID_DICT = {}
TBL_ID_DICT[4] = TBL_FP_WATCH
TBL_ID_DICT[5] = TBL_STORAGE
TBL_ID_DICT[7] = TBL_ADCS
TBL_ID_DICT[0] = TBL_TABLE_REG
TBL_ID_DICT[1] = TBL_STREAM_DBG
TBL_ID_DICT[2] = TBL_STREAM_STORE
TBL_ID_DICT[3] = TBL_STREAM_UHF
TBL_ID_DICT[6] = TBL_MODE

class CSIE_HK:
    def __str__(self):
        return 'CSIE_HK'

    def __init__(self, packet, header):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.SHCOARSE = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.SHFINE = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.csie_hk_intg_ms = getUnsigned(packet[6:10], 'big', 0, 4294967295)
        
        self.csie_hk_timeout = getUnsigned(packet[10:14], 'big', 0, 4294967295)
        
        self.csie_hk_num_frame_cap = getUnsigned(packet[14:18], 'big', 0, 4294967295)
        
        self.csie_hk_cap_start_index = getUnsigned(packet[18:22], 'big', 0, 4294967295)
        
        self.csie_hk_blocks_per_Frame = getUnsigned(packet[22:26], 'big', 0, 4294967295)
        
        self.csie_hk_num_frame_proc = getUnsigned(packet[26:30], 'big', 0, 4294967295)
        
        self.csie_hk_proc_start_index_0 = getUnsigned(packet[30:34], 'big', 0, 4294967295)
        
        self.csie_hk_proc_start_index_1 = getUnsigned(packet[34:38], 'big', 0, 4294967295)
        
        self.csie_hk_test_mode = getUnsigned(packet[38:42], 'big', 0, 4294967295)
        
        self.csie_hk_auto_process = getUnsigned(packet[42:46], 'big', 0, 4294967295)
        
        self.csie_hk_hist_offset = getUnsigned(packet[46:50], 'big', 0, 4294967295)
        
        self.csie_hk_hist_width = getUnsigned(packet[50:54], 'big', 0, 4294967295)
        
        self.csie_115_hk_dfsu_samp = getUnsigned(packet[54:58], 'big', 0, 4294967295)
        
        self.csie_115_hk_dfsu_start = getUnsigned(packet[58:62], 'big', 0, 4294967295)
        
        self.csie_115_hk_dfsu_end = getUnsigned(packet[62:66], 'big', 0, 4294967295)
        
        self.csie_115_hk_row_bytes = getUnsigned(packet[66:70], 'big', 0, 4294967295)
        
        self.csie_115_hk_fpm_num_frame_sum_0 = getUnsigned(packet[70:74], 'big', 0, 4294967295)
        
        self.csie_115_hk_fpm_num_frame_sum_1 = getUnsigned(packet[74:78], 'big', 0, 4294967295)
        
        self.csie_115_hk_fpm_proc_config_0 = getUnsigned(packet[78:82], 'big', 0, 4294967295)
        
        self.csie_115_hk_fpm_proc_config_1 = getUnsigned(packet[82:86], 'big', 0, 4294967295)
        
        self.csie_115_hk_fpm_dark_start_ind_0 = getUnsigned(packet[86:90], 'big', 0, 4294967295)
        
        self.csie_115_hk_fpm_dark_start_ind_1 = getUnsigned(packet[90:94], 'big', 0, 4294967295)
        
        self.csie_115_hk_fpm_pix_per_row_0 = getUnsigned(packet[94:98], 'big', 0, 4294967295)
        
        self.csie_115_hk_fpm_pix_per_row_1 = getUnsigned(packet[98:102], 'big', 0, 4294967295)
        
        self.csie_115_hk_fpm_row_per_frame_0 = getUnsigned(packet[102:106], 'big', 0, 4294967295)
        
        self.csie_115_hk_fpm_row_per_frame_1 = getUnsigned(packet[106:110], 'big', 0, 4294967295)
        
        self.csie_115_hk_fpm_col_pix_offset_0 = getUnsigned(packet[110:114], 'big', 0, 4294967295)
        
        self.csie_115_hk_fpm_col_pix_offset_1 = getUnsigned(packet[114:118], 'big', 0, 4294967295)
        
        self.csie_115_hk_fpm_col_chan_offset_0 = getUnsigned(packet[118:122], 'big', 0, 4294967295)
        
        self.csie_115_hk_fpm_col_chan_offset_1 = getUnsigned(packet[122:126], 'big', 0, 4294967295)
        
        self.csie_115_hk_fpm_row_ptr_offset_0 = getUnsigned(packet[126:130], 'big', 0, 4294967295)
        
        self.csie_115_hk_fpm_row_ptr_offset_1 = getUnsigned(packet[130:134], 'big', 0, 4294967295)
        
        self.csie_115_hk_icm_proc_config = getUnsigned(packet[134:138], 'big', 0, 4294967295)
        
        self.csie_115_hk_icml_proc_config = getUnsigned(packet[138:142], 'big', 0, 4294967295)
        
        self.csie_115_hk_icm_pix_thresh = getUnsigned(packet[142:146], 'big', 0, 4294967295)
        
        self.csie_115_hk_icm_rad_sqr = getUnsigned(packet[146:150], 'big', 0, 4294967295)
        
        self.csie_115_hk_icm_cent_col = getUnsigned(packet[150:154], 'big', 0, 4294967295)
        
        self.csie_115_hk_icm_cent_row = getUnsigned(packet[154:158], 'big', 0, 4294967295)
        
        self.csie_115_hk_icm_fpm1_offset = getUnsigned(packet[158:162], 'big', 0, 4294967295)
        
        self.csie_115_hk_icm_lin_min = getUnsigned(packet[162:166], 'big', 0, 4294967295)
        
        self.csie_115_hk_icm_lin_max = getUnsigned(packet[166:170], 'big', 0, 4294967295)
        
        self.csie_115_hk_icm_lin_div = getUnsigned(packet[170:174], 'big', 0, 4294967295)
        
        self.csie_115_hk_icm_sqrt_div = getUnsigned(packet[174:178], 'big', 0, 4294967295)
        
        self.csie_115_hk_cap_count = getUnsigned(packet[178:182], 'big', 0, 4294967295)
        
        self.csie_115_hk_proc_count = getUnsigned(packet[182:186], 'big', 0, 4294967295)
        
        self.csie_115_hk_cap_state = getUnsigned(packet[186:187], 'big', 0, 255)
        
        self.csie_115_hk_proc_state = getUnsigned(packet[187:188], 'big', 0, 255)
        
        self.csie_115_hk_active_protocol = getUnsigned(packet[188:189], 'big', 0, 255)
        
        self.csie_115_hk_count_cad = getUnsigned(packet[189:190], 'big', 0, 255)
        
        self.csie_115_hk_serial_flow = getUnsigned(packet[190:191], 'big', 0, 255)
        try:
            self.csie_115_hk_serial_flow = gen_states.CONVERT_csie_115_hk_serial_flow(self.csie_115_hk_serial_flow)
        except:
            pass
        
        self.csie_115_hk_autostart = getUnsigned(packet[191:192], 'big', 0, 255)
        try:
            self.csie_115_hk_autostart = gen_states.CONVERT_csie_115_hk_autostart(self.csie_115_hk_autostart)
        except:
            pass
        
        self.csie_115_hk_capq_active = getUnsigned(packet[192:193], 'big', 0, 255)
        
        self.csie_115_hk_procq_active = getUnsigned(packet[193:194], 'big', 0, 255)
        
        self.csie_115_hk_histogram_0 = getUnsigned(packet[194:198], 'big', 0, 4294967295)
        
        self.csie_115_hk_histogram_1 = getUnsigned(packet[198:202], 'big', 0, 4294967295)
        
        self.csie_115_hk_histogram_2 = getUnsigned(packet[202:206], 'big', 0, 4294967295)
        
        self.csie_115_hk_histogram_3 = getUnsigned(packet[206:210], 'big', 0, 4294967295)
        
        self.csie_115_hk_histogram_4 = getUnsigned(packet[210:214], 'big', 0, 4294967295)
        
        self.csie_115_hk_histogram_5 = getUnsigned(packet[214:218], 'big', 0, 4294967295)
        
        self.csie_115_hk_histogram_6 = getUnsigned(packet[218:222], 'big', 0, 4294967295)
        
        self.csie_115_hk_histogram_7 = getUnsigned(packet[222:226], 'big', 0, 4294967295)
        
        self.csie_115_hk_histogram_8 = getUnsigned(packet[226:230], 'big', 0, 4294967295)
        
        self.csie_115_hk_histogram_9 = getUnsigned(packet[230:234], 'big', 0, 4294967295)
        
        self.csie_115_hk_histogram_10 = getUnsigned(packet[234:238], 'big', 0, 4294967295)
        
        self.csie_115_hk_histogram_11 = getUnsigned(packet[238:242], 'big', 0, 4294967295)
        
        self.csie_115_hk_histogram_12 = getUnsigned(packet[242:246], 'big', 0, 4294967295)
        
        self.csie_115_hk_histogram_13 = getUnsigned(packet[246:250], 'big', 0, 4294967295)
        
        self.csie_115_hk_histogram_14 = getUnsigned(packet[250:254], 'big', 0, 4294967295)
        
        self.csie_115_hk_histogram_15 = getUnsigned(packet[254:258], 'big', 0, 4294967295)
        
        self.csie_115_hk_histogram_16 = getUnsigned(packet[258:262], 'big', 0, 4294967295)
        
        self.csie_115_hk_histogram_17 = getUnsigned(packet[262:266], 'big', 0, 4294967295)
        
        self.csie_115_hk_histogram_18 = getUnsigned(packet[266:270], 'big', 0, 4294967295)
        
        self.csie_115_hk_histogram_19 = getUnsigned(packet[270:274], 'big', 0, 4294967295)
        
        self.csie_115_hk_histogram_20 = getUnsigned(packet[274:278], 'big', 0, 4294967295)
        
        self.csie_115_hk_histogram_21 = getUnsigned(packet[278:282], 'big', 0, 4294967295)
        
        self.csie_115_hk_histogram_22 = getUnsigned(packet[282:286], 'big', 0, 4294967295)
        
        self.csie_115_hk_histogram_23 = getUnsigned(packet[286:290], 'big', 0, 4294967295)
        
        self.csie_115_hk_histogram_24 = getUnsigned(packet[290:294], 'big', 0, 4294967295)
        
        self.csie_115_hk_histogram_25 = getUnsigned(packet[294:298], 'big', 0, 4294967295)
        
        self.csie_115_hk_histogram_26 = getUnsigned(packet[298:302], 'big', 0, 4294967295)
        
        self.csie_115_hk_histogram_27 = getUnsigned(packet[302:306], 'big', 0, 4294967295)
        
        self.csie_115_hk_histogram_28 = getUnsigned(packet[306:310], 'big', 0, 4294967295)
        
        self.csie_115_hk_histogram_29 = getUnsigned(packet[310:314], 'big', 0, 4294967295)
        
        self.csie_115_hk_histogram_30 = getUnsigned(packet[314:318], 'big', 0, 4294967295)
        
        self.csie_115_hk_histogram_31 = getUnsigned(packet[318:322], 'big', 0, 4294967295)
        
        self.csie_115_hk_sdram_index_valid_0 = getUnsigned(packet[322:323], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_1 = getUnsigned(packet[323:324], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_2 = getUnsigned(packet[324:325], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_3 = getUnsigned(packet[325:326], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_4 = getUnsigned(packet[326:327], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_5 = getUnsigned(packet[327:328], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_6 = getUnsigned(packet[328:329], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_7 = getUnsigned(packet[329:330], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_8 = getUnsigned(packet[330:331], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_9 = getUnsigned(packet[331:332], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_10 = getUnsigned(packet[332:333], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_11 = getUnsigned(packet[333:334], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_12 = getUnsigned(packet[334:335], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_13 = getUnsigned(packet[335:336], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_14 = getUnsigned(packet[336:337], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_15 = getUnsigned(packet[337:338], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_16 = getUnsigned(packet[338:339], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_17 = getUnsigned(packet[339:340], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_18 = getUnsigned(packet[340:341], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_19 = getUnsigned(packet[341:342], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_20 = getUnsigned(packet[342:343], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_21 = getUnsigned(packet[343:344], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_22 = getUnsigned(packet[344:345], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_23 = getUnsigned(packet[345:346], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_24 = getUnsigned(packet[346:347], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_25 = getUnsigned(packet[347:348], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_26 = getUnsigned(packet[348:349], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_27 = getUnsigned(packet[349:350], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_28 = getUnsigned(packet[350:351], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_29 = getUnsigned(packet[351:352], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_30 = getUnsigned(packet[352:353], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_31 = getUnsigned(packet[353:354], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_32 = getUnsigned(packet[354:355], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_33 = getUnsigned(packet[355:356], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_34 = getUnsigned(packet[356:357], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_35 = getUnsigned(packet[357:358], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_36 = getUnsigned(packet[358:359], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_37 = getUnsigned(packet[359:360], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_38 = getUnsigned(packet[360:361], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_39 = getUnsigned(packet[361:362], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_40 = getUnsigned(packet[362:363], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_41 = getUnsigned(packet[363:364], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_42 = getUnsigned(packet[364:365], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_43 = getUnsigned(packet[365:366], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_44 = getUnsigned(packet[366:367], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_45 = getUnsigned(packet[367:368], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_46 = getUnsigned(packet[368:369], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_47 = getUnsigned(packet[369:370], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_48 = getUnsigned(packet[370:371], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_49 = getUnsigned(packet[371:372], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_50 = getUnsigned(packet[372:373], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_51 = getUnsigned(packet[373:374], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_52 = getUnsigned(packet[374:375], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_53 = getUnsigned(packet[375:376], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_54 = getUnsigned(packet[376:377], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_55 = getUnsigned(packet[377:378], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_56 = getUnsigned(packet[378:379], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_57 = getUnsigned(packet[379:380], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_58 = getUnsigned(packet[380:381], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_59 = getUnsigned(packet[381:382], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_60 = getUnsigned(packet[382:383], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_61 = getUnsigned(packet[383:384], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_62 = getUnsigned(packet[384:385], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_63 = getUnsigned(packet[385:386], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_64 = getUnsigned(packet[386:387], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_65 = getUnsigned(packet[387:388], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_66 = getUnsigned(packet[388:389], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_67 = getUnsigned(packet[389:390], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_68 = getUnsigned(packet[390:391], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_69 = getUnsigned(packet[391:392], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_70 = getUnsigned(packet[392:393], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_71 = getUnsigned(packet[393:394], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_72 = getUnsigned(packet[394:395], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_73 = getUnsigned(packet[395:396], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_74 = getUnsigned(packet[396:397], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_75 = getUnsigned(packet[397:398], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_76 = getUnsigned(packet[398:399], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_77 = getUnsigned(packet[399:400], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_78 = getUnsigned(packet[400:401], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_79 = getUnsigned(packet[401:402], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_80 = getUnsigned(packet[402:403], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_81 = getUnsigned(packet[403:404], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_82 = getUnsigned(packet[404:405], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_83 = getUnsigned(packet[405:406], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_84 = getUnsigned(packet[406:407], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_85 = getUnsigned(packet[407:408], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_86 = getUnsigned(packet[408:409], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_87 = getUnsigned(packet[409:410], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_88 = getUnsigned(packet[410:411], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_89 = getUnsigned(packet[411:412], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_90 = getUnsigned(packet[412:413], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_91 = getUnsigned(packet[413:414], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_92 = getUnsigned(packet[414:415], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_93 = getUnsigned(packet[415:416], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_94 = getUnsigned(packet[416:417], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_95 = getUnsigned(packet[417:418], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_96 = getUnsigned(packet[418:419], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_97 = getUnsigned(packet[419:420], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_98 = getUnsigned(packet[420:421], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_99 = getUnsigned(packet[421:422], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_100 = getUnsigned(packet[422:423], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_101 = getUnsigned(packet[423:424], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_102 = getUnsigned(packet[424:425], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_103 = getUnsigned(packet[425:426], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_104 = getUnsigned(packet[426:427], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_105 = getUnsigned(packet[427:428], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_106 = getUnsigned(packet[428:429], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_107 = getUnsigned(packet[429:430], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_108 = getUnsigned(packet[430:431], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_109 = getUnsigned(packet[431:432], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_110 = getUnsigned(packet[432:433], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_111 = getUnsigned(packet[433:434], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_112 = getUnsigned(packet[434:435], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_113 = getUnsigned(packet[435:436], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_114 = getUnsigned(packet[436:437], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_115 = getUnsigned(packet[437:438], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_116 = getUnsigned(packet[438:439], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_117 = getUnsigned(packet[439:440], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_118 = getUnsigned(packet[440:441], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_119 = getUnsigned(packet[441:442], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_120 = getUnsigned(packet[442:443], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_121 = getUnsigned(packet[443:444], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_122 = getUnsigned(packet[444:445], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_123 = getUnsigned(packet[445:446], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_124 = getUnsigned(packet[446:447], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_125 = getUnsigned(packet[447:448], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_126 = getUnsigned(packet[448:449], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_127 = getUnsigned(packet[449:450], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_128 = getUnsigned(packet[450:451], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_129 = getUnsigned(packet[451:452], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_130 = getUnsigned(packet[452:453], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_131 = getUnsigned(packet[453:454], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_132 = getUnsigned(packet[454:455], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_133 = getUnsigned(packet[455:456], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_134 = getUnsigned(packet[456:457], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_135 = getUnsigned(packet[457:458], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_136 = getUnsigned(packet[458:459], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_137 = getUnsigned(packet[459:460], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_138 = getUnsigned(packet[460:461], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_139 = getUnsigned(packet[461:462], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_140 = getUnsigned(packet[462:463], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_141 = getUnsigned(packet[463:464], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_142 = getUnsigned(packet[464:465], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_143 = getUnsigned(packet[465:466], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_144 = getUnsigned(packet[466:467], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_145 = getUnsigned(packet[467:468], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_146 = getUnsigned(packet[468:469], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_147 = getUnsigned(packet[469:470], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_148 = getUnsigned(packet[470:471], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_149 = getUnsigned(packet[471:472], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_150 = getUnsigned(packet[472:473], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_151 = getUnsigned(packet[473:474], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_152 = getUnsigned(packet[474:475], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_153 = getUnsigned(packet[475:476], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_154 = getUnsigned(packet[476:477], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_155 = getUnsigned(packet[477:478], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_156 = getUnsigned(packet[478:479], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_157 = getUnsigned(packet[479:480], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_158 = getUnsigned(packet[480:481], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_159 = getUnsigned(packet[481:482], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_160 = getUnsigned(packet[482:483], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_161 = getUnsigned(packet[483:484], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_162 = getUnsigned(packet[484:485], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_163 = getUnsigned(packet[485:486], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_164 = getUnsigned(packet[486:487], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_165 = getUnsigned(packet[487:488], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_166 = getUnsigned(packet[488:489], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_167 = getUnsigned(packet[489:490], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_168 = getUnsigned(packet[490:491], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_169 = getUnsigned(packet[491:492], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_170 = getUnsigned(packet[492:493], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_171 = getUnsigned(packet[493:494], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_172 = getUnsigned(packet[494:495], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_173 = getUnsigned(packet[495:496], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_174 = getUnsigned(packet[496:497], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_175 = getUnsigned(packet[497:498], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_176 = getUnsigned(packet[498:499], 'big', 0, 255)
        
        self.csie_115_hk_sdram_index_valid_177 = getUnsigned(packet[499:500], 'big', 0, 255)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

class CSIE_META:
    def __str__(self):
        return 'CSIE_META'

    def __init__(self, packet, header):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.SHCOARSE = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.SHFINE = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.csie_meta_img_id = getUnsigned(packet[6:10], 'big', 0, 4294967295)
        
        self.csie_meta_intg_ms = getUnsigned(packet[10:14], 'big', 0, 4294967295)
        
        self.csie_meta_dfsu_start = getUnsigned(packet[14:18], 'big', 0, 4294967295)
        
        self.csie_meta_dfsu_end = getUnsigned(packet[18:22], 'big', 0, 4294967295)
        
        self.csie_meta_test_mode = getUnsigned(packet[22:26], 'big', 0, 4294967295)
        
        self.csie_meta_proc_start_index = getUnsigned(packet[26:30], 'big', 0, 4294967295)
        
        self.csie_meta_fpm_proc_config = getUnsigned(packet[30:34], 'big', 0, 4294967295)
        
        self.csie_meta_fpm_pix_per_row = getUnsigned(packet[34:38], 'big', 0, 4294967295)
        
        self.csie_meta_fpm_row_per_frame = getUnsigned(packet[38:42], 'big', 0, 4294967295)
        
        self.csie_meta_fpm_col_pix_offset = getUnsigned(packet[42:46], 'big', 0, 4294967295)
        
        self.csie_meta_fpm_col_chan_offset = getUnsigned(packet[46:50], 'big', 0, 4294967295)
        
        self.csie_meta_fpm_row_ptr_offset = getUnsigned(packet[50:54], 'big', 0, 4294967295)
        
        self.csie_meta_icm_proc_config = getUnsigned(packet[54:58], 'big', 0, 4294967295)
        
        self.csie_meta_icm_pix_thresh = getUnsigned(packet[58:62], 'big', 0, 4294967295)
        
        self.csie_meta_bus_volt = getUnsigned(packet[62:66], 'big', 0, 4294967295)
        
        self.csie_meta_3v3 = getUnsigned(packet[66:70], 'big', 0, 4294967295)
        
        self.csie_meta_2v5 = getUnsigned(packet[70:74], 'big', 0, 4294967295)
        
        self.csie_meta_1v8 = getUnsigned(packet[74:78], 'big', 0, 4294967295)
        
        self.csie_meta_1v5 = getUnsigned(packet[78:82], 'big', 0, 4294967295)
        
        self.csie_meta_1v0 = getUnsigned(packet[82:86], 'big', 0, 4294967295)
        
        self.csie_meta_3i3 = getUnsigned(packet[86:90], 'big', 0, 4294967295)
        
        self.csie_meta_1i8 = getUnsigned(packet[90:94], 'big', 0, 4294967295)
        
        self.csie_meta_1i0 = getUnsigned(packet[94:98], 'big', 0, 4294967295)
        
        self.csie_meta_fpga_temp = getUnsigned(packet[98:102], 'big', 0, 4294967295)
        
        self.csie_meta_det_volt = getUnsigned(packet[102:106], 'big', 0, 4294967295)
        
        self.csie_meta_adc_buff_volt = getUnsigned(packet[106:110], 'big', 0, 4294967295)
        
        self.csie_meta_1v8_adc = getUnsigned(packet[110:114], 'big', 0, 4294967295)
        
        self.csie_meta_util_volt = getUnsigned(packet[114:118], 'big', 0, 4294967295)
        
        self.csie_meta_ffl_volt = getUnsigned(packet[118:122], 'big', 0, 4294967295)
        
        self.csie_meta_inst_curr = getUnsigned(packet[122:126], 'big', 0, 4294967295)
        
        self.csie_meta_util_curr = getUnsigned(packet[126:130], 'big', 0, 4294967295)
        
        self.csie_meta_det_curr = getUnsigned(packet[130:134], 'big', 0, 4294967295)
        
        self.REUSABLE_SPARE_32 = getUnsigned(packet[134:138], 'big', 0, 4294967295)
        
        self.csie_meta_det0_temp = getUnsigned(packet[138:142], 'big', 0, 4294967295)
        
        self.csie_meta_det1_temp = getUnsigned(packet[142:146], 'big', 0, 4294967295)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0


class CSIE_DATA:
    def __str__(self):
        return 'CSIE_DATA'

    def __init__(self, packet, header):
        apidField = int.from_bytes(header[0:2], 'big')
        self.version = apidField >> 13
        self.type = apidField >> 12 & 0x01
        self.secHdr = apidField >> 11 & 0x01
        self.apid = apidField & 0x7FF
        self.src_seq_ctr = int.from_bytes(header[2:4], 'big') & 0x3FFF
        self.group = int.from_bytes(header[2:4], 'big') & 0xC000 >> 14
        self.length = int.from_bytes(header[4:6], 'big')
        if len(header) > 6:
            self.ert_sec = int.from_bytes(header[6:10], 'big')
            self.ert_sub = int.from_bytes(header[10:14], 'big')
            ertTime = self.ert_sec * 1000000 + self.ert_sub
            self.ground_isotime = datetime.datetime.fromtimestamp(ertTime/1000000.0).isoformat()
        
        self.SHCOARSE = getUnsigned(packet[0:4], 'big', 0, 4294967295)
        
        self.SHFINE = getUnsigned(packet[4:6], 'big', 0, 65535)
        
        self.csieData_0 = getUnsigned(packet[6:8], 'big', 0, 65535)
        
        self.csieData_1 = getUnsigned(packet[8:10], 'big', 0, 65535)
        
        self.csieData_2 = getUnsigned(packet[10:12], 'big', 0, 65535)
        
        self.csieData_3 = getUnsigned(packet[12:14], 'big', 0, 65535)
        
        self.csieData_4 = getUnsigned(packet[14:16], 'big', 0, 65535)
        
        self.csieData_5 = getUnsigned(packet[16:18], 'big', 0, 65535)
        
        self.csieData_6 = getUnsigned(packet[18:20], 'big', 0, 65535)
        
        self.csieData_7 = getUnsigned(packet[20:22], 'big', 0, 65535)
        
        self.csieData_8 = getUnsigned(packet[22:24], 'big', 0, 65535)
        
        self.csieData_9 = getUnsigned(packet[24:26], 'big', 0, 65535)
        
        self.csieData_10 = getUnsigned(packet[26:28], 'big', 0, 65535)
        
        self.csieData_11 = getUnsigned(packet[28:30], 'big', 0, 65535)
        
        self.csieData_12 = getUnsigned(packet[30:32], 'big', 0, 65535)
        
        self.csieData_13 = getUnsigned(packet[32:34], 'big', 0, 65535)
        
        self.csieData_14 = getUnsigned(packet[34:36], 'big', 0, 65535)
        
        self.csieData_15 = getUnsigned(packet[36:38], 'big', 0, 65535)
        
        self.csieData_16 = getUnsigned(packet[38:40], 'big', 0, 65535)
        
        self.csieData_17 = getUnsigned(packet[40:42], 'big', 0, 65535)
        
        self.csieData_18 = getUnsigned(packet[42:44], 'big', 0, 65535)
        
        self.csieData_19 = getUnsigned(packet[44:46], 'big', 0, 65535)
        
        self.csieData_20 = getUnsigned(packet[46:48], 'big', 0, 65535)
        
        self.csieData_21 = getUnsigned(packet[48:50], 'big', 0, 65535)
        
        self.csieData_22 = getUnsigned(packet[50:52], 'big', 0, 65535)
        
        self.csieData_23 = getUnsigned(packet[52:54], 'big', 0, 65535)
        
        self.csieData_24 = getUnsigned(packet[54:56], 'big', 0, 65535)
        
        self.csieData_25 = getUnsigned(packet[56:58], 'big', 0, 65535)
        
        self.csieData_26 = getUnsigned(packet[58:60], 'big', 0, 65535)
        
        self.csieData_27 = getUnsigned(packet[60:62], 'big', 0, 65535)
        
        self.csieData_28 = getUnsigned(packet[62:64], 'big', 0, 65535)
        
        self.csieData_29 = getUnsigned(packet[64:66], 'big', 0, 65535)
        
        self.csieData_30 = getUnsigned(packet[66:68], 'big', 0, 65535)
        
        self.csieData_31 = getUnsigned(packet[68:70], 'big', 0, 65535)
        
        self.csieData_32 = getUnsigned(packet[70:72], 'big', 0, 65535)
        
        self.csieData_33 = getUnsigned(packet[72:74], 'big', 0, 65535)
        
        self.csieData_34 = getUnsigned(packet[74:76], 'big', 0, 65535)
        
        self.csieData_35 = getUnsigned(packet[76:78], 'big', 0, 65535)
        
        self.csieData_36 = getUnsigned(packet[78:80], 'big', 0, 65535)
        
        self.csieData_37 = getUnsigned(packet[80:82], 'big', 0, 65535)
        
        self.csieData_38 = getUnsigned(packet[82:84], 'big', 0, 65535)
        
        self.csieData_39 = getUnsigned(packet[84:86], 'big', 0, 65535)
        
        self.csieData_40 = getUnsigned(packet[86:88], 'big', 0, 65535)
        
        self.csieData_41 = getUnsigned(packet[88:90], 'big', 0, 65535)
        
        self.csieData_42 = getUnsigned(packet[90:92], 'big', 0, 65535)
        
        self.csieData_43 = getUnsigned(packet[92:94], 'big', 0, 65535)
        
        self.csieData_44 = getUnsigned(packet[94:96], 'big', 0, 65535)
        
        self.csieData_45 = getUnsigned(packet[96:98], 'big', 0, 65535)
        
        self.csieData_46 = getUnsigned(packet[98:100], 'big', 0, 65535)
        
        self.csieData_47 = getUnsigned(packet[100:102], 'big', 0, 65535)
        
        self.csieData_48 = getUnsigned(packet[102:104], 'big', 0, 65535)
        
        self.csieData_49 = getUnsigned(packet[104:106], 'big', 0, 65535)
        
        self.csieData_50 = getUnsigned(packet[106:108], 'big', 0, 65535)
        
        self.csieData_51 = getUnsigned(packet[108:110], 'big', 0, 65535)
        
        self.csieData_52 = getUnsigned(packet[110:112], 'big', 0, 65535)
        
        self.csieData_53 = getUnsigned(packet[112:114], 'big', 0, 65535)
        
        self.csieData_54 = getUnsigned(packet[114:116], 'big', 0, 65535)
        
        self.csieData_55 = getUnsigned(packet[116:118], 'big', 0, 65535)
        
        self.csieData_56 = getUnsigned(packet[118:120], 'big', 0, 65535)
        
        self.csieData_57 = getUnsigned(packet[120:122], 'big', 0, 65535)
        
        self.csieData_58 = getUnsigned(packet[122:124], 'big', 0, 65535)
        
        self.csieData_59 = getUnsigned(packet[124:126], 'big', 0, 65535)
        
        self.csieData_60 = getUnsigned(packet[126:128], 'big', 0, 65535)
        
        self.csieData_61 = getUnsigned(packet[128:130], 'big', 0, 65535)
        
        self.csieData_62 = getUnsigned(packet[130:132], 'big', 0, 65535)
        
        self.csieData_63 = getUnsigned(packet[132:134], 'big', 0, 65535)
        
        self.csieData_64 = getUnsigned(packet[134:136], 'big', 0, 65535)
        
        self.csieData_65 = getUnsigned(packet[136:138], 'big', 0, 65535)
        
        self.csieData_66 = getUnsigned(packet[138:140], 'big', 0, 65535)
        
        self.csieData_67 = getUnsigned(packet[140:142], 'big', 0, 65535)
        
        self.csieData_68 = getUnsigned(packet[142:144], 'big', 0, 65535)
        
        self.csieData_69 = getUnsigned(packet[144:146], 'big', 0, 65535)
        
        self.csieData_70 = getUnsigned(packet[146:148], 'big', 0, 65535)
        
        self.csieData_71 = getUnsigned(packet[148:150], 'big', 0, 65535)
        
        self.csieData_72 = getUnsigned(packet[150:152], 'big', 0, 65535)
        
        self.csieData_73 = getUnsigned(packet[152:154], 'big', 0, 65535)
        
        self.csieData_74 = getUnsigned(packet[154:156], 'big', 0, 65535)
        
        self.csieData_75 = getUnsigned(packet[156:158], 'big', 0, 65535)
        
        self.csieData_76 = getUnsigned(packet[158:160], 'big', 0, 65535)
        
        self.csieData_77 = getUnsigned(packet[160:162], 'big', 0, 65535)
        
        self.csieData_78 = getUnsigned(packet[162:164], 'big', 0, 65535)
        
        self.csieData_79 = getUnsigned(packet[164:166], 'big', 0, 65535)
        
        self.csieData_80 = getUnsigned(packet[166:168], 'big', 0, 65535)
        
        self.csieData_81 = getUnsigned(packet[168:170], 'big', 0, 65535)
        
        self.csieData_82 = getUnsigned(packet[170:172], 'big', 0, 65535)
        
        self.csieData_83 = getUnsigned(packet[172:174], 'big', 0, 65535)
        
        self.csieData_84 = getUnsigned(packet[174:176], 'big', 0, 65535)
        
        self.csieData_85 = getUnsigned(packet[176:178], 'big', 0, 65535)
        
        self.csieData_86 = getUnsigned(packet[178:180], 'big', 0, 65535)
        
        self.csieData_87 = getUnsigned(packet[180:182], 'big', 0, 65535)
        
        self.csieData_88 = getUnsigned(packet[182:184], 'big', 0, 65535)
        
        self.csieData_89 = getUnsigned(packet[184:186], 'big', 0, 65535)
        
        self.csieData_90 = getUnsigned(packet[186:188], 'big', 0, 65535)
        
        self.csieData_91 = getUnsigned(packet[188:190], 'big', 0, 65535)
        
        self.csieData_92 = getUnsigned(packet[190:192], 'big', 0, 65535)
        
        self.csieData_93 = getUnsigned(packet[192:194], 'big', 0, 65535)
        
        self.csieData_94 = getUnsigned(packet[194:196], 'big', 0, 65535)
        
        self.csieData_95 = getUnsigned(packet[196:198], 'big', 0, 65535)
        
        self.csieData_96 = getUnsigned(packet[198:200], 'big', 0, 65535)
        
        self.csieData_97 = getUnsigned(packet[200:202], 'big', 0, 65535)
        
        self.csieData_98 = getUnsigned(packet[202:204], 'big', 0, 65535)
        
        self.csieData_99 = getUnsigned(packet[204:206], 'big', 0, 65535)
        
        self.csieData_100 = getUnsigned(packet[206:208], 'big', 0, 65535)
        
        self.csieData_101 = getUnsigned(packet[208:210], 'big', 0, 65535)
        
        self.csieData_102 = getUnsigned(packet[210:212], 'big', 0, 65535)
        
        self.csieData_103 = getUnsigned(packet[212:214], 'big', 0, 65535)
        
        self.csieData_104 = getUnsigned(packet[214:216], 'big', 0, 65535)
        
        self.csieData_105 = getUnsigned(packet[216:218], 'big', 0, 65535)
        
        self.csieData_106 = getUnsigned(packet[218:220], 'big', 0, 65535)
        
        self.csieData_107 = getUnsigned(packet[220:222], 'big', 0, 65535)
        
        self.csieData_108 = getUnsigned(packet[222:224], 'big', 0, 65535)
        
        self.csieData_109 = getUnsigned(packet[224:226], 'big', 0, 65535)
        
        self.csieData_110 = getUnsigned(packet[226:228], 'big', 0, 65535)
        
        self.csieData_111 = getUnsigned(packet[228:230], 'big', 0, 65535)
        
        self.csieData_112 = getUnsigned(packet[230:232], 'big', 0, 65535)
        
        self.csieData_113 = getUnsigned(packet[232:234], 'big', 0, 65535)
        
        self.csieData_114 = getUnsigned(packet[234:236], 'big', 0, 65535)
        
        self.csieData_115 = getUnsigned(packet[236:238], 'big', 0, 65535)
        
        self.csieData_116 = getUnsigned(packet[238:240], 'big', 0, 65535)
        
        self.csieData_117 = getUnsigned(packet[240:242], 'big', 0, 65535)
        
        self.csieData_118 = getUnsigned(packet[242:244], 'big', 0, 65535)
        
        self.csieData_119 = getUnsigned(packet[244:246], 'big', 0, 65535)
        
        self.csieData_120 = getUnsigned(packet[246:248], 'big', 0, 65535)
        
        self.csieData_121 = getUnsigned(packet[248:250], 'big', 0, 65535)
        
        self.csieData_122 = getUnsigned(packet[250:252], 'big', 0, 65535)
        
        self.csieData_123 = getUnsigned(packet[252:254], 'big', 0, 65535)
        
        self.csieData_124 = getUnsigned(packet[254:256], 'big', 0, 65535)
        
        self.csieData_125 = getUnsigned(packet[256:258], 'big', 0, 65535)
        
        self.csieData_126 = getUnsigned(packet[258:260], 'big', 0, 65535)
        
        self.csieData_127 = getUnsigned(packet[260:262], 'big', 0, 65535)
        
        self.csieData_128 = getUnsigned(packet[262:264], 'big', 0, 65535)
        
        self.csieData_129 = getUnsigned(packet[264:266], 'big', 0, 65535)
        
        self.csieData_130 = getUnsigned(packet[266:268], 'big', 0, 65535)
        
        self.csieData_131 = getUnsigned(packet[268:270], 'big', 0, 65535)
        
        self.csieData_132 = getUnsigned(packet[270:272], 'big', 0, 65535)
        
        self.csieData_133 = getUnsigned(packet[272:274], 'big', 0, 65535)
        
        self.csieData_134 = getUnsigned(packet[274:276], 'big', 0, 65535)
        
        self.csieData_135 = getUnsigned(packet[276:278], 'big', 0, 65535)
        
        self.csieData_136 = getUnsigned(packet[278:280], 'big', 0, 65535)
        
        self.csieData_137 = getUnsigned(packet[280:282], 'big', 0, 65535)
        
        self.csieData_138 = getUnsigned(packet[282:284], 'big', 0, 65535)
        
        self.csieData_139 = getUnsigned(packet[284:286], 'big', 0, 65535)
        
        self.csieData_140 = getUnsigned(packet[286:288], 'big', 0, 65535)
        
        self.csieData_141 = getUnsigned(packet[288:290], 'big', 0, 65535)
        
        self.csieData_142 = getUnsigned(packet[290:292], 'big', 0, 65535)
        
        self.csieData_143 = getUnsigned(packet[292:294], 'big', 0, 65535)
        
        self.csieData_144 = getUnsigned(packet[294:296], 'big', 0, 65535)
        
        self.csieData_145 = getUnsigned(packet[296:298], 'big', 0, 65535)
        
        self.csieData_146 = getUnsigned(packet[298:300], 'big', 0, 65535)
        
        self.csieData_147 = getUnsigned(packet[300:302], 'big', 0, 65535)
        
        self.csieData_148 = getUnsigned(packet[302:304], 'big', 0, 65535)
        
        self.csieData_149 = getUnsigned(packet[304:306], 'big', 0, 65535)
        
        self.csieData_150 = getUnsigned(packet[306:308], 'big', 0, 65535)
        
        self.csieData_151 = getUnsigned(packet[308:310], 'big', 0, 65535)
        
        self.csieData_152 = getUnsigned(packet[310:312], 'big', 0, 65535)
        
        self.csieData_153 = getUnsigned(packet[312:314], 'big', 0, 65535)
        
        self.csieData_154 = getUnsigned(packet[314:316], 'big', 0, 65535)
        
        self.csieData_155 = getUnsigned(packet[316:318], 'big', 0, 65535)
        
        self.csieData_156 = getUnsigned(packet[318:320], 'big', 0, 65535)
        
        self.csieData_157 = getUnsigned(packet[320:322], 'big', 0, 65535)
        
        self.csieData_158 = getUnsigned(packet[322:324], 'big', 0, 65535)
        
        self.csieData_159 = getUnsigned(packet[324:326], 'big', 0, 65535)
        
        self.csieData_160 = getUnsigned(packet[326:328], 'big', 0, 65535)
        
        self.csieData_161 = getUnsigned(packet[328:330], 'big', 0, 65535)
        
        self.csieData_162 = getUnsigned(packet[330:332], 'big', 0, 65535)
        
        self.csieData_163 = getUnsigned(packet[332:334], 'big', 0, 65535)
        
        self.csieData_164 = getUnsigned(packet[334:336], 'big', 0, 65535)
        
        self.csieData_165 = getUnsigned(packet[336:338], 'big', 0, 65535)
        
        self.csieData_166 = getUnsigned(packet[338:340], 'big', 0, 65535)
        
        self.csieData_167 = getUnsigned(packet[340:342], 'big', 0, 65535)
        
        self.csieData_168 = getUnsigned(packet[342:344], 'big', 0, 65535)
        
        self.csieData_169 = getUnsigned(packet[344:346], 'big', 0, 65535)
        
        self.csieData_170 = getUnsigned(packet[346:348], 'big', 0, 65535)
        
        self.csieData_171 = getUnsigned(packet[348:350], 'big', 0, 65535)
        
        self.csieData_172 = getUnsigned(packet[350:352], 'big', 0, 65535)
        
        self.csieData_173 = getUnsigned(packet[352:354], 'big', 0, 65535)
        
        self.csieData_174 = getUnsigned(packet[354:356], 'big', 0, 65535)
        
        self.csieData_175 = getUnsigned(packet[356:358], 'big', 0, 65535)
        
        self.csieData_176 = getUnsigned(packet[358:360], 'big', 0, 65535)
        
        self.csieData_177 = getUnsigned(packet[360:362], 'big', 0, 65535)
        
        self.csieData_178 = getUnsigned(packet[362:364], 'big', 0, 65535)
        
        self.csieData_179 = getUnsigned(packet[364:366], 'big', 0, 65535)
        
        self.csieData_180 = getUnsigned(packet[366:368], 'big', 0, 65535)
        
        self.csieData_181 = getUnsigned(packet[368:370], 'big', 0, 65535)
        
        self.csieData_182 = getUnsigned(packet[370:372], 'big', 0, 65535)
        
        self.csieData_183 = getUnsigned(packet[372:374], 'big', 0, 65535)
        
        self.csieData_184 = getUnsigned(packet[374:376], 'big', 0, 65535)
        
        self.csieData_185 = getUnsigned(packet[376:378], 'big', 0, 65535)
        
        self.csieData_186 = getUnsigned(packet[378:380], 'big', 0, 65535)
        
        self.csieData_187 = getUnsigned(packet[380:382], 'big', 0, 65535)
        
        self.csieData_188 = getUnsigned(packet[382:384], 'big', 0, 65535)
        
        self.csieData_189 = getUnsigned(packet[384:386], 'big', 0, 65535)
        
        self.csieData_190 = getUnsigned(packet[386:388], 'big', 0, 65535)
        
        self.csieData_191 = getUnsigned(packet[388:390], 'big', 0, 65535)
        
        self.csieData_192 = getUnsigned(packet[390:392], 'big', 0, 65535)
        
        self.csieData_193 = getUnsigned(packet[392:394], 'big', 0, 65535)
        
        self.csieData_194 = getUnsigned(packet[394:396], 'big', 0, 65535)
        
        self.csieData_195 = getUnsigned(packet[396:398], 'big', 0, 65535)
        
        self.csieData_196 = getUnsigned(packet[398:400], 'big', 0, 65535)
        
        self.csieData_197 = getUnsigned(packet[400:402], 'big', 0, 65535)
        
        self.csieData_198 = getUnsigned(packet[402:404], 'big', 0, 65535)
        
        self.csieData_199 = getUnsigned(packet[404:406], 'big', 0, 65535)
        
        self.csieData_200 = getUnsigned(packet[406:408], 'big', 0, 65535)
        
        self.csieData_201 = getUnsigned(packet[408:410], 'big', 0, 65535)
        
        self.csieData_202 = getUnsigned(packet[410:412], 'big', 0, 65535)
        
        self.csieData_203 = getUnsigned(packet[412:414], 'big', 0, 65535)
        
        self.csieData_204 = getUnsigned(packet[414:416], 'big', 0, 65535)
        
        self.csieData_205 = getUnsigned(packet[416:418], 'big', 0, 65535)
        
        self.csieData_206 = getUnsigned(packet[418:420], 'big', 0, 65535)
        
        self.csieData_207 = getUnsigned(packet[420:422], 'big', 0, 65535)
        
        self.csieData_208 = getUnsigned(packet[422:424], 'big', 0, 65535)
        
        self.csieData_209 = getUnsigned(packet[424:426], 'big', 0, 65535)
        
        self.csieData_210 = getUnsigned(packet[426:428], 'big', 0, 65535)
        
        self.csieData_211 = getUnsigned(packet[428:430], 'big', 0, 65535)
        
        self.csieData_212 = getUnsigned(packet[430:432], 'big', 0, 65535)
        
        self.csieData_213 = getUnsigned(packet[432:434], 'big', 0, 65535)
        
        self.csieData_214 = getUnsigned(packet[434:436], 'big', 0, 65535)
        
        self.csieData_215 = getUnsigned(packet[436:438], 'big', 0, 65535)
        
        self.csieData_216 = getUnsigned(packet[438:440], 'big', 0, 65535)
        
        self.csieData_217 = getUnsigned(packet[440:442], 'big', 0, 65535)
        
        self.csieData_218 = getUnsigned(packet[442:444], 'big', 0, 65535)
        
        self.csieData_219 = getUnsigned(packet[444:446], 'big', 0, 65535)
        
        self.csieData_220 = getUnsigned(packet[446:448], 'big', 0, 65535)
        
        self.csieData_221 = getUnsigned(packet[448:450], 'big', 0, 65535)
        
        self.csieData_222 = getUnsigned(packet[450:452], 'big', 0, 65535)
        
        self.csieData_223 = getUnsigned(packet[452:454], 'big', 0, 65535)
        
        self.csieData_224 = getUnsigned(packet[454:456], 'big', 0, 65535)
        
        self.csieData_225 = getUnsigned(packet[456:458], 'big', 0, 65535)
        
        self.csieData_226 = getUnsigned(packet[458:460], 'big', 0, 65535)
        
        self.csieData_227 = getUnsigned(packet[460:462], 'big', 0, 65535)
        
        self.csieData_228 = getUnsigned(packet[462:464], 'big', 0, 65535)
        
        self.csieData_229 = getUnsigned(packet[464:466], 'big', 0, 65535)
        
        self.csieData_230 = getUnsigned(packet[466:468], 'big', 0, 65535)
        
        self.csieData_231 = getUnsigned(packet[468:470], 'big', 0, 65535)
        
        self.csieData_232 = getUnsigned(packet[470:472], 'big', 0, 65535)
        
        self.csieData_233 = getUnsigned(packet[472:474], 'big', 0, 65535)
        
        self.csieData_234 = getUnsigned(packet[474:476], 'big', 0, 65535)
        
        self.csieData_235 = getUnsigned(packet[476:478], 'big', 0, 65535)
        
        self.csieData_236 = getUnsigned(packet[478:480], 'big', 0, 65535)
        
        self.csieData_237 = getUnsigned(packet[480:482], 'big', 0, 65535)
        
        self.csieData_238 = getUnsigned(packet[482:484], 'big', 0, 65535)
        
        self.csieData_239 = getUnsigned(packet[484:486], 'big', 0, 65535)
        
        self.csieData_240 = getUnsigned(packet[486:488], 'big', 0, 65535)
        
        self.csieData_241 = getUnsigned(packet[488:490], 'big', 0, 65535)
        
        self.csieData_242 = getUnsigned(packet[490:492], 'big', 0, 65535)
        
        self.csieData_243 = getUnsigned(packet[492:494], 'big', 0, 65535)
        
        self.csieData_244 = getUnsigned(packet[494:496], 'big', 0, 65535)
        
        self.csieData_245 = getUnsigned(packet[496:498], 'big', 0, 65535)
        
        self.csieData_246 = getUnsigned(packet[498:500], 'big', 0, 65535)
        
        self.csieData_247 = getUnsigned(packet[500:502], 'big', 0, 65535)
        
        self.csieData_248 = getUnsigned(packet[502:504], 'big', 0, 65535)
        
        self.csieData_249 = getUnsigned(packet[504:506], 'big', 0, 65535)
        
        self.csieData_250 = getUnsigned(packet[506:508], 'big', 0, 65535)
        
        self.csieData_251 = getUnsigned(packet[508:510], 'big', 0, 65535)
        
        self.csieData_252 = getUnsigned(packet[510:512], 'big', 0, 65535)
        
        self.csieData_253 = getUnsigned(packet[512:514], 'big', 0, 65535)
        
        self.csieData_254 = getUnsigned(packet[514:516], 'big', 0, 65535)
        
        self.csieData_255 = getUnsigned(packet[516:518], 'big', 0, 65535)
        
        self.csieData_256 = getUnsigned(packet[518:520], 'big', 0, 65535)
        
        self.csieData_257 = getUnsigned(packet[520:522], 'big', 0, 65535)
        
        self.csieData_258 = getUnsigned(packet[522:524], 'big', 0, 65535)
        
        self.csieData_259 = getUnsigned(packet[524:526], 'big', 0, 65535)
        
        self.csieData_260 = getUnsigned(packet[526:528], 'big', 0, 65535)
        
        self.csieData_261 = getUnsigned(packet[528:530], 'big', 0, 65535)
        
        self.csieData_262 = getUnsigned(packet[530:532], 'big', 0, 65535)
        
        self.csieData_263 = getUnsigned(packet[532:534], 'big', 0, 65535)
        
        self.csieData_264 = getUnsigned(packet[534:536], 'big', 0, 65535)
        
        self.csieData_265 = getUnsigned(packet[536:538], 'big', 0, 65535)
        
        self.csieData_266 = getUnsigned(packet[538:540], 'big', 0, 65535)
        
        self.csieData_267 = getUnsigned(packet[540:542], 'big', 0, 65535)
        
        self.csieData_268 = getUnsigned(packet[542:544], 'big', 0, 65535)
        
        self.csieData_269 = getUnsigned(packet[544:546], 'big', 0, 65535)
        
        self.csieData_270 = getUnsigned(packet[546:548], 'big', 0, 65535)
        
        self.csieData_271 = getUnsigned(packet[548:550], 'big', 0, 65535)
        
        self.csieData_272 = getUnsigned(packet[550:552], 'big', 0, 65535)
        
        self.csieData_273 = getUnsigned(packet[552:554], 'big', 0, 65535)
        
        self.csieData_274 = getUnsigned(packet[554:556], 'big', 0, 65535)
        
        self.csieData_275 = getUnsigned(packet[556:558], 'big', 0, 65535)
        
        self.csieData_276 = getUnsigned(packet[558:560], 'big', 0, 65535)
        
        self.csieData_277 = getUnsigned(packet[560:562], 'big', 0, 65535)
        
        self.csieData_278 = getUnsigned(packet[562:564], 'big', 0, 65535)
        
        self.csieData_279 = getUnsigned(packet[564:566], 'big', 0, 65535)
        
        self.csieData_280 = getUnsigned(packet[566:568], 'big', 0, 65535)
        
        self.csieData_281 = getUnsigned(packet[568:570], 'big', 0, 65535)
        
        self.csieData_282 = getUnsigned(packet[570:572], 'big', 0, 65535)
        
        self.csieData_283 = getUnsigned(packet[572:574], 'big', 0, 65535)
        
        self.csieData_284 = getUnsigned(packet[574:576], 'big', 0, 65535)
        
        self.csieData_285 = getUnsigned(packet[576:578], 'big', 0, 65535)
        
        self.csieData_286 = getUnsigned(packet[578:580], 'big', 0, 65535)
        
        self.csieData_287 = getUnsigned(packet[580:582], 'big', 0, 65535)
        
        self.csieData_288 = getUnsigned(packet[582:584], 'big', 0, 65535)
        
        self.csieData_289 = getUnsigned(packet[584:586], 'big', 0, 65535)
        
        self.csieData_290 = getUnsigned(packet[586:588], 'big', 0, 65535)
        
        self.csieData_291 = getUnsigned(packet[588:590], 'big', 0, 65535)
        
        self.csieData_292 = getUnsigned(packet[590:592], 'big', 0, 65535)
        
        self.csieData_293 = getUnsigned(packet[592:594], 'big', 0, 65535)
        
        self.csieData_294 = getUnsigned(packet[594:596], 'big', 0, 65535)
        
        self.csieData_295 = getUnsigned(packet[596:598], 'big', 0, 65535)
        
        self.csieData_296 = getUnsigned(packet[598:600], 'big', 0, 65535)
        
        self.csieData_297 = getUnsigned(packet[600:602], 'big', 0, 65535)
        
        self.csieData_298 = getUnsigned(packet[602:604], 'big', 0, 65535)
        
        self.csieData_299 = getUnsigned(packet[604:606], 'big', 0, 65535)
        
        self.csieData_300 = getUnsigned(packet[606:608], 'big', 0, 65535)
        
        self.csieData_301 = getUnsigned(packet[608:610], 'big', 0, 65535)
        
        self.csieData_302 = getUnsigned(packet[610:612], 'big', 0, 65535)
        
        self.csieData_303 = getUnsigned(packet[612:614], 'big', 0, 65535)
        
        self.csieData_304 = getUnsigned(packet[614:616], 'big', 0, 65535)
        
        self.csieData_305 = getUnsigned(packet[616:618], 'big', 0, 65535)
        
        self.csieData_306 = getUnsigned(packet[618:620], 'big', 0, 65535)
        
        self.csieData_307 = getUnsigned(packet[620:622], 'big', 0, 65535)
        
        self.csieData_308 = getUnsigned(packet[622:624], 'big', 0, 65535)
        
        self.csieData_309 = getUnsigned(packet[624:626], 'big', 0, 65535)
        
        self.csieData_310 = getUnsigned(packet[626:628], 'big', 0, 65535)
        
        self.csieData_311 = getUnsigned(packet[628:630], 'big', 0, 65535)
        
        self.csieData_312 = getUnsigned(packet[630:632], 'big', 0, 65535)
        
        self.csieData_313 = getUnsigned(packet[632:634], 'big', 0, 65535)
        
        self.csieData_314 = getUnsigned(packet[634:636], 'big', 0, 65535)
        
        self.csieData_315 = getUnsigned(packet[636:638], 'big', 0, 65535)
        
        self.csieData_316 = getUnsigned(packet[638:640], 'big', 0, 65535)
        
        self.csieData_317 = getUnsigned(packet[640:642], 'big', 0, 65535)
        
        self.csieData_318 = getUnsigned(packet[642:644], 'big', 0, 65535)
        
        self.csieData_319 = getUnsigned(packet[644:646], 'big', 0, 65535)
        
        self.csieData_320 = getUnsigned(packet[646:648], 'big', 0, 65535)
        
        self.csieData_321 = getUnsigned(packet[648:650], 'big', 0, 65535)
        
        self.csieData_322 = getUnsigned(packet[650:652], 'big', 0, 65535)
        
        self.csieData_323 = getUnsigned(packet[652:654], 'big', 0, 65535)
        
        self.csieData_324 = getUnsigned(packet[654:656], 'big', 0, 65535)
        
        self.csieData_325 = getUnsigned(packet[656:658], 'big', 0, 65535)
        
        self.csieData_326 = getUnsigned(packet[658:660], 'big', 0, 65535)
        
        self.csieData_327 = getUnsigned(packet[660:662], 'big', 0, 65535)
        
        self.csieData_328 = getUnsigned(packet[662:664], 'big', 0, 65535)
        
        self.csieData_329 = getUnsigned(packet[664:666], 'big', 0, 65535)
        
        self.csieData_330 = getUnsigned(packet[666:668], 'big', 0, 65535)
        
        self.csieData_331 = getUnsigned(packet[668:670], 'big', 0, 65535)
        
        self.csieData_332 = getUnsigned(packet[670:672], 'big', 0, 65535)
        
        self.csieData_333 = getUnsigned(packet[672:674], 'big', 0, 65535)
        
        self.csieData_334 = getUnsigned(packet[674:676], 'big', 0, 65535)
        
        self.csieData_335 = getUnsigned(packet[676:678], 'big', 0, 65535)
        
        self.csieData_336 = getUnsigned(packet[678:680], 'big', 0, 65535)
        
        self.csieData_337 = getUnsigned(packet[680:682], 'big', 0, 65535)
        
        self.csieData_338 = getUnsigned(packet[682:684], 'big', 0, 65535)
        
        self.csieData_339 = getUnsigned(packet[684:686], 'big', 0, 65535)
        
        self.csieData_340 = getUnsigned(packet[686:688], 'big', 0, 65535)
        
        self.csieData_341 = getUnsigned(packet[688:690], 'big', 0, 65535)
        
        self.csieData_342 = getUnsigned(packet[690:692], 'big', 0, 65535)
        
        self.csieData_343 = getUnsigned(packet[692:694], 'big', 0, 65535)
        
        self.csieData_344 = getUnsigned(packet[694:696], 'big', 0, 65535)
        
        self.csieData_345 = getUnsigned(packet[696:698], 'big', 0, 65535)
        
        self.csieData_346 = getUnsigned(packet[698:700], 'big', 0, 65535)
        
        self.csieData_347 = getUnsigned(packet[700:702], 'big', 0, 65535)
        
        self.csieData_348 = getUnsigned(packet[702:704], 'big', 0, 65535)
        
        self.csieData_349 = getUnsigned(packet[704:706], 'big', 0, 65535)
        
        self.csieData_350 = getUnsigned(packet[706:708], 'big', 0, 65535)
        
        self.csieData_351 = getUnsigned(packet[708:710], 'big', 0, 65535)
        
        self.csieData_352 = getUnsigned(packet[710:712], 'big', 0, 65535)
        
        self.csieData_353 = getUnsigned(packet[712:714], 'big', 0, 65535)
        
        self.csieData_354 = getUnsigned(packet[714:716], 'big', 0, 65535)
        
        self.csieData_355 = getUnsigned(packet[716:718], 'big', 0, 65535)
        
        self.csieData_356 = getUnsigned(packet[718:720], 'big', 0, 65535)
        
        self.csieData_357 = getUnsigned(packet[720:722], 'big', 0, 65535)
        
        self.csieData_358 = getUnsigned(packet[722:724], 'big', 0, 65535)
        
        self.csieData_359 = getUnsigned(packet[724:726], 'big', 0, 65535)
        
        self.csieData_360 = getUnsigned(packet[726:728], 'big', 0, 65535)
        
        self.csieData_361 = getUnsigned(packet[728:730], 'big', 0, 65535)
        
        self.csieData_362 = getUnsigned(packet[730:732], 'big', 0, 65535)
        
        self.csieData_363 = getUnsigned(packet[732:734], 'big', 0, 65535)
        
        self.csieData_364 = getUnsigned(packet[734:736], 'big', 0, 65535)
        
        self.csieData_365 = getUnsigned(packet[736:738], 'big', 0, 65535)
        
        self.csieData_366 = getUnsigned(packet[738:740], 'big', 0, 65535)
        
        self.csieData_367 = getUnsigned(packet[740:742], 'big', 0, 65535)
        
        self.csieData_368 = getUnsigned(packet[742:744], 'big', 0, 65535)
        
        self.csieData_369 = getUnsigned(packet[744:746], 'big', 0, 65535)
        
        self.csieData_370 = getUnsigned(packet[746:748], 'big', 0, 65535)
        
        self.csieData_371 = getUnsigned(packet[748:750], 'big', 0, 65535)
        
        self.csieData_372 = getUnsigned(packet[750:752], 'big', 0, 65535)
        
        self.csieData_373 = getUnsigned(packet[752:754], 'big', 0, 65535)
        
        self.csieData_374 = getUnsigned(packet[754:756], 'big', 0, 65535)
        
        self.csieData_375 = getUnsigned(packet[756:758], 'big', 0, 65535)
        
        self.csieData_376 = getUnsigned(packet[758:760], 'big', 0, 65535)
        
        self.csieData_377 = getUnsigned(packet[760:762], 'big', 0, 65535)
        
        self.csieData_378 = getUnsigned(packet[762:764], 'big', 0, 65535)
        
        self.csieData_379 = getUnsigned(packet[764:766], 'big', 0, 65535)
        
        self.csieData_380 = getUnsigned(packet[766:768], 'big', 0, 65535)
        
        self.csieData_381 = getUnsigned(packet[768:770], 'big', 0, 65535)
        
        self.csieData_382 = getUnsigned(packet[770:772], 'big', 0, 65535)
        
        self.csieData_383 = getUnsigned(packet[772:774], 'big', 0, 65535)
        
        self.csieData_384 = getUnsigned(packet[774:776], 'big', 0, 65535)
        
        self.csieData_385 = getUnsigned(packet[776:778], 'big', 0, 65535)
        
        self.csieData_386 = getUnsigned(packet[778:780], 'big', 0, 65535)
        
        self.csieData_387 = getUnsigned(packet[780:782], 'big', 0, 65535)
        
        self.csieData_388 = getUnsigned(packet[782:784], 'big', 0, 65535)
        
        self.csieData_389 = getUnsigned(packet[784:786], 'big', 0, 65535)
        
        self.csieData_390 = getUnsigned(packet[786:788], 'big', 0, 65535)
        
        self.csieData_391 = getUnsigned(packet[788:790], 'big', 0, 65535)
        
        self.csieData_392 = getUnsigned(packet[790:792], 'big', 0, 65535)
        
        self.csieData_393 = getUnsigned(packet[792:794], 'big', 0, 65535)
        
        self.csieData_394 = getUnsigned(packet[794:796], 'big', 0, 65535)
        
        self.csieData_395 = getUnsigned(packet[796:798], 'big', 0, 65535)
        
        self.csieData_396 = getUnsigned(packet[798:800], 'big', 0, 65535)
        
        self.csieData_397 = getUnsigned(packet[800:802], 'big', 0, 65535)
        
        self.csieData_398 = getUnsigned(packet[802:804], 'big', 0, 65535)
        
        self.csieData_399 = getUnsigned(packet[804:806], 'big', 0, 65535)
        
        self.csieData_400 = getUnsigned(packet[806:808], 'big', 0, 65535)
        
        self.csieData_401 = getUnsigned(packet[808:810], 'big', 0, 65535)
        
        self.csieData_402 = getUnsigned(packet[810:812], 'big', 0, 65535)
        
        self.csieData_403 = getUnsigned(packet[812:814], 'big', 0, 65535)
        
        self.csieData_404 = getUnsigned(packet[814:816], 'big', 0, 65535)
        
        self.csieData_405 = getUnsigned(packet[816:818], 'big', 0, 65535)
        
        self.csieData_406 = getUnsigned(packet[818:820], 'big', 0, 65535)
        
        self.csieData_407 = getUnsigned(packet[820:822], 'big', 0, 65535)
        
        self.csieData_408 = getUnsigned(packet[822:824], 'big', 0, 65535)
        
        self.csieData_409 = getUnsigned(packet[824:826], 'big', 0, 65535)
        
        self.csieData_410 = getUnsigned(packet[826:828], 'big', 0, 65535)
        
        self.csieData_411 = getUnsigned(packet[828:830], 'big', 0, 65535)
        
        self.csieData_412 = getUnsigned(packet[830:832], 'big', 0, 65535)
        
        self.csieData_413 = getUnsigned(packet[832:834], 'big', 0, 65535)
        
        self.csieData_414 = getUnsigned(packet[834:836], 'big', 0, 65535)
        
        self.csieData_415 = getUnsigned(packet[836:838], 'big', 0, 65535)
        
        self.csieData_416 = getUnsigned(packet[838:840], 'big', 0, 65535)
        
        self.csieData_417 = getUnsigned(packet[840:842], 'big', 0, 65535)
        
        self.csieData_418 = getUnsigned(packet[842:844], 'big', 0, 65535)
        
        self.csieData_419 = getUnsigned(packet[844:846], 'big', 0, 65535)
        
        self.csieData_420 = getUnsigned(packet[846:848], 'big', 0, 65535)
        
        self.csieData_421 = getUnsigned(packet[848:850], 'big', 0, 65535)
        
        self.csieData_422 = getUnsigned(packet[850:852], 'big', 0, 65535)
        
        self.csieData_423 = getUnsigned(packet[852:854], 'big', 0, 65535)
        
        self.csieData_424 = getUnsigned(packet[854:856], 'big', 0, 65535)
        
        self.csieData_425 = getUnsigned(packet[856:858], 'big', 0, 65535)
        
        self.csieData_426 = getUnsigned(packet[858:860], 'big', 0, 65535)
        
        self.csieData_427 = getUnsigned(packet[860:862], 'big', 0, 65535)
        
        self.csieData_428 = getUnsigned(packet[862:864], 'big', 0, 65535)
        
        self.csieData_429 = getUnsigned(packet[864:866], 'big', 0, 65535)
        
        self.csieData_430 = getUnsigned(packet[866:868], 'big', 0, 65535)
        
        self.csieData_431 = getUnsigned(packet[868:870], 'big', 0, 65535)
        
        self.csieData_432 = getUnsigned(packet[870:872], 'big', 0, 65535)
        
        self.csieData_433 = getUnsigned(packet[872:874], 'big', 0, 65535)
        
        self.csieData_434 = getUnsigned(packet[874:876], 'big', 0, 65535)
        
        self.csieData_435 = getUnsigned(packet[876:878], 'big', 0, 65535)
        
        self.csieData_436 = getUnsigned(packet[878:880], 'big', 0, 65535)
        
        self.csieData_437 = getUnsigned(packet[880:882], 'big', 0, 65535)
        
        self.csieData_438 = getUnsigned(packet[882:884], 'big', 0, 65535)
        
        self.csieData_439 = getUnsigned(packet[884:886], 'big', 0, 65535)
        
        self.csieData_440 = getUnsigned(packet[886:888], 'big', 0, 65535)
        
        self.csieData_441 = getUnsigned(packet[888:890], 'big', 0, 65535)
        
        self.csieData_442 = getUnsigned(packet[890:892], 'big', 0, 65535)
        
        self.csieData_443 = getUnsigned(packet[892:894], 'big', 0, 65535)
        
        self.csieData_444 = getUnsigned(packet[894:896], 'big', 0, 65535)
        
        self.csieData_445 = getUnsigned(packet[896:898], 'big', 0, 65535)
        
        self.csieData_446 = getUnsigned(packet[898:900], 'big', 0, 65535)
        
        self.csieData_447 = getUnsigned(packet[900:902], 'big', 0, 65535)
        
        self.csieData_448 = getUnsigned(packet[902:904], 'big', 0, 65535)
        
        self.csieData_449 = getUnsigned(packet[904:906], 'big', 0, 65535)
        
        self.csieData_450 = getUnsigned(packet[906:908], 'big', 0, 65535)
        
        self.csieData_451 = getUnsigned(packet[908:910], 'big', 0, 65535)
        
        self.csieData_452 = getUnsigned(packet[910:912], 'big', 0, 65535)
        
        self.csieData_453 = getUnsigned(packet[912:914], 'big', 0, 65535)
        
        self.csieData_454 = getUnsigned(packet[914:916], 'big', 0, 65535)
        
        self.csieData_455 = getUnsigned(packet[916:918], 'big', 0, 65535)
        
        self.csieData_456 = getUnsigned(packet[918:920], 'big', 0, 65535)
        
        self.csieData_457 = getUnsigned(packet[920:922], 'big', 0, 65535)
        
        self.csieData_458 = getUnsigned(packet[922:924], 'big', 0, 65535)
        
        self.csieData_459 = getUnsigned(packet[924:926], 'big', 0, 65535)
        
        self.csieData_460 = getUnsigned(packet[926:928], 'big', 0, 65535)
        
        self.csieData_461 = getUnsigned(packet[928:930], 'big', 0, 65535)
        
        self.csieData_462 = getUnsigned(packet[930:932], 'big', 0, 65535)
        
        self.csieData_463 = getUnsigned(packet[932:934], 'big', 0, 65535)
        
        self.csieData_464 = getUnsigned(packet[934:936], 'big', 0, 65535)
        
        self.csieData_465 = getUnsigned(packet[936:938], 'big', 0, 65535)
        
        self.csieData_466 = getUnsigned(packet[938:940], 'big', 0, 65535)
        
        self.csieData_467 = getUnsigned(packet[940:942], 'big', 0, 65535)
        
        self.csieData_468 = getUnsigned(packet[942:944], 'big', 0, 65535)
        
        self.csieData_469 = getUnsigned(packet[944:946], 'big', 0, 65535)
        
        self.csieData_470 = getUnsigned(packet[946:948], 'big', 0, 65535)
        
        self.csieData_471 = getUnsigned(packet[948:950], 'big', 0, 65535)
        
        self.csieData_472 = getUnsigned(packet[950:952], 'big', 0, 65535)
        
        self.csieData_473 = getUnsigned(packet[952:954], 'big', 0, 65535)
        
        self.csieData_474 = getUnsigned(packet[954:956], 'big', 0, 65535)
        
        self.csieData_475 = getUnsigned(packet[956:958], 'big', 0, 65535)
        
        self.csieData_476 = getUnsigned(packet[958:960], 'big', 0, 65535)
        
        self.csieData_477 = getUnsigned(packet[960:962], 'big', 0, 65535)
        
        self.csieData_478 = getUnsigned(packet[962:964], 'big', 0, 65535)
        
        self.csieData_479 = getUnsigned(packet[964:966], 'big', 0, 65535)
        
        self.csieData_480 = getUnsigned(packet[966:968], 'big', 0, 65535)
        
        self.csieData_481 = getUnsigned(packet[968:970], 'big', 0, 65535)
        
        self.csieData_482 = getUnsigned(packet[970:972], 'big', 0, 65535)
        
        self.csieData_483 = getUnsigned(packet[972:974], 'big', 0, 65535)
        
        self.csieData_484 = getUnsigned(packet[974:976], 'big', 0, 65535)
        
        self.csieData_485 = getUnsigned(packet[976:978], 'big', 0, 65535)
        
        self.csieData_486 = getUnsigned(packet[978:980], 'big', 0, 65535)
        
        self.csieData_487 = getUnsigned(packet[980:982], 'big', 0, 65535)
        
        self.csieData_488 = getUnsigned(packet[982:984], 'big', 0, 65535)
        
        self.csieData_489 = getUnsigned(packet[984:986], 'big', 0, 65535)
        
        self.csieData_490 = getUnsigned(packet[986:988], 'big', 0, 65535)
        
        self.csieData_491 = getUnsigned(packet[988:990], 'big', 0, 65535)
        
        self.csieData_492 = getUnsigned(packet[990:992], 'big', 0, 65535)
        
        self.csieData_493 = getUnsigned(packet[992:994], 'big', 0, 65535)
        
        self.csieData_494 = getUnsigned(packet[994:996], 'big', 0, 65535)
        
        self.csieData_495 = getUnsigned(packet[996:998], 'big', 0, 65535)
        
        self.csieData_496 = getUnsigned(packet[998:1000], 'big', 0, 65535)
        
        self.csieData_497 = getUnsigned(packet[1000:1002], 'big', 0, 65535)
        
        self.csieData_498 = getUnsigned(packet[1002:1004], 'big', 0, 65535)
        
        self.csieData_499 = getUnsigned(packet[1004:1006], 'big', 0, 65535)
        
        self.csieData_500 = getUnsigned(packet[1006:1008], 'big', 0, 65535)
        
        self.csieData_501 = getUnsigned(packet[1008:1010], 'big', 0, 65535)
        
        self.csieData_502 = getUnsigned(packet[1010:1012], 'big', 0, 65535)
        
        self.csieData_503 = getUnsigned(packet[1012:1014], 'big', 0, 65535)
        
        self.csieData_504 = getUnsigned(packet[1014:1016], 'big', 0, 65535)
        
        self.csieData_505 = getUnsigned(packet[1016:1018], 'big', 0, 65535)
        
        self.csieData_506 = getUnsigned(packet[1018:1020], 'big', 0, 65535)
        
        self.csieData_507 = getUnsigned(packet[1020:1022], 'big', 0, 65535)
        
        self.csieData_508 = getUnsigned(packet[1022:1024], 'big', 0, 65535)
        
        self.csieData_509 = getUnsigned(packet[1024:1026], 'big', 0, 65535)
        
        self.csieData_510 = getUnsigned(packet[1026:1028], 'big', 0, 65535)
        
        self.csieData_511 = getUnsigned(packet[1028:1030], 'big', 0, 65535)

        try:
            self.pktTimestamp = self.SHCOARSE
        except:
            self.pktTimestamp = 0

# This file is automatically generated, DO NOT EDIT
CONVERT_des_last_overrun_dict = { 0 : 'HK', 1 : 'SEQ', 2 : 'MEM', 3 : 'LOG', 4 : 'FP', 5 : 'TABLE', 6 : 'TLM_STORE', 7 : 'STORE_HK', 8 : 'CMD_DEBUG', 9 : 'TLM_DEBUG', 10 : 'FLASH_HK', 11 : 'MODE', 12 : 'ADCS', 13 : 'TLM_UHF', 14 : 'CMD_UHF', 15 : 'UHF_HK', 16 : 'EPS', 17 : 'PAYLOAD_HK', 18 : 'PAYLOAD_TIME', 19 : 'PAYLOAD_TLM', 20 : 'MAX_TASKS',}
def CONVERT_des_last_overrun(val):
    try:
        return CONVERT_des_last_overrun_dict[val]
    except:
        return val
CONVERT_fp_task_state_dict = { 0 : 'DISABLED', 1 : 'PASSIVE', 2 : 'ENABLED',}
def CONVERT_fp_task_state(val):
    try:
        return CONVERT_fp_task_state_dict[val]
    except:
        return val
CONVERT_fp_wp_state_wp15_dict = { 0 : 'DISABLED', 1 : 'PASSIVE', 2 : 'ENABLED',}
def CONVERT_fp_wp_state_wp15(val):
    try:
        return CONVERT_fp_wp_state_wp15_dict[val]
    except:
        return val
CONVERT_fp_wp_state_wp14_dict = { 0 : 'DISABLED', 1 : 'PASSIVE', 2 : 'ENABLED',}
def CONVERT_fp_wp_state_wp14(val):
    try:
        return CONVERT_fp_wp_state_wp14_dict[val]
    except:
        return val
CONVERT_fp_wp_state_wp13_dict = { 0 : 'DISABLED', 1 : 'PASSIVE', 2 : 'ENABLED',}
def CONVERT_fp_wp_state_wp13(val):
    try:
        return CONVERT_fp_wp_state_wp13_dict[val]
    except:
        return val
CONVERT_fp_wp_state_wp12_dict = { 0 : 'DISABLED', 1 : 'PASSIVE', 2 : 'ENABLED',}
def CONVERT_fp_wp_state_wp12(val):
    try:
        return CONVERT_fp_wp_state_wp12_dict[val]
    except:
        return val
CONVERT_fp_wp_state_wp11_dict = { 0 : 'DISABLED', 1 : 'PASSIVE', 2 : 'ENABLED',}
def CONVERT_fp_wp_state_wp11(val):
    try:
        return CONVERT_fp_wp_state_wp11_dict[val]
    except:
        return val
CONVERT_fp_wp_state_wp10_dict = { 0 : 'DISABLED', 1 : 'PASSIVE', 2 : 'ENABLED',}
def CONVERT_fp_wp_state_wp10(val):
    try:
        return CONVERT_fp_wp_state_wp10_dict[val]
    except:
        return val
CONVERT_fp_wp_state_wp9_dict = { 0 : 'DISABLED', 1 : 'PASSIVE', 2 : 'ENABLED',}
def CONVERT_fp_wp_state_wp9(val):
    try:
        return CONVERT_fp_wp_state_wp9_dict[val]
    except:
        return val
CONVERT_fp_wp_state_wp8_dict = { 0 : 'DISABLED', 1 : 'PASSIVE', 2 : 'ENABLED',}
def CONVERT_fp_wp_state_wp8(val):
    try:
        return CONVERT_fp_wp_state_wp8_dict[val]
    except:
        return val
CONVERT_fp_wp_state_wp7_dict = { 0 : 'DISABLED', 1 : 'PASSIVE', 2 : 'ENABLED',}
def CONVERT_fp_wp_state_wp7(val):
    try:
        return CONVERT_fp_wp_state_wp7_dict[val]
    except:
        return val
CONVERT_fp_wp_state_wp6_dict = { 0 : 'DISABLED', 1 : 'PASSIVE', 2 : 'ENABLED',}
def CONVERT_fp_wp_state_wp6(val):
    try:
        return CONVERT_fp_wp_state_wp6_dict[val]
    except:
        return val
CONVERT_fp_wp_state_wp5_dict = { 0 : 'DISABLED', 1 : 'PASSIVE', 2 : 'ENABLED',}
def CONVERT_fp_wp_state_wp5(val):
    try:
        return CONVERT_fp_wp_state_wp5_dict[val]
    except:
        return val
CONVERT_fp_wp_state_wp4_dict = { 0 : 'DISABLED', 1 : 'PASSIVE', 2 : 'ENABLED',}
def CONVERT_fp_wp_state_wp4(val):
    try:
        return CONVERT_fp_wp_state_wp4_dict[val]
    except:
        return val
CONVERT_fp_wp_state_wp3_dict = { 0 : 'DISABLED', 1 : 'PASSIVE', 2 : 'ENABLED',}
def CONVERT_fp_wp_state_wp3(val):
    try:
        return CONVERT_fp_wp_state_wp3_dict[val]
    except:
        return val
CONVERT_fp_wp_state_wp2_dict = { 0 : 'DISABLED', 1 : 'PASSIVE', 2 : 'ENABLED',}
def CONVERT_fp_wp_state_wp2(val):
    try:
        return CONVERT_fp_wp_state_wp2_dict[val]
    except:
        return val
CONVERT_fp_wp_state_wp1_dict = { 0 : 'DISABLED', 1 : 'PASSIVE', 2 : 'ENABLED',}
def CONVERT_fp_wp_state_wp1(val):
    try:
        return CONVERT_fp_wp_state_wp1_dict[val]
    except:
        return val
CONVERT_fp_wp_state_wp0_dict = { 0 : 'DISABLED', 1 : 'PASSIVE', 2 : 'ENABLED',}
def CONVERT_fp_wp_state_wp0(val):
    try:
        return CONVERT_fp_wp_state_wp0_dict[val]
    except:
        return val
CONVERT_nand_bb_state_dict = { 0 : 'ERROR', 1 : 'OK',}
def CONVERT_nand_bb_state(val):
    try:
        return CONVERT_nand_bb_state_dict[val]
    except:
        return val
CONVERT_seq_load_state_dict = { 0 : 'IDLE', 1 : 'IN_PROGRESS', 2 : 'VERIFIED', 3 : 'FAILED',}
def CONVERT_seq_load_state(val):
    try:
        return CONVERT_seq_load_state_dict[val]
    except:
        return val
CONVERT_seq_load_buff_dict = { 0 : 'RAM_SMALL0', 1 : 'RAM_SMALL1', 2 : 'RAM_SMALL2', 3 : 'RAM_SMALL3', 4 : 'RAM_SMALL4', 5 : 'RAM_SMALL5', 6 : 'RAM_SMALL6', 7 : 'RAM_SMALL7', 8 : 'RAM_MED0', 9 : 'RAM_MED1', 10 : 'RAM_MED2', 11 : 'RAM_MED3', 12 : 'RAM_MED4', 13 : 'RAM_LARGE0', 14 : 'RAM_LARGE1', 15 : 'RAM_LARGE2', 16 : 'RAM_LARGE3', 17 : 'RAM_LARGE4', 18 : 'NVM_SMALL0', 19 : 'NVM_SMALL1', 20 : 'NVM_SMALL2', 21 : 'NVM_SMALL3', 22 : 'NVM_SMALL4', 23 : 'NVM_SMALL5', 24 : 'NVM_SMALL6', 25 : 'NVM_SMALL7', 26 : 'NVM_SMALL8', 27 : 'NVM_SMALL9', 28 : 'NVM_SMALL10', 29 : 'NVM_SMALL11', 30 : 'NVM_SMALL12', 31 : 'NVM_SMALL13', 32 : 'NVM_SMALL14', 33 : 'NVM_SMALL15', 34 : 'NVM_SMALL16', 35 : 'NVM_SMALL17', 36 : 'NVM_SMALL18', 37 : 'NVM_SMALL19', 38 : 'NVM_SMALL20', 39 : 'NVM_SMALL21', 40 : 'NVM_SMALL22', 41 : 'NVM_SMALL23', 42 : 'NVM_SMALL24', 43 : 'NVM_SMALL25', 44 : 'NVM_SMALL26', 45 : 'NVM_SMALL27', 46 : 'NVM_SMALL28', 47 : 'NVM_SMALL29', 48 : 'NVM_SMALL30', 49 : 'NVM_SMALL31', 50 : 'NVM_SMALL32', 51 : 'NVM_SMALL33', 52 : 'NVM_SMALL34', 53 : 'NVM_SMALL35', 54 : 'NVM_SMALL36', 55 : 'NVM_SMALL37', 56 : 'NVM_SMALL38', 57 : 'NVM_SMALL39', 58 : 'NVM_SMALL40', 59 : 'NVM_SMALL41', 60 : 'NVM_SMALL42', 61 : 'NVM_SMALL43', 62 : 'NVM_SMALL44', 63 : 'NVM_SMALL45', 64 : 'NVM_SMALL46', 65 : 'NVM_SMALL47', 66 : 'NVM_SMALL48', 67 : 'NVM_SMALL49', 68 : 'NVM_SMALL50', 69 : 'NVM_SMALL51', 70 : 'NVM_SMALL52', 71 : 'NVM_SMALL53', 72 : 'NVM_SMALL54', 73 : 'NVM_SMALL55', 74 : 'NVM_SMALL56', 75 : 'NVM_SMALL57', 76 : 'NVM_SMALL58', 77 : 'NVM_SMALL59', 78 : 'NVM_SMALL60', 79 : 'NVM_SMALL61', 80 : 'NVM_SMALL62', 81 : 'NVM_SMALL63', 82 : 'NVM_SMALL64', 83 : 'NVM_SMALL65', 84 : 'NVM_SMALL66', 85 : 'NVM_SMALL67', 86 : 'NVM_SMALL68', 87 : 'NVM_SMALL69', 88 : 'NVM_SMALL70', 89 : 'NVM_SMALL71', 90 : 'NVM_SMALL72', 91 : 'NVM_SMALL73', 92 : 'NVM_SMALL74', 93 : 'NVM_SMALL75', 94 : 'NVM_SMALL76', 95 : 'NVM_SMALL77', 96 : 'NVM_SMALL78', 97 : 'NVM_SMALL79', 98 : 'NVM_SMALL80', 99 : 'NVM_SMALL81', 100 : 'NVM_SMALL82', 101 : 'NVM_SMALL83', 102 : 'NVM_SMALL84', 103 : 'NVM_SMALL85', 104 : 'NVM_SMALL86', 105 : 'NVM_SMALL87', 106 : 'NVM_SMALL88', 107 : 'NVM_SMALL89', 108 : 'NVM_SMALL90', 109 : 'NVM_SMALL91', 110 : 'NVM_SMALL92', 111 : 'NVM_SMALL93', 112 : 'NVM_SMALL94', 113 : 'NVM_SMALL95', 114 : 'NVM_SMALL96', 115 : 'NVM_SMALL97', 116 : 'NVM_SMALL98', 117 : 'NVM_SMALL99', 118 : 'NVM_SMALL100', 119 : 'NVM_SMALL101', 120 : 'NVM_SMALL102', 121 : 'NVM_SMALL103', 122 : 'NVM_SMALL104', 123 : 'NVM_SMALL105', 124 : 'NVM_SMALL106', 125 : 'NVM_SMALL107', 126 : 'NVM_SMALL108', 127 : 'NVM_SMALL109', 128 : 'NVM_SMALL110', 129 : 'NVM_SMALL111', 130 : 'NVM_SMALL112', 131 : 'NVM_SMALL113', 132 : 'NVM_SMALL114', 133 : 'NVM_SMALL115', 134 : 'NVM_SMALL116', 135 : 'NVM_SMALL117', 136 : 'NVM_SMALL118', 137 : 'NVM_SMALL119', 138 : 'NVM_SMALL120', 139 : 'NVM_SMALL121', 140 : 'NVM_SMALL122', 141 : 'NVM_SMALL123', 142 : 'NVM_SMALL124', 143 : 'NVM_SMALL125', 144 : 'NVM_SMALL126', 145 : 'NVM_SMALL127', 146 : 'NVM_MED0', 147 : 'NVM_MED1', 148 : 'NVM_MED2', 149 : 'NVM_MED3', 150 : 'NVM_MED4', 151 : 'NVM_LARGE0', 152 : 'NVM_LARGE1', 153 : 'NVM_LARGE2', 154 : 'NVM_LARGE3', 155 : 'NVM_LARGE4', 156 : 'HOLDING0',}
def CONVERT_seq_load_buff(val):
    try:
        return CONVERT_seq_load_buff_dict[val]
    except:
        return val
CONVERT_seq_state_auto_dict = { 0 : 'IDLE', 1 : 'ACTIVE', 2 : 'SUSPEND', 3 : 'PAUSE', 4 : 'STALE',}
def CONVERT_seq_state_auto(val):
    try:
        return CONVERT_seq_state_auto_dict[val]
    except:
        return val
CONVERT_seq_stop_code_auto_dict = { 0 : 'NOMINAL', 1 : 'CMD', 2 : 'INIT', 3 : 'REJECT', 4 : 'STALE', 5 : 'BAD_INT', 6 : 'INT_FAIL',}
def CONVERT_seq_stop_code_auto(val):
    try:
        return CONVERT_seq_stop_code_auto_dict[val]
    except:
        return val
CONVERT_seq_wait_type_auto_dict = { 0 : 'NONE', 1 : 'ABS', 2 : 'REL',}
def CONVERT_seq_wait_type_auto(val):
    try:
        return CONVERT_seq_wait_type_auto_dict[val]
    except:
        return val
CONVERT_seq_exec_id0_auto_dict = {}
def CONVERT_seq_exec_id0_auto(val):
    try:
        return CONVERT_seq_exec_id0_auto_dict[val]
    except:
        return val
CONVERT_seq_exec_buf0_auto_dict = { 0 : 'RAM_SMALL0', 1 : 'RAM_SMALL1', 2 : 'RAM_SMALL2', 3 : 'RAM_SMALL3', 4 : 'RAM_SMALL4', 5 : 'RAM_SMALL5', 6 : 'RAM_SMALL6', 7 : 'RAM_SMALL7', 8 : 'RAM_MED0', 9 : 'RAM_MED1', 10 : 'RAM_MED2', 11 : 'RAM_MED3', 12 : 'RAM_MED4', 13 : 'RAM_LARGE0', 14 : 'RAM_LARGE1', 15 : 'RAM_LARGE2', 16 : 'RAM_LARGE3', 17 : 'RAM_LARGE4', 18 : 'NVM_SMALL0', 19 : 'NVM_SMALL1', 20 : 'NVM_SMALL2', 21 : 'NVM_SMALL3', 22 : 'NVM_SMALL4', 23 : 'NVM_SMALL5', 24 : 'NVM_SMALL6', 25 : 'NVM_SMALL7', 26 : 'NVM_SMALL8', 27 : 'NVM_SMALL9', 28 : 'NVM_SMALL10', 29 : 'NVM_SMALL11', 30 : 'NVM_SMALL12', 31 : 'NVM_SMALL13', 32 : 'NVM_SMALL14', 33 : 'NVM_SMALL15', 34 : 'NVM_SMALL16', 35 : 'NVM_SMALL17', 36 : 'NVM_SMALL18', 37 : 'NVM_SMALL19', 38 : 'NVM_SMALL20', 39 : 'NVM_SMALL21', 40 : 'NVM_SMALL22', 41 : 'NVM_SMALL23', 42 : 'NVM_SMALL24', 43 : 'NVM_SMALL25', 44 : 'NVM_SMALL26', 45 : 'NVM_SMALL27', 46 : 'NVM_SMALL28', 47 : 'NVM_SMALL29', 48 : 'NVM_SMALL30', 49 : 'NVM_SMALL31', 50 : 'NVM_SMALL32', 51 : 'NVM_SMALL33', 52 : 'NVM_SMALL34', 53 : 'NVM_SMALL35', 54 : 'NVM_SMALL36', 55 : 'NVM_SMALL37', 56 : 'NVM_SMALL38', 57 : 'NVM_SMALL39', 58 : 'NVM_SMALL40', 59 : 'NVM_SMALL41', 60 : 'NVM_SMALL42', 61 : 'NVM_SMALL43', 62 : 'NVM_SMALL44', 63 : 'NVM_SMALL45', 64 : 'NVM_SMALL46', 65 : 'NVM_SMALL47', 66 : 'NVM_SMALL48', 67 : 'NVM_SMALL49', 68 : 'NVM_SMALL50', 69 : 'NVM_SMALL51', 70 : 'NVM_SMALL52', 71 : 'NVM_SMALL53', 72 : 'NVM_SMALL54', 73 : 'NVM_SMALL55', 74 : 'NVM_SMALL56', 75 : 'NVM_SMALL57', 76 : 'NVM_SMALL58', 77 : 'NVM_SMALL59', 78 : 'NVM_SMALL60', 79 : 'NVM_SMALL61', 80 : 'NVM_SMALL62', 81 : 'NVM_SMALL63', 82 : 'NVM_SMALL64', 83 : 'NVM_SMALL65', 84 : 'NVM_SMALL66', 85 : 'NVM_SMALL67', 86 : 'NVM_SMALL68', 87 : 'NVM_SMALL69', 88 : 'NVM_SMALL70', 89 : 'NVM_SMALL71', 90 : 'NVM_SMALL72', 91 : 'NVM_SMALL73', 92 : 'NVM_SMALL74', 93 : 'NVM_SMALL75', 94 : 'NVM_SMALL76', 95 : 'NVM_SMALL77', 96 : 'NVM_SMALL78', 97 : 'NVM_SMALL79', 98 : 'NVM_SMALL80', 99 : 'NVM_SMALL81', 100 : 'NVM_SMALL82', 101 : 'NVM_SMALL83', 102 : 'NVM_SMALL84', 103 : 'NVM_SMALL85', 104 : 'NVM_SMALL86', 105 : 'NVM_SMALL87', 106 : 'NVM_SMALL88', 107 : 'NVM_SMALL89', 108 : 'NVM_SMALL90', 109 : 'NVM_SMALL91', 110 : 'NVM_SMALL92', 111 : 'NVM_SMALL93', 112 : 'NVM_SMALL94', 113 : 'NVM_SMALL95', 114 : 'NVM_SMALL96', 115 : 'NVM_SMALL97', 116 : 'NVM_SMALL98', 117 : 'NVM_SMALL99', 118 : 'NVM_SMALL100', 119 : 'NVM_SMALL101', 120 : 'NVM_SMALL102', 121 : 'NVM_SMALL103', 122 : 'NVM_SMALL104', 123 : 'NVM_SMALL105', 124 : 'NVM_SMALL106', 125 : 'NVM_SMALL107', 126 : 'NVM_SMALL108', 127 : 'NVM_SMALL109', 128 : 'NVM_SMALL110', 129 : 'NVM_SMALL111', 130 : 'NVM_SMALL112', 131 : 'NVM_SMALL113', 132 : 'NVM_SMALL114', 133 : 'NVM_SMALL115', 134 : 'NVM_SMALL116', 135 : 'NVM_SMALL117', 136 : 'NVM_SMALL118', 137 : 'NVM_SMALL119', 138 : 'NVM_SMALL120', 139 : 'NVM_SMALL121', 140 : 'NVM_SMALL122', 141 : 'NVM_SMALL123', 142 : 'NVM_SMALL124', 143 : 'NVM_SMALL125', 144 : 'NVM_SMALL126', 145 : 'NVM_SMALL127', 146 : 'NVM_MED0', 147 : 'NVM_MED1', 148 : 'NVM_MED2', 149 : 'NVM_MED3', 150 : 'NVM_MED4', 151 : 'NVM_LARGE0', 152 : 'NVM_LARGE1', 153 : 'NVM_LARGE2', 154 : 'NVM_LARGE3', 155 : 'NVM_LARGE4', 156 : 'HOLDING0',}
def CONVERT_seq_exec_buf0_auto(val):
    try:
        return CONVERT_seq_exec_buf0_auto_dict[val]
    except:
        return val
CONVERT_seq_exec_id1_auto_dict = {}
def CONVERT_seq_exec_id1_auto(val):
    try:
        return CONVERT_seq_exec_id1_auto_dict[val]
    except:
        return val
CONVERT_seq_exec_buf1_auto_dict = { 0 : 'RAM_SMALL0', 1 : 'RAM_SMALL1', 2 : 'RAM_SMALL2', 3 : 'RAM_SMALL3', 4 : 'RAM_SMALL4', 5 : 'RAM_SMALL5', 6 : 'RAM_SMALL6', 7 : 'RAM_SMALL7', 8 : 'RAM_MED0', 9 : 'RAM_MED1', 10 : 'RAM_MED2', 11 : 'RAM_MED3', 12 : 'RAM_MED4', 13 : 'RAM_LARGE0', 14 : 'RAM_LARGE1', 15 : 'RAM_LARGE2', 16 : 'RAM_LARGE3', 17 : 'RAM_LARGE4', 18 : 'NVM_SMALL0', 19 : 'NVM_SMALL1', 20 : 'NVM_SMALL2', 21 : 'NVM_SMALL3', 22 : 'NVM_SMALL4', 23 : 'NVM_SMALL5', 24 : 'NVM_SMALL6', 25 : 'NVM_SMALL7', 26 : 'NVM_SMALL8', 27 : 'NVM_SMALL9', 28 : 'NVM_SMALL10', 29 : 'NVM_SMALL11', 30 : 'NVM_SMALL12', 31 : 'NVM_SMALL13', 32 : 'NVM_SMALL14', 33 : 'NVM_SMALL15', 34 : 'NVM_SMALL16', 35 : 'NVM_SMALL17', 36 : 'NVM_SMALL18', 37 : 'NVM_SMALL19', 38 : 'NVM_SMALL20', 39 : 'NVM_SMALL21', 40 : 'NVM_SMALL22', 41 : 'NVM_SMALL23', 42 : 'NVM_SMALL24', 43 : 'NVM_SMALL25', 44 : 'NVM_SMALL26', 45 : 'NVM_SMALL27', 46 : 'NVM_SMALL28', 47 : 'NVM_SMALL29', 48 : 'NVM_SMALL30', 49 : 'NVM_SMALL31', 50 : 'NVM_SMALL32', 51 : 'NVM_SMALL33', 52 : 'NVM_SMALL34', 53 : 'NVM_SMALL35', 54 : 'NVM_SMALL36', 55 : 'NVM_SMALL37', 56 : 'NVM_SMALL38', 57 : 'NVM_SMALL39', 58 : 'NVM_SMALL40', 59 : 'NVM_SMALL41', 60 : 'NVM_SMALL42', 61 : 'NVM_SMALL43', 62 : 'NVM_SMALL44', 63 : 'NVM_SMALL45', 64 : 'NVM_SMALL46', 65 : 'NVM_SMALL47', 66 : 'NVM_SMALL48', 67 : 'NVM_SMALL49', 68 : 'NVM_SMALL50', 69 : 'NVM_SMALL51', 70 : 'NVM_SMALL52', 71 : 'NVM_SMALL53', 72 : 'NVM_SMALL54', 73 : 'NVM_SMALL55', 74 : 'NVM_SMALL56', 75 : 'NVM_SMALL57', 76 : 'NVM_SMALL58', 77 : 'NVM_SMALL59', 78 : 'NVM_SMALL60', 79 : 'NVM_SMALL61', 80 : 'NVM_SMALL62', 81 : 'NVM_SMALL63', 82 : 'NVM_SMALL64', 83 : 'NVM_SMALL65', 84 : 'NVM_SMALL66', 85 : 'NVM_SMALL67', 86 : 'NVM_SMALL68', 87 : 'NVM_SMALL69', 88 : 'NVM_SMALL70', 89 : 'NVM_SMALL71', 90 : 'NVM_SMALL72', 91 : 'NVM_SMALL73', 92 : 'NVM_SMALL74', 93 : 'NVM_SMALL75', 94 : 'NVM_SMALL76', 95 : 'NVM_SMALL77', 96 : 'NVM_SMALL78', 97 : 'NVM_SMALL79', 98 : 'NVM_SMALL80', 99 : 'NVM_SMALL81', 100 : 'NVM_SMALL82', 101 : 'NVM_SMALL83', 102 : 'NVM_SMALL84', 103 : 'NVM_SMALL85', 104 : 'NVM_SMALL86', 105 : 'NVM_SMALL87', 106 : 'NVM_SMALL88', 107 : 'NVM_SMALL89', 108 : 'NVM_SMALL90', 109 : 'NVM_SMALL91', 110 : 'NVM_SMALL92', 111 : 'NVM_SMALL93', 112 : 'NVM_SMALL94', 113 : 'NVM_SMALL95', 114 : 'NVM_SMALL96', 115 : 'NVM_SMALL97', 116 : 'NVM_SMALL98', 117 : 'NVM_SMALL99', 118 : 'NVM_SMALL100', 119 : 'NVM_SMALL101', 120 : 'NVM_SMALL102', 121 : 'NVM_SMALL103', 122 : 'NVM_SMALL104', 123 : 'NVM_SMALL105', 124 : 'NVM_SMALL106', 125 : 'NVM_SMALL107', 126 : 'NVM_SMALL108', 127 : 'NVM_SMALL109', 128 : 'NVM_SMALL110', 129 : 'NVM_SMALL111', 130 : 'NVM_SMALL112', 131 : 'NVM_SMALL113', 132 : 'NVM_SMALL114', 133 : 'NVM_SMALL115', 134 : 'NVM_SMALL116', 135 : 'NVM_SMALL117', 136 : 'NVM_SMALL118', 137 : 'NVM_SMALL119', 138 : 'NVM_SMALL120', 139 : 'NVM_SMALL121', 140 : 'NVM_SMALL122', 141 : 'NVM_SMALL123', 142 : 'NVM_SMALL124', 143 : 'NVM_SMALL125', 144 : 'NVM_SMALL126', 145 : 'NVM_SMALL127', 146 : 'NVM_MED0', 147 : 'NVM_MED1', 148 : 'NVM_MED2', 149 : 'NVM_MED3', 150 : 'NVM_MED4', 151 : 'NVM_LARGE0', 152 : 'NVM_LARGE1', 153 : 'NVM_LARGE2', 154 : 'NVM_LARGE3', 155 : 'NVM_LARGE4', 156 : 'HOLDING0',}
def CONVERT_seq_exec_buf1_auto(val):
    try:
        return CONVERT_seq_exec_buf1_auto_dict[val]
    except:
        return val
CONVERT_seq_exec_id2_auto_dict = {}
def CONVERT_seq_exec_id2_auto(val):
    try:
        return CONVERT_seq_exec_id2_auto_dict[val]
    except:
        return val
CONVERT_seq_exec_buf2_auto_dict = { 0 : 'RAM_SMALL0', 1 : 'RAM_SMALL1', 2 : 'RAM_SMALL2', 3 : 'RAM_SMALL3', 4 : 'RAM_SMALL4', 5 : 'RAM_SMALL5', 6 : 'RAM_SMALL6', 7 : 'RAM_SMALL7', 8 : 'RAM_MED0', 9 : 'RAM_MED1', 10 : 'RAM_MED2', 11 : 'RAM_MED3', 12 : 'RAM_MED4', 13 : 'RAM_LARGE0', 14 : 'RAM_LARGE1', 15 : 'RAM_LARGE2', 16 : 'RAM_LARGE3', 17 : 'RAM_LARGE4', 18 : 'NVM_SMALL0', 19 : 'NVM_SMALL1', 20 : 'NVM_SMALL2', 21 : 'NVM_SMALL3', 22 : 'NVM_SMALL4', 23 : 'NVM_SMALL5', 24 : 'NVM_SMALL6', 25 : 'NVM_SMALL7', 26 : 'NVM_SMALL8', 27 : 'NVM_SMALL9', 28 : 'NVM_SMALL10', 29 : 'NVM_SMALL11', 30 : 'NVM_SMALL12', 31 : 'NVM_SMALL13', 32 : 'NVM_SMALL14', 33 : 'NVM_SMALL15', 34 : 'NVM_SMALL16', 35 : 'NVM_SMALL17', 36 : 'NVM_SMALL18', 37 : 'NVM_SMALL19', 38 : 'NVM_SMALL20', 39 : 'NVM_SMALL21', 40 : 'NVM_SMALL22', 41 : 'NVM_SMALL23', 42 : 'NVM_SMALL24', 43 : 'NVM_SMALL25', 44 : 'NVM_SMALL26', 45 : 'NVM_SMALL27', 46 : 'NVM_SMALL28', 47 : 'NVM_SMALL29', 48 : 'NVM_SMALL30', 49 : 'NVM_SMALL31', 50 : 'NVM_SMALL32', 51 : 'NVM_SMALL33', 52 : 'NVM_SMALL34', 53 : 'NVM_SMALL35', 54 : 'NVM_SMALL36', 55 : 'NVM_SMALL37', 56 : 'NVM_SMALL38', 57 : 'NVM_SMALL39', 58 : 'NVM_SMALL40', 59 : 'NVM_SMALL41', 60 : 'NVM_SMALL42', 61 : 'NVM_SMALL43', 62 : 'NVM_SMALL44', 63 : 'NVM_SMALL45', 64 : 'NVM_SMALL46', 65 : 'NVM_SMALL47', 66 : 'NVM_SMALL48', 67 : 'NVM_SMALL49', 68 : 'NVM_SMALL50', 69 : 'NVM_SMALL51', 70 : 'NVM_SMALL52', 71 : 'NVM_SMALL53', 72 : 'NVM_SMALL54', 73 : 'NVM_SMALL55', 74 : 'NVM_SMALL56', 75 : 'NVM_SMALL57', 76 : 'NVM_SMALL58', 77 : 'NVM_SMALL59', 78 : 'NVM_SMALL60', 79 : 'NVM_SMALL61', 80 : 'NVM_SMALL62', 81 : 'NVM_SMALL63', 82 : 'NVM_SMALL64', 83 : 'NVM_SMALL65', 84 : 'NVM_SMALL66', 85 : 'NVM_SMALL67', 86 : 'NVM_SMALL68', 87 : 'NVM_SMALL69', 88 : 'NVM_SMALL70', 89 : 'NVM_SMALL71', 90 : 'NVM_SMALL72', 91 : 'NVM_SMALL73', 92 : 'NVM_SMALL74', 93 : 'NVM_SMALL75', 94 : 'NVM_SMALL76', 95 : 'NVM_SMALL77', 96 : 'NVM_SMALL78', 97 : 'NVM_SMALL79', 98 : 'NVM_SMALL80', 99 : 'NVM_SMALL81', 100 : 'NVM_SMALL82', 101 : 'NVM_SMALL83', 102 : 'NVM_SMALL84', 103 : 'NVM_SMALL85', 104 : 'NVM_SMALL86', 105 : 'NVM_SMALL87', 106 : 'NVM_SMALL88', 107 : 'NVM_SMALL89', 108 : 'NVM_SMALL90', 109 : 'NVM_SMALL91', 110 : 'NVM_SMALL92', 111 : 'NVM_SMALL93', 112 : 'NVM_SMALL94', 113 : 'NVM_SMALL95', 114 : 'NVM_SMALL96', 115 : 'NVM_SMALL97', 116 : 'NVM_SMALL98', 117 : 'NVM_SMALL99', 118 : 'NVM_SMALL100', 119 : 'NVM_SMALL101', 120 : 'NVM_SMALL102', 121 : 'NVM_SMALL103', 122 : 'NVM_SMALL104', 123 : 'NVM_SMALL105', 124 : 'NVM_SMALL106', 125 : 'NVM_SMALL107', 126 : 'NVM_SMALL108', 127 : 'NVM_SMALL109', 128 : 'NVM_SMALL110', 129 : 'NVM_SMALL111', 130 : 'NVM_SMALL112', 131 : 'NVM_SMALL113', 132 : 'NVM_SMALL114', 133 : 'NVM_SMALL115', 134 : 'NVM_SMALL116', 135 : 'NVM_SMALL117', 136 : 'NVM_SMALL118', 137 : 'NVM_SMALL119', 138 : 'NVM_SMALL120', 139 : 'NVM_SMALL121', 140 : 'NVM_SMALL122', 141 : 'NVM_SMALL123', 142 : 'NVM_SMALL124', 143 : 'NVM_SMALL125', 144 : 'NVM_SMALL126', 145 : 'NVM_SMALL127', 146 : 'NVM_MED0', 147 : 'NVM_MED1', 148 : 'NVM_MED2', 149 : 'NVM_MED3', 150 : 'NVM_MED4', 151 : 'NVM_LARGE0', 152 : 'NVM_LARGE1', 153 : 'NVM_LARGE2', 154 : 'NVM_LARGE3', 155 : 'NVM_LARGE4', 156 : 'HOLDING0',}
def CONVERT_seq_exec_buf2_auto(val):
    try:
        return CONVERT_seq_exec_buf2_auto_dict[val]
    except:
        return val
CONVERT_seq_state_op1_dict = { 0 : 'IDLE', 1 : 'ACTIVE', 2 : 'SUSPEND', 3 : 'PAUSE', 4 : 'STALE',}
def CONVERT_seq_state_op1(val):
    try:
        return CONVERT_seq_state_op1_dict[val]
    except:
        return val
CONVERT_seq_stop_code_op1_dict = { 0 : 'NOMINAL', 1 : 'CMD', 2 : 'INIT', 3 : 'REJECT', 4 : 'STALE', 5 : 'BAD_INT', 6 : 'INT_FAIL',}
def CONVERT_seq_stop_code_op1(val):
    try:
        return CONVERT_seq_stop_code_op1_dict[val]
    except:
        return val
CONVERT_seq_wait_type_op1_dict = { 0 : 'NONE', 1 : 'ABS', 2 : 'REL',}
def CONVERT_seq_wait_type_op1(val):
    try:
        return CONVERT_seq_wait_type_op1_dict[val]
    except:
        return val
CONVERT_seq_exec_id0_op1_dict = {}
def CONVERT_seq_exec_id0_op1(val):
    try:
        return CONVERT_seq_exec_id0_op1_dict[val]
    except:
        return val
CONVERT_seq_exec_buf0_op1_dict = { 0 : 'RAM_SMALL0', 1 : 'RAM_SMALL1', 2 : 'RAM_SMALL2', 3 : 'RAM_SMALL3', 4 : 'RAM_SMALL4', 5 : 'RAM_SMALL5', 6 : 'RAM_SMALL6', 7 : 'RAM_SMALL7', 8 : 'RAM_MED0', 9 : 'RAM_MED1', 10 : 'RAM_MED2', 11 : 'RAM_MED3', 12 : 'RAM_MED4', 13 : 'RAM_LARGE0', 14 : 'RAM_LARGE1', 15 : 'RAM_LARGE2', 16 : 'RAM_LARGE3', 17 : 'RAM_LARGE4', 18 : 'NVM_SMALL0', 19 : 'NVM_SMALL1', 20 : 'NVM_SMALL2', 21 : 'NVM_SMALL3', 22 : 'NVM_SMALL4', 23 : 'NVM_SMALL5', 24 : 'NVM_SMALL6', 25 : 'NVM_SMALL7', 26 : 'NVM_SMALL8', 27 : 'NVM_SMALL9', 28 : 'NVM_SMALL10', 29 : 'NVM_SMALL11', 30 : 'NVM_SMALL12', 31 : 'NVM_SMALL13', 32 : 'NVM_SMALL14', 33 : 'NVM_SMALL15', 34 : 'NVM_SMALL16', 35 : 'NVM_SMALL17', 36 : 'NVM_SMALL18', 37 : 'NVM_SMALL19', 38 : 'NVM_SMALL20', 39 : 'NVM_SMALL21', 40 : 'NVM_SMALL22', 41 : 'NVM_SMALL23', 42 : 'NVM_SMALL24', 43 : 'NVM_SMALL25', 44 : 'NVM_SMALL26', 45 : 'NVM_SMALL27', 46 : 'NVM_SMALL28', 47 : 'NVM_SMALL29', 48 : 'NVM_SMALL30', 49 : 'NVM_SMALL31', 50 : 'NVM_SMALL32', 51 : 'NVM_SMALL33', 52 : 'NVM_SMALL34', 53 : 'NVM_SMALL35', 54 : 'NVM_SMALL36', 55 : 'NVM_SMALL37', 56 : 'NVM_SMALL38', 57 : 'NVM_SMALL39', 58 : 'NVM_SMALL40', 59 : 'NVM_SMALL41', 60 : 'NVM_SMALL42', 61 : 'NVM_SMALL43', 62 : 'NVM_SMALL44', 63 : 'NVM_SMALL45', 64 : 'NVM_SMALL46', 65 : 'NVM_SMALL47', 66 : 'NVM_SMALL48', 67 : 'NVM_SMALL49', 68 : 'NVM_SMALL50', 69 : 'NVM_SMALL51', 70 : 'NVM_SMALL52', 71 : 'NVM_SMALL53', 72 : 'NVM_SMALL54', 73 : 'NVM_SMALL55', 74 : 'NVM_SMALL56', 75 : 'NVM_SMALL57', 76 : 'NVM_SMALL58', 77 : 'NVM_SMALL59', 78 : 'NVM_SMALL60', 79 : 'NVM_SMALL61', 80 : 'NVM_SMALL62', 81 : 'NVM_SMALL63', 82 : 'NVM_SMALL64', 83 : 'NVM_SMALL65', 84 : 'NVM_SMALL66', 85 : 'NVM_SMALL67', 86 : 'NVM_SMALL68', 87 : 'NVM_SMALL69', 88 : 'NVM_SMALL70', 89 : 'NVM_SMALL71', 90 : 'NVM_SMALL72', 91 : 'NVM_SMALL73', 92 : 'NVM_SMALL74', 93 : 'NVM_SMALL75', 94 : 'NVM_SMALL76', 95 : 'NVM_SMALL77', 96 : 'NVM_SMALL78', 97 : 'NVM_SMALL79', 98 : 'NVM_SMALL80', 99 : 'NVM_SMALL81', 100 : 'NVM_SMALL82', 101 : 'NVM_SMALL83', 102 : 'NVM_SMALL84', 103 : 'NVM_SMALL85', 104 : 'NVM_SMALL86', 105 : 'NVM_SMALL87', 106 : 'NVM_SMALL88', 107 : 'NVM_SMALL89', 108 : 'NVM_SMALL90', 109 : 'NVM_SMALL91', 110 : 'NVM_SMALL92', 111 : 'NVM_SMALL93', 112 : 'NVM_SMALL94', 113 : 'NVM_SMALL95', 114 : 'NVM_SMALL96', 115 : 'NVM_SMALL97', 116 : 'NVM_SMALL98', 117 : 'NVM_SMALL99', 118 : 'NVM_SMALL100', 119 : 'NVM_SMALL101', 120 : 'NVM_SMALL102', 121 : 'NVM_SMALL103', 122 : 'NVM_SMALL104', 123 : 'NVM_SMALL105', 124 : 'NVM_SMALL106', 125 : 'NVM_SMALL107', 126 : 'NVM_SMALL108', 127 : 'NVM_SMALL109', 128 : 'NVM_SMALL110', 129 : 'NVM_SMALL111', 130 : 'NVM_SMALL112', 131 : 'NVM_SMALL113', 132 : 'NVM_SMALL114', 133 : 'NVM_SMALL115', 134 : 'NVM_SMALL116', 135 : 'NVM_SMALL117', 136 : 'NVM_SMALL118', 137 : 'NVM_SMALL119', 138 : 'NVM_SMALL120', 139 : 'NVM_SMALL121', 140 : 'NVM_SMALL122', 141 : 'NVM_SMALL123', 142 : 'NVM_SMALL124', 143 : 'NVM_SMALL125', 144 : 'NVM_SMALL126', 145 : 'NVM_SMALL127', 146 : 'NVM_MED0', 147 : 'NVM_MED1', 148 : 'NVM_MED2', 149 : 'NVM_MED3', 150 : 'NVM_MED4', 151 : 'NVM_LARGE0', 152 : 'NVM_LARGE1', 153 : 'NVM_LARGE2', 154 : 'NVM_LARGE3', 155 : 'NVM_LARGE4', 156 : 'HOLDING0',}
def CONVERT_seq_exec_buf0_op1(val):
    try:
        return CONVERT_seq_exec_buf0_op1_dict[val]
    except:
        return val
CONVERT_seq_exec_id1_op1_dict = {}
def CONVERT_seq_exec_id1_op1(val):
    try:
        return CONVERT_seq_exec_id1_op1_dict[val]
    except:
        return val
CONVERT_seq_exec_buf1_op1_dict = { 0 : 'RAM_SMALL0', 1 : 'RAM_SMALL1', 2 : 'RAM_SMALL2', 3 : 'RAM_SMALL3', 4 : 'RAM_SMALL4', 5 : 'RAM_SMALL5', 6 : 'RAM_SMALL6', 7 : 'RAM_SMALL7', 8 : 'RAM_MED0', 9 : 'RAM_MED1', 10 : 'RAM_MED2', 11 : 'RAM_MED3', 12 : 'RAM_MED4', 13 : 'RAM_LARGE0', 14 : 'RAM_LARGE1', 15 : 'RAM_LARGE2', 16 : 'RAM_LARGE3', 17 : 'RAM_LARGE4', 18 : 'NVM_SMALL0', 19 : 'NVM_SMALL1', 20 : 'NVM_SMALL2', 21 : 'NVM_SMALL3', 22 : 'NVM_SMALL4', 23 : 'NVM_SMALL5', 24 : 'NVM_SMALL6', 25 : 'NVM_SMALL7', 26 : 'NVM_SMALL8', 27 : 'NVM_SMALL9', 28 : 'NVM_SMALL10', 29 : 'NVM_SMALL11', 30 : 'NVM_SMALL12', 31 : 'NVM_SMALL13', 32 : 'NVM_SMALL14', 33 : 'NVM_SMALL15', 34 : 'NVM_SMALL16', 35 : 'NVM_SMALL17', 36 : 'NVM_SMALL18', 37 : 'NVM_SMALL19', 38 : 'NVM_SMALL20', 39 : 'NVM_SMALL21', 40 : 'NVM_SMALL22', 41 : 'NVM_SMALL23', 42 : 'NVM_SMALL24', 43 : 'NVM_SMALL25', 44 : 'NVM_SMALL26', 45 : 'NVM_SMALL27', 46 : 'NVM_SMALL28', 47 : 'NVM_SMALL29', 48 : 'NVM_SMALL30', 49 : 'NVM_SMALL31', 50 : 'NVM_SMALL32', 51 : 'NVM_SMALL33', 52 : 'NVM_SMALL34', 53 : 'NVM_SMALL35', 54 : 'NVM_SMALL36', 55 : 'NVM_SMALL37', 56 : 'NVM_SMALL38', 57 : 'NVM_SMALL39', 58 : 'NVM_SMALL40', 59 : 'NVM_SMALL41', 60 : 'NVM_SMALL42', 61 : 'NVM_SMALL43', 62 : 'NVM_SMALL44', 63 : 'NVM_SMALL45', 64 : 'NVM_SMALL46', 65 : 'NVM_SMALL47', 66 : 'NVM_SMALL48', 67 : 'NVM_SMALL49', 68 : 'NVM_SMALL50', 69 : 'NVM_SMALL51', 70 : 'NVM_SMALL52', 71 : 'NVM_SMALL53', 72 : 'NVM_SMALL54', 73 : 'NVM_SMALL55', 74 : 'NVM_SMALL56', 75 : 'NVM_SMALL57', 76 : 'NVM_SMALL58', 77 : 'NVM_SMALL59', 78 : 'NVM_SMALL60', 79 : 'NVM_SMALL61', 80 : 'NVM_SMALL62', 81 : 'NVM_SMALL63', 82 : 'NVM_SMALL64', 83 : 'NVM_SMALL65', 84 : 'NVM_SMALL66', 85 : 'NVM_SMALL67', 86 : 'NVM_SMALL68', 87 : 'NVM_SMALL69', 88 : 'NVM_SMALL70', 89 : 'NVM_SMALL71', 90 : 'NVM_SMALL72', 91 : 'NVM_SMALL73', 92 : 'NVM_SMALL74', 93 : 'NVM_SMALL75', 94 : 'NVM_SMALL76', 95 : 'NVM_SMALL77', 96 : 'NVM_SMALL78', 97 : 'NVM_SMALL79', 98 : 'NVM_SMALL80', 99 : 'NVM_SMALL81', 100 : 'NVM_SMALL82', 101 : 'NVM_SMALL83', 102 : 'NVM_SMALL84', 103 : 'NVM_SMALL85', 104 : 'NVM_SMALL86', 105 : 'NVM_SMALL87', 106 : 'NVM_SMALL88', 107 : 'NVM_SMALL89', 108 : 'NVM_SMALL90', 109 : 'NVM_SMALL91', 110 : 'NVM_SMALL92', 111 : 'NVM_SMALL93', 112 : 'NVM_SMALL94', 113 : 'NVM_SMALL95', 114 : 'NVM_SMALL96', 115 : 'NVM_SMALL97', 116 : 'NVM_SMALL98', 117 : 'NVM_SMALL99', 118 : 'NVM_SMALL100', 119 : 'NVM_SMALL101', 120 : 'NVM_SMALL102', 121 : 'NVM_SMALL103', 122 : 'NVM_SMALL104', 123 : 'NVM_SMALL105', 124 : 'NVM_SMALL106', 125 : 'NVM_SMALL107', 126 : 'NVM_SMALL108', 127 : 'NVM_SMALL109', 128 : 'NVM_SMALL110', 129 : 'NVM_SMALL111', 130 : 'NVM_SMALL112', 131 : 'NVM_SMALL113', 132 : 'NVM_SMALL114', 133 : 'NVM_SMALL115', 134 : 'NVM_SMALL116', 135 : 'NVM_SMALL117', 136 : 'NVM_SMALL118', 137 : 'NVM_SMALL119', 138 : 'NVM_SMALL120', 139 : 'NVM_SMALL121', 140 : 'NVM_SMALL122', 141 : 'NVM_SMALL123', 142 : 'NVM_SMALL124', 143 : 'NVM_SMALL125', 144 : 'NVM_SMALL126', 145 : 'NVM_SMALL127', 146 : 'NVM_MED0', 147 : 'NVM_MED1', 148 : 'NVM_MED2', 149 : 'NVM_MED3', 150 : 'NVM_MED4', 151 : 'NVM_LARGE0', 152 : 'NVM_LARGE1', 153 : 'NVM_LARGE2', 154 : 'NVM_LARGE3', 155 : 'NVM_LARGE4', 156 : 'HOLDING0',}
def CONVERT_seq_exec_buf1_op1(val):
    try:
        return CONVERT_seq_exec_buf1_op1_dict[val]
    except:
        return val
CONVERT_seq_exec_id2_op1_dict = {}
def CONVERT_seq_exec_id2_op1(val):
    try:
        return CONVERT_seq_exec_id2_op1_dict[val]
    except:
        return val
CONVERT_seq_exec_buf2_op1_dict = { 0 : 'RAM_SMALL0', 1 : 'RAM_SMALL1', 2 : 'RAM_SMALL2', 3 : 'RAM_SMALL3', 4 : 'RAM_SMALL4', 5 : 'RAM_SMALL5', 6 : 'RAM_SMALL6', 7 : 'RAM_SMALL7', 8 : 'RAM_MED0', 9 : 'RAM_MED1', 10 : 'RAM_MED2', 11 : 'RAM_MED3', 12 : 'RAM_MED4', 13 : 'RAM_LARGE0', 14 : 'RAM_LARGE1', 15 : 'RAM_LARGE2', 16 : 'RAM_LARGE3', 17 : 'RAM_LARGE4', 18 : 'NVM_SMALL0', 19 : 'NVM_SMALL1', 20 : 'NVM_SMALL2', 21 : 'NVM_SMALL3', 22 : 'NVM_SMALL4', 23 : 'NVM_SMALL5', 24 : 'NVM_SMALL6', 25 : 'NVM_SMALL7', 26 : 'NVM_SMALL8', 27 : 'NVM_SMALL9', 28 : 'NVM_SMALL10', 29 : 'NVM_SMALL11', 30 : 'NVM_SMALL12', 31 : 'NVM_SMALL13', 32 : 'NVM_SMALL14', 33 : 'NVM_SMALL15', 34 : 'NVM_SMALL16', 35 : 'NVM_SMALL17', 36 : 'NVM_SMALL18', 37 : 'NVM_SMALL19', 38 : 'NVM_SMALL20', 39 : 'NVM_SMALL21', 40 : 'NVM_SMALL22', 41 : 'NVM_SMALL23', 42 : 'NVM_SMALL24', 43 : 'NVM_SMALL25', 44 : 'NVM_SMALL26', 45 : 'NVM_SMALL27', 46 : 'NVM_SMALL28', 47 : 'NVM_SMALL29', 48 : 'NVM_SMALL30', 49 : 'NVM_SMALL31', 50 : 'NVM_SMALL32', 51 : 'NVM_SMALL33', 52 : 'NVM_SMALL34', 53 : 'NVM_SMALL35', 54 : 'NVM_SMALL36', 55 : 'NVM_SMALL37', 56 : 'NVM_SMALL38', 57 : 'NVM_SMALL39', 58 : 'NVM_SMALL40', 59 : 'NVM_SMALL41', 60 : 'NVM_SMALL42', 61 : 'NVM_SMALL43', 62 : 'NVM_SMALL44', 63 : 'NVM_SMALL45', 64 : 'NVM_SMALL46', 65 : 'NVM_SMALL47', 66 : 'NVM_SMALL48', 67 : 'NVM_SMALL49', 68 : 'NVM_SMALL50', 69 : 'NVM_SMALL51', 70 : 'NVM_SMALL52', 71 : 'NVM_SMALL53', 72 : 'NVM_SMALL54', 73 : 'NVM_SMALL55', 74 : 'NVM_SMALL56', 75 : 'NVM_SMALL57', 76 : 'NVM_SMALL58', 77 : 'NVM_SMALL59', 78 : 'NVM_SMALL60', 79 : 'NVM_SMALL61', 80 : 'NVM_SMALL62', 81 : 'NVM_SMALL63', 82 : 'NVM_SMALL64', 83 : 'NVM_SMALL65', 84 : 'NVM_SMALL66', 85 : 'NVM_SMALL67', 86 : 'NVM_SMALL68', 87 : 'NVM_SMALL69', 88 : 'NVM_SMALL70', 89 : 'NVM_SMALL71', 90 : 'NVM_SMALL72', 91 : 'NVM_SMALL73', 92 : 'NVM_SMALL74', 93 : 'NVM_SMALL75', 94 : 'NVM_SMALL76', 95 : 'NVM_SMALL77', 96 : 'NVM_SMALL78', 97 : 'NVM_SMALL79', 98 : 'NVM_SMALL80', 99 : 'NVM_SMALL81', 100 : 'NVM_SMALL82', 101 : 'NVM_SMALL83', 102 : 'NVM_SMALL84', 103 : 'NVM_SMALL85', 104 : 'NVM_SMALL86', 105 : 'NVM_SMALL87', 106 : 'NVM_SMALL88', 107 : 'NVM_SMALL89', 108 : 'NVM_SMALL90', 109 : 'NVM_SMALL91', 110 : 'NVM_SMALL92', 111 : 'NVM_SMALL93', 112 : 'NVM_SMALL94', 113 : 'NVM_SMALL95', 114 : 'NVM_SMALL96', 115 : 'NVM_SMALL97', 116 : 'NVM_SMALL98', 117 : 'NVM_SMALL99', 118 : 'NVM_SMALL100', 119 : 'NVM_SMALL101', 120 : 'NVM_SMALL102', 121 : 'NVM_SMALL103', 122 : 'NVM_SMALL104', 123 : 'NVM_SMALL105', 124 : 'NVM_SMALL106', 125 : 'NVM_SMALL107', 126 : 'NVM_SMALL108', 127 : 'NVM_SMALL109', 128 : 'NVM_SMALL110', 129 : 'NVM_SMALL111', 130 : 'NVM_SMALL112', 131 : 'NVM_SMALL113', 132 : 'NVM_SMALL114', 133 : 'NVM_SMALL115', 134 : 'NVM_SMALL116', 135 : 'NVM_SMALL117', 136 : 'NVM_SMALL118', 137 : 'NVM_SMALL119', 138 : 'NVM_SMALL120', 139 : 'NVM_SMALL121', 140 : 'NVM_SMALL122', 141 : 'NVM_SMALL123', 142 : 'NVM_SMALL124', 143 : 'NVM_SMALL125', 144 : 'NVM_SMALL126', 145 : 'NVM_SMALL127', 146 : 'NVM_MED0', 147 : 'NVM_MED1', 148 : 'NVM_MED2', 149 : 'NVM_MED3', 150 : 'NVM_MED4', 151 : 'NVM_LARGE0', 152 : 'NVM_LARGE1', 153 : 'NVM_LARGE2', 154 : 'NVM_LARGE3', 155 : 'NVM_LARGE4', 156 : 'HOLDING0',}
def CONVERT_seq_exec_buf2_op1(val):
    try:
        return CONVERT_seq_exec_buf2_op1_dict[val]
    except:
        return val
CONVERT_seq_state_op2_dict = { 0 : 'IDLE', 1 : 'ACTIVE', 2 : 'SUSPEND', 3 : 'PAUSE', 4 : 'STALE',}
def CONVERT_seq_state_op2(val):
    try:
        return CONVERT_seq_state_op2_dict[val]
    except:
        return val
CONVERT_seq_stop_code_op2_dict = { 0 : 'NOMINAL', 1 : 'CMD', 2 : 'INIT', 3 : 'REJECT', 4 : 'STALE', 5 : 'BAD_INT', 6 : 'INT_FAIL',}
def CONVERT_seq_stop_code_op2(val):
    try:
        return CONVERT_seq_stop_code_op2_dict[val]
    except:
        return val
CONVERT_seq_wait_type_op2_dict = { 0 : 'NONE', 1 : 'ABS', 2 : 'REL',}
def CONVERT_seq_wait_type_op2(val):
    try:
        return CONVERT_seq_wait_type_op2_dict[val]
    except:
        return val
CONVERT_seq_exec_id0_op2_dict = {}
def CONVERT_seq_exec_id0_op2(val):
    try:
        return CONVERT_seq_exec_id0_op2_dict[val]
    except:
        return val
CONVERT_seq_exec_buf0_op2_dict = { 0 : 'RAM_SMALL0', 1 : 'RAM_SMALL1', 2 : 'RAM_SMALL2', 3 : 'RAM_SMALL3', 4 : 'RAM_SMALL4', 5 : 'RAM_SMALL5', 6 : 'RAM_SMALL6', 7 : 'RAM_SMALL7', 8 : 'RAM_MED0', 9 : 'RAM_MED1', 10 : 'RAM_MED2', 11 : 'RAM_MED3', 12 : 'RAM_MED4', 13 : 'RAM_LARGE0', 14 : 'RAM_LARGE1', 15 : 'RAM_LARGE2', 16 : 'RAM_LARGE3', 17 : 'RAM_LARGE4', 18 : 'NVM_SMALL0', 19 : 'NVM_SMALL1', 20 : 'NVM_SMALL2', 21 : 'NVM_SMALL3', 22 : 'NVM_SMALL4', 23 : 'NVM_SMALL5', 24 : 'NVM_SMALL6', 25 : 'NVM_SMALL7', 26 : 'NVM_SMALL8', 27 : 'NVM_SMALL9', 28 : 'NVM_SMALL10', 29 : 'NVM_SMALL11', 30 : 'NVM_SMALL12', 31 : 'NVM_SMALL13', 32 : 'NVM_SMALL14', 33 : 'NVM_SMALL15', 34 : 'NVM_SMALL16', 35 : 'NVM_SMALL17', 36 : 'NVM_SMALL18', 37 : 'NVM_SMALL19', 38 : 'NVM_SMALL20', 39 : 'NVM_SMALL21', 40 : 'NVM_SMALL22', 41 : 'NVM_SMALL23', 42 : 'NVM_SMALL24', 43 : 'NVM_SMALL25', 44 : 'NVM_SMALL26', 45 : 'NVM_SMALL27', 46 : 'NVM_SMALL28', 47 : 'NVM_SMALL29', 48 : 'NVM_SMALL30', 49 : 'NVM_SMALL31', 50 : 'NVM_SMALL32', 51 : 'NVM_SMALL33', 52 : 'NVM_SMALL34', 53 : 'NVM_SMALL35', 54 : 'NVM_SMALL36', 55 : 'NVM_SMALL37', 56 : 'NVM_SMALL38', 57 : 'NVM_SMALL39', 58 : 'NVM_SMALL40', 59 : 'NVM_SMALL41', 60 : 'NVM_SMALL42', 61 : 'NVM_SMALL43', 62 : 'NVM_SMALL44', 63 : 'NVM_SMALL45', 64 : 'NVM_SMALL46', 65 : 'NVM_SMALL47', 66 : 'NVM_SMALL48', 67 : 'NVM_SMALL49', 68 : 'NVM_SMALL50', 69 : 'NVM_SMALL51', 70 : 'NVM_SMALL52', 71 : 'NVM_SMALL53', 72 : 'NVM_SMALL54', 73 : 'NVM_SMALL55', 74 : 'NVM_SMALL56', 75 : 'NVM_SMALL57', 76 : 'NVM_SMALL58', 77 : 'NVM_SMALL59', 78 : 'NVM_SMALL60', 79 : 'NVM_SMALL61', 80 : 'NVM_SMALL62', 81 : 'NVM_SMALL63', 82 : 'NVM_SMALL64', 83 : 'NVM_SMALL65', 84 : 'NVM_SMALL66', 85 : 'NVM_SMALL67', 86 : 'NVM_SMALL68', 87 : 'NVM_SMALL69', 88 : 'NVM_SMALL70', 89 : 'NVM_SMALL71', 90 : 'NVM_SMALL72', 91 : 'NVM_SMALL73', 92 : 'NVM_SMALL74', 93 : 'NVM_SMALL75', 94 : 'NVM_SMALL76', 95 : 'NVM_SMALL77', 96 : 'NVM_SMALL78', 97 : 'NVM_SMALL79', 98 : 'NVM_SMALL80', 99 : 'NVM_SMALL81', 100 : 'NVM_SMALL82', 101 : 'NVM_SMALL83', 102 : 'NVM_SMALL84', 103 : 'NVM_SMALL85', 104 : 'NVM_SMALL86', 105 : 'NVM_SMALL87', 106 : 'NVM_SMALL88', 107 : 'NVM_SMALL89', 108 : 'NVM_SMALL90', 109 : 'NVM_SMALL91', 110 : 'NVM_SMALL92', 111 : 'NVM_SMALL93', 112 : 'NVM_SMALL94', 113 : 'NVM_SMALL95', 114 : 'NVM_SMALL96', 115 : 'NVM_SMALL97', 116 : 'NVM_SMALL98', 117 : 'NVM_SMALL99', 118 : 'NVM_SMALL100', 119 : 'NVM_SMALL101', 120 : 'NVM_SMALL102', 121 : 'NVM_SMALL103', 122 : 'NVM_SMALL104', 123 : 'NVM_SMALL105', 124 : 'NVM_SMALL106', 125 : 'NVM_SMALL107', 126 : 'NVM_SMALL108', 127 : 'NVM_SMALL109', 128 : 'NVM_SMALL110', 129 : 'NVM_SMALL111', 130 : 'NVM_SMALL112', 131 : 'NVM_SMALL113', 132 : 'NVM_SMALL114', 133 : 'NVM_SMALL115', 134 : 'NVM_SMALL116', 135 : 'NVM_SMALL117', 136 : 'NVM_SMALL118', 137 : 'NVM_SMALL119', 138 : 'NVM_SMALL120', 139 : 'NVM_SMALL121', 140 : 'NVM_SMALL122', 141 : 'NVM_SMALL123', 142 : 'NVM_SMALL124', 143 : 'NVM_SMALL125', 144 : 'NVM_SMALL126', 145 : 'NVM_SMALL127', 146 : 'NVM_MED0', 147 : 'NVM_MED1', 148 : 'NVM_MED2', 149 : 'NVM_MED3', 150 : 'NVM_MED4', 151 : 'NVM_LARGE0', 152 : 'NVM_LARGE1', 153 : 'NVM_LARGE2', 154 : 'NVM_LARGE3', 155 : 'NVM_LARGE4', 156 : 'HOLDING0',}
def CONVERT_seq_exec_buf0_op2(val):
    try:
        return CONVERT_seq_exec_buf0_op2_dict[val]
    except:
        return val
CONVERT_seq_exec_id1_op2_dict = {}
def CONVERT_seq_exec_id1_op2(val):
    try:
        return CONVERT_seq_exec_id1_op2_dict[val]
    except:
        return val
CONVERT_seq_exec_buf1_op2_dict = { 0 : 'RAM_SMALL0', 1 : 'RAM_SMALL1', 2 : 'RAM_SMALL2', 3 : 'RAM_SMALL3', 4 : 'RAM_SMALL4', 5 : 'RAM_SMALL5', 6 : 'RAM_SMALL6', 7 : 'RAM_SMALL7', 8 : 'RAM_MED0', 9 : 'RAM_MED1', 10 : 'RAM_MED2', 11 : 'RAM_MED3', 12 : 'RAM_MED4', 13 : 'RAM_LARGE0', 14 : 'RAM_LARGE1', 15 : 'RAM_LARGE2', 16 : 'RAM_LARGE3', 17 : 'RAM_LARGE4', 18 : 'NVM_SMALL0', 19 : 'NVM_SMALL1', 20 : 'NVM_SMALL2', 21 : 'NVM_SMALL3', 22 : 'NVM_SMALL4', 23 : 'NVM_SMALL5', 24 : 'NVM_SMALL6', 25 : 'NVM_SMALL7', 26 : 'NVM_SMALL8', 27 : 'NVM_SMALL9', 28 : 'NVM_SMALL10', 29 : 'NVM_SMALL11', 30 : 'NVM_SMALL12', 31 : 'NVM_SMALL13', 32 : 'NVM_SMALL14', 33 : 'NVM_SMALL15', 34 : 'NVM_SMALL16', 35 : 'NVM_SMALL17', 36 : 'NVM_SMALL18', 37 : 'NVM_SMALL19', 38 : 'NVM_SMALL20', 39 : 'NVM_SMALL21', 40 : 'NVM_SMALL22', 41 : 'NVM_SMALL23', 42 : 'NVM_SMALL24', 43 : 'NVM_SMALL25', 44 : 'NVM_SMALL26', 45 : 'NVM_SMALL27', 46 : 'NVM_SMALL28', 47 : 'NVM_SMALL29', 48 : 'NVM_SMALL30', 49 : 'NVM_SMALL31', 50 : 'NVM_SMALL32', 51 : 'NVM_SMALL33', 52 : 'NVM_SMALL34', 53 : 'NVM_SMALL35', 54 : 'NVM_SMALL36', 55 : 'NVM_SMALL37', 56 : 'NVM_SMALL38', 57 : 'NVM_SMALL39', 58 : 'NVM_SMALL40', 59 : 'NVM_SMALL41', 60 : 'NVM_SMALL42', 61 : 'NVM_SMALL43', 62 : 'NVM_SMALL44', 63 : 'NVM_SMALL45', 64 : 'NVM_SMALL46', 65 : 'NVM_SMALL47', 66 : 'NVM_SMALL48', 67 : 'NVM_SMALL49', 68 : 'NVM_SMALL50', 69 : 'NVM_SMALL51', 70 : 'NVM_SMALL52', 71 : 'NVM_SMALL53', 72 : 'NVM_SMALL54', 73 : 'NVM_SMALL55', 74 : 'NVM_SMALL56', 75 : 'NVM_SMALL57', 76 : 'NVM_SMALL58', 77 : 'NVM_SMALL59', 78 : 'NVM_SMALL60', 79 : 'NVM_SMALL61', 80 : 'NVM_SMALL62', 81 : 'NVM_SMALL63', 82 : 'NVM_SMALL64', 83 : 'NVM_SMALL65', 84 : 'NVM_SMALL66', 85 : 'NVM_SMALL67', 86 : 'NVM_SMALL68', 87 : 'NVM_SMALL69', 88 : 'NVM_SMALL70', 89 : 'NVM_SMALL71', 90 : 'NVM_SMALL72', 91 : 'NVM_SMALL73', 92 : 'NVM_SMALL74', 93 : 'NVM_SMALL75', 94 : 'NVM_SMALL76', 95 : 'NVM_SMALL77', 96 : 'NVM_SMALL78', 97 : 'NVM_SMALL79', 98 : 'NVM_SMALL80', 99 : 'NVM_SMALL81', 100 : 'NVM_SMALL82', 101 : 'NVM_SMALL83', 102 : 'NVM_SMALL84', 103 : 'NVM_SMALL85', 104 : 'NVM_SMALL86', 105 : 'NVM_SMALL87', 106 : 'NVM_SMALL88', 107 : 'NVM_SMALL89', 108 : 'NVM_SMALL90', 109 : 'NVM_SMALL91', 110 : 'NVM_SMALL92', 111 : 'NVM_SMALL93', 112 : 'NVM_SMALL94', 113 : 'NVM_SMALL95', 114 : 'NVM_SMALL96', 115 : 'NVM_SMALL97', 116 : 'NVM_SMALL98', 117 : 'NVM_SMALL99', 118 : 'NVM_SMALL100', 119 : 'NVM_SMALL101', 120 : 'NVM_SMALL102', 121 : 'NVM_SMALL103', 122 : 'NVM_SMALL104', 123 : 'NVM_SMALL105', 124 : 'NVM_SMALL106', 125 : 'NVM_SMALL107', 126 : 'NVM_SMALL108', 127 : 'NVM_SMALL109', 128 : 'NVM_SMALL110', 129 : 'NVM_SMALL111', 130 : 'NVM_SMALL112', 131 : 'NVM_SMALL113', 132 : 'NVM_SMALL114', 133 : 'NVM_SMALL115', 134 : 'NVM_SMALL116', 135 : 'NVM_SMALL117', 136 : 'NVM_SMALL118', 137 : 'NVM_SMALL119', 138 : 'NVM_SMALL120', 139 : 'NVM_SMALL121', 140 : 'NVM_SMALL122', 141 : 'NVM_SMALL123', 142 : 'NVM_SMALL124', 143 : 'NVM_SMALL125', 144 : 'NVM_SMALL126', 145 : 'NVM_SMALL127', 146 : 'NVM_MED0', 147 : 'NVM_MED1', 148 : 'NVM_MED2', 149 : 'NVM_MED3', 150 : 'NVM_MED4', 151 : 'NVM_LARGE0', 152 : 'NVM_LARGE1', 153 : 'NVM_LARGE2', 154 : 'NVM_LARGE3', 155 : 'NVM_LARGE4', 156 : 'HOLDING0',}
def CONVERT_seq_exec_buf1_op2(val):
    try:
        return CONVERT_seq_exec_buf1_op2_dict[val]
    except:
        return val
CONVERT_seq_exec_id2_op2_dict = {}
def CONVERT_seq_exec_id2_op2(val):
    try:
        return CONVERT_seq_exec_id2_op2_dict[val]
    except:
        return val
CONVERT_seq_exec_buf2_op2_dict = { 0 : 'RAM_SMALL0', 1 : 'RAM_SMALL1', 2 : 'RAM_SMALL2', 3 : 'RAM_SMALL3', 4 : 'RAM_SMALL4', 5 : 'RAM_SMALL5', 6 : 'RAM_SMALL6', 7 : 'RAM_SMALL7', 8 : 'RAM_MED0', 9 : 'RAM_MED1', 10 : 'RAM_MED2', 11 : 'RAM_MED3', 12 : 'RAM_MED4', 13 : 'RAM_LARGE0', 14 : 'RAM_LARGE1', 15 : 'RAM_LARGE2', 16 : 'RAM_LARGE3', 17 : 'RAM_LARGE4', 18 : 'NVM_SMALL0', 19 : 'NVM_SMALL1', 20 : 'NVM_SMALL2', 21 : 'NVM_SMALL3', 22 : 'NVM_SMALL4', 23 : 'NVM_SMALL5', 24 : 'NVM_SMALL6', 25 : 'NVM_SMALL7', 26 : 'NVM_SMALL8', 27 : 'NVM_SMALL9', 28 : 'NVM_SMALL10', 29 : 'NVM_SMALL11', 30 : 'NVM_SMALL12', 31 : 'NVM_SMALL13', 32 : 'NVM_SMALL14', 33 : 'NVM_SMALL15', 34 : 'NVM_SMALL16', 35 : 'NVM_SMALL17', 36 : 'NVM_SMALL18', 37 : 'NVM_SMALL19', 38 : 'NVM_SMALL20', 39 : 'NVM_SMALL21', 40 : 'NVM_SMALL22', 41 : 'NVM_SMALL23', 42 : 'NVM_SMALL24', 43 : 'NVM_SMALL25', 44 : 'NVM_SMALL26', 45 : 'NVM_SMALL27', 46 : 'NVM_SMALL28', 47 : 'NVM_SMALL29', 48 : 'NVM_SMALL30', 49 : 'NVM_SMALL31', 50 : 'NVM_SMALL32', 51 : 'NVM_SMALL33', 52 : 'NVM_SMALL34', 53 : 'NVM_SMALL35', 54 : 'NVM_SMALL36', 55 : 'NVM_SMALL37', 56 : 'NVM_SMALL38', 57 : 'NVM_SMALL39', 58 : 'NVM_SMALL40', 59 : 'NVM_SMALL41', 60 : 'NVM_SMALL42', 61 : 'NVM_SMALL43', 62 : 'NVM_SMALL44', 63 : 'NVM_SMALL45', 64 : 'NVM_SMALL46', 65 : 'NVM_SMALL47', 66 : 'NVM_SMALL48', 67 : 'NVM_SMALL49', 68 : 'NVM_SMALL50', 69 : 'NVM_SMALL51', 70 : 'NVM_SMALL52', 71 : 'NVM_SMALL53', 72 : 'NVM_SMALL54', 73 : 'NVM_SMALL55', 74 : 'NVM_SMALL56', 75 : 'NVM_SMALL57', 76 : 'NVM_SMALL58', 77 : 'NVM_SMALL59', 78 : 'NVM_SMALL60', 79 : 'NVM_SMALL61', 80 : 'NVM_SMALL62', 81 : 'NVM_SMALL63', 82 : 'NVM_SMALL64', 83 : 'NVM_SMALL65', 84 : 'NVM_SMALL66', 85 : 'NVM_SMALL67', 86 : 'NVM_SMALL68', 87 : 'NVM_SMALL69', 88 : 'NVM_SMALL70', 89 : 'NVM_SMALL71', 90 : 'NVM_SMALL72', 91 : 'NVM_SMALL73', 92 : 'NVM_SMALL74', 93 : 'NVM_SMALL75', 94 : 'NVM_SMALL76', 95 : 'NVM_SMALL77', 96 : 'NVM_SMALL78', 97 : 'NVM_SMALL79', 98 : 'NVM_SMALL80', 99 : 'NVM_SMALL81', 100 : 'NVM_SMALL82', 101 : 'NVM_SMALL83', 102 : 'NVM_SMALL84', 103 : 'NVM_SMALL85', 104 : 'NVM_SMALL86', 105 : 'NVM_SMALL87', 106 : 'NVM_SMALL88', 107 : 'NVM_SMALL89', 108 : 'NVM_SMALL90', 109 : 'NVM_SMALL91', 110 : 'NVM_SMALL92', 111 : 'NVM_SMALL93', 112 : 'NVM_SMALL94', 113 : 'NVM_SMALL95', 114 : 'NVM_SMALL96', 115 : 'NVM_SMALL97', 116 : 'NVM_SMALL98', 117 : 'NVM_SMALL99', 118 : 'NVM_SMALL100', 119 : 'NVM_SMALL101', 120 : 'NVM_SMALL102', 121 : 'NVM_SMALL103', 122 : 'NVM_SMALL104', 123 : 'NVM_SMALL105', 124 : 'NVM_SMALL106', 125 : 'NVM_SMALL107', 126 : 'NVM_SMALL108', 127 : 'NVM_SMALL109', 128 : 'NVM_SMALL110', 129 : 'NVM_SMALL111', 130 : 'NVM_SMALL112', 131 : 'NVM_SMALL113', 132 : 'NVM_SMALL114', 133 : 'NVM_SMALL115', 134 : 'NVM_SMALL116', 135 : 'NVM_SMALL117', 136 : 'NVM_SMALL118', 137 : 'NVM_SMALL119', 138 : 'NVM_SMALL120', 139 : 'NVM_SMALL121', 140 : 'NVM_SMALL122', 141 : 'NVM_SMALL123', 142 : 'NVM_SMALL124', 143 : 'NVM_SMALL125', 144 : 'NVM_SMALL126', 145 : 'NVM_SMALL127', 146 : 'NVM_MED0', 147 : 'NVM_MED1', 148 : 'NVM_MED2', 149 : 'NVM_MED3', 150 : 'NVM_MED4', 151 : 'NVM_LARGE0', 152 : 'NVM_LARGE1', 153 : 'NVM_LARGE2', 154 : 'NVM_LARGE3', 155 : 'NVM_LARGE4', 156 : 'HOLDING0',}
def CONVERT_seq_exec_buf2_op2(val):
    try:
        return CONVERT_seq_exec_buf2_op2_dict[val]
    except:
        return val
CONVERT_seq_state_op3_dict = { 0 : 'IDLE', 1 : 'ACTIVE', 2 : 'SUSPEND', 3 : 'PAUSE', 4 : 'STALE',}
def CONVERT_seq_state_op3(val):
    try:
        return CONVERT_seq_state_op3_dict[val]
    except:
        return val
CONVERT_seq_stop_code_op3_dict = { 0 : 'NOMINAL', 1 : 'CMD', 2 : 'INIT', 3 : 'REJECT', 4 : 'STALE', 5 : 'BAD_INT', 6 : 'INT_FAIL',}
def CONVERT_seq_stop_code_op3(val):
    try:
        return CONVERT_seq_stop_code_op3_dict[val]
    except:
        return val
CONVERT_seq_wait_type_op3_dict = { 0 : 'NONE', 1 : 'ABS', 2 : 'REL',}
def CONVERT_seq_wait_type_op3(val):
    try:
        return CONVERT_seq_wait_type_op3_dict[val]
    except:
        return val
CONVERT_seq_exec_id0_op3_dict = {}
def CONVERT_seq_exec_id0_op3(val):
    try:
        return CONVERT_seq_exec_id0_op3_dict[val]
    except:
        return val
CONVERT_seq_exec_buf0_op3_dict = { 0 : 'RAM_SMALL0', 1 : 'RAM_SMALL1', 2 : 'RAM_SMALL2', 3 : 'RAM_SMALL3', 4 : 'RAM_SMALL4', 5 : 'RAM_SMALL5', 6 : 'RAM_SMALL6', 7 : 'RAM_SMALL7', 8 : 'RAM_MED0', 9 : 'RAM_MED1', 10 : 'RAM_MED2', 11 : 'RAM_MED3', 12 : 'RAM_MED4', 13 : 'RAM_LARGE0', 14 : 'RAM_LARGE1', 15 : 'RAM_LARGE2', 16 : 'RAM_LARGE3', 17 : 'RAM_LARGE4', 18 : 'NVM_SMALL0', 19 : 'NVM_SMALL1', 20 : 'NVM_SMALL2', 21 : 'NVM_SMALL3', 22 : 'NVM_SMALL4', 23 : 'NVM_SMALL5', 24 : 'NVM_SMALL6', 25 : 'NVM_SMALL7', 26 : 'NVM_SMALL8', 27 : 'NVM_SMALL9', 28 : 'NVM_SMALL10', 29 : 'NVM_SMALL11', 30 : 'NVM_SMALL12', 31 : 'NVM_SMALL13', 32 : 'NVM_SMALL14', 33 : 'NVM_SMALL15', 34 : 'NVM_SMALL16', 35 : 'NVM_SMALL17', 36 : 'NVM_SMALL18', 37 : 'NVM_SMALL19', 38 : 'NVM_SMALL20', 39 : 'NVM_SMALL21', 40 : 'NVM_SMALL22', 41 : 'NVM_SMALL23', 42 : 'NVM_SMALL24', 43 : 'NVM_SMALL25', 44 : 'NVM_SMALL26', 45 : 'NVM_SMALL27', 46 : 'NVM_SMALL28', 47 : 'NVM_SMALL29', 48 : 'NVM_SMALL30', 49 : 'NVM_SMALL31', 50 : 'NVM_SMALL32', 51 : 'NVM_SMALL33', 52 : 'NVM_SMALL34', 53 : 'NVM_SMALL35', 54 : 'NVM_SMALL36', 55 : 'NVM_SMALL37', 56 : 'NVM_SMALL38', 57 : 'NVM_SMALL39', 58 : 'NVM_SMALL40', 59 : 'NVM_SMALL41', 60 : 'NVM_SMALL42', 61 : 'NVM_SMALL43', 62 : 'NVM_SMALL44', 63 : 'NVM_SMALL45', 64 : 'NVM_SMALL46', 65 : 'NVM_SMALL47', 66 : 'NVM_SMALL48', 67 : 'NVM_SMALL49', 68 : 'NVM_SMALL50', 69 : 'NVM_SMALL51', 70 : 'NVM_SMALL52', 71 : 'NVM_SMALL53', 72 : 'NVM_SMALL54', 73 : 'NVM_SMALL55', 74 : 'NVM_SMALL56', 75 : 'NVM_SMALL57', 76 : 'NVM_SMALL58', 77 : 'NVM_SMALL59', 78 : 'NVM_SMALL60', 79 : 'NVM_SMALL61', 80 : 'NVM_SMALL62', 81 : 'NVM_SMALL63', 82 : 'NVM_SMALL64', 83 : 'NVM_SMALL65', 84 : 'NVM_SMALL66', 85 : 'NVM_SMALL67', 86 : 'NVM_SMALL68', 87 : 'NVM_SMALL69', 88 : 'NVM_SMALL70', 89 : 'NVM_SMALL71', 90 : 'NVM_SMALL72', 91 : 'NVM_SMALL73', 92 : 'NVM_SMALL74', 93 : 'NVM_SMALL75', 94 : 'NVM_SMALL76', 95 : 'NVM_SMALL77', 96 : 'NVM_SMALL78', 97 : 'NVM_SMALL79', 98 : 'NVM_SMALL80', 99 : 'NVM_SMALL81', 100 : 'NVM_SMALL82', 101 : 'NVM_SMALL83', 102 : 'NVM_SMALL84', 103 : 'NVM_SMALL85', 104 : 'NVM_SMALL86', 105 : 'NVM_SMALL87', 106 : 'NVM_SMALL88', 107 : 'NVM_SMALL89', 108 : 'NVM_SMALL90', 109 : 'NVM_SMALL91', 110 : 'NVM_SMALL92', 111 : 'NVM_SMALL93', 112 : 'NVM_SMALL94', 113 : 'NVM_SMALL95', 114 : 'NVM_SMALL96', 115 : 'NVM_SMALL97', 116 : 'NVM_SMALL98', 117 : 'NVM_SMALL99', 118 : 'NVM_SMALL100', 119 : 'NVM_SMALL101', 120 : 'NVM_SMALL102', 121 : 'NVM_SMALL103', 122 : 'NVM_SMALL104', 123 : 'NVM_SMALL105', 124 : 'NVM_SMALL106', 125 : 'NVM_SMALL107', 126 : 'NVM_SMALL108', 127 : 'NVM_SMALL109', 128 : 'NVM_SMALL110', 129 : 'NVM_SMALL111', 130 : 'NVM_SMALL112', 131 : 'NVM_SMALL113', 132 : 'NVM_SMALL114', 133 : 'NVM_SMALL115', 134 : 'NVM_SMALL116', 135 : 'NVM_SMALL117', 136 : 'NVM_SMALL118', 137 : 'NVM_SMALL119', 138 : 'NVM_SMALL120', 139 : 'NVM_SMALL121', 140 : 'NVM_SMALL122', 141 : 'NVM_SMALL123', 142 : 'NVM_SMALL124', 143 : 'NVM_SMALL125', 144 : 'NVM_SMALL126', 145 : 'NVM_SMALL127', 146 : 'NVM_MED0', 147 : 'NVM_MED1', 148 : 'NVM_MED2', 149 : 'NVM_MED3', 150 : 'NVM_MED4', 151 : 'NVM_LARGE0', 152 : 'NVM_LARGE1', 153 : 'NVM_LARGE2', 154 : 'NVM_LARGE3', 155 : 'NVM_LARGE4', 156 : 'HOLDING0',}
def CONVERT_seq_exec_buf0_op3(val):
    try:
        return CONVERT_seq_exec_buf0_op3_dict[val]
    except:
        return val
CONVERT_seq_exec_id1_op3_dict = {}
def CONVERT_seq_exec_id1_op3(val):
    try:
        return CONVERT_seq_exec_id1_op3_dict[val]
    except:
        return val
CONVERT_seq_exec_buf1_op3_dict = { 0 : 'RAM_SMALL0', 1 : 'RAM_SMALL1', 2 : 'RAM_SMALL2', 3 : 'RAM_SMALL3', 4 : 'RAM_SMALL4', 5 : 'RAM_SMALL5', 6 : 'RAM_SMALL6', 7 : 'RAM_SMALL7', 8 : 'RAM_MED0', 9 : 'RAM_MED1', 10 : 'RAM_MED2', 11 : 'RAM_MED3', 12 : 'RAM_MED4', 13 : 'RAM_LARGE0', 14 : 'RAM_LARGE1', 15 : 'RAM_LARGE2', 16 : 'RAM_LARGE3', 17 : 'RAM_LARGE4', 18 : 'NVM_SMALL0', 19 : 'NVM_SMALL1', 20 : 'NVM_SMALL2', 21 : 'NVM_SMALL3', 22 : 'NVM_SMALL4', 23 : 'NVM_SMALL5', 24 : 'NVM_SMALL6', 25 : 'NVM_SMALL7', 26 : 'NVM_SMALL8', 27 : 'NVM_SMALL9', 28 : 'NVM_SMALL10', 29 : 'NVM_SMALL11', 30 : 'NVM_SMALL12', 31 : 'NVM_SMALL13', 32 : 'NVM_SMALL14', 33 : 'NVM_SMALL15', 34 : 'NVM_SMALL16', 35 : 'NVM_SMALL17', 36 : 'NVM_SMALL18', 37 : 'NVM_SMALL19', 38 : 'NVM_SMALL20', 39 : 'NVM_SMALL21', 40 : 'NVM_SMALL22', 41 : 'NVM_SMALL23', 42 : 'NVM_SMALL24', 43 : 'NVM_SMALL25', 44 : 'NVM_SMALL26', 45 : 'NVM_SMALL27', 46 : 'NVM_SMALL28', 47 : 'NVM_SMALL29', 48 : 'NVM_SMALL30', 49 : 'NVM_SMALL31', 50 : 'NVM_SMALL32', 51 : 'NVM_SMALL33', 52 : 'NVM_SMALL34', 53 : 'NVM_SMALL35', 54 : 'NVM_SMALL36', 55 : 'NVM_SMALL37', 56 : 'NVM_SMALL38', 57 : 'NVM_SMALL39', 58 : 'NVM_SMALL40', 59 : 'NVM_SMALL41', 60 : 'NVM_SMALL42', 61 : 'NVM_SMALL43', 62 : 'NVM_SMALL44', 63 : 'NVM_SMALL45', 64 : 'NVM_SMALL46', 65 : 'NVM_SMALL47', 66 : 'NVM_SMALL48', 67 : 'NVM_SMALL49', 68 : 'NVM_SMALL50', 69 : 'NVM_SMALL51', 70 : 'NVM_SMALL52', 71 : 'NVM_SMALL53', 72 : 'NVM_SMALL54', 73 : 'NVM_SMALL55', 74 : 'NVM_SMALL56', 75 : 'NVM_SMALL57', 76 : 'NVM_SMALL58', 77 : 'NVM_SMALL59', 78 : 'NVM_SMALL60', 79 : 'NVM_SMALL61', 80 : 'NVM_SMALL62', 81 : 'NVM_SMALL63', 82 : 'NVM_SMALL64', 83 : 'NVM_SMALL65', 84 : 'NVM_SMALL66', 85 : 'NVM_SMALL67', 86 : 'NVM_SMALL68', 87 : 'NVM_SMALL69', 88 : 'NVM_SMALL70', 89 : 'NVM_SMALL71', 90 : 'NVM_SMALL72', 91 : 'NVM_SMALL73', 92 : 'NVM_SMALL74', 93 : 'NVM_SMALL75', 94 : 'NVM_SMALL76', 95 : 'NVM_SMALL77', 96 : 'NVM_SMALL78', 97 : 'NVM_SMALL79', 98 : 'NVM_SMALL80', 99 : 'NVM_SMALL81', 100 : 'NVM_SMALL82', 101 : 'NVM_SMALL83', 102 : 'NVM_SMALL84', 103 : 'NVM_SMALL85', 104 : 'NVM_SMALL86', 105 : 'NVM_SMALL87', 106 : 'NVM_SMALL88', 107 : 'NVM_SMALL89', 108 : 'NVM_SMALL90', 109 : 'NVM_SMALL91', 110 : 'NVM_SMALL92', 111 : 'NVM_SMALL93', 112 : 'NVM_SMALL94', 113 : 'NVM_SMALL95', 114 : 'NVM_SMALL96', 115 : 'NVM_SMALL97', 116 : 'NVM_SMALL98', 117 : 'NVM_SMALL99', 118 : 'NVM_SMALL100', 119 : 'NVM_SMALL101', 120 : 'NVM_SMALL102', 121 : 'NVM_SMALL103', 122 : 'NVM_SMALL104', 123 : 'NVM_SMALL105', 124 : 'NVM_SMALL106', 125 : 'NVM_SMALL107', 126 : 'NVM_SMALL108', 127 : 'NVM_SMALL109', 128 : 'NVM_SMALL110', 129 : 'NVM_SMALL111', 130 : 'NVM_SMALL112', 131 : 'NVM_SMALL113', 132 : 'NVM_SMALL114', 133 : 'NVM_SMALL115', 134 : 'NVM_SMALL116', 135 : 'NVM_SMALL117', 136 : 'NVM_SMALL118', 137 : 'NVM_SMALL119', 138 : 'NVM_SMALL120', 139 : 'NVM_SMALL121', 140 : 'NVM_SMALL122', 141 : 'NVM_SMALL123', 142 : 'NVM_SMALL124', 143 : 'NVM_SMALL125', 144 : 'NVM_SMALL126', 145 : 'NVM_SMALL127', 146 : 'NVM_MED0', 147 : 'NVM_MED1', 148 : 'NVM_MED2', 149 : 'NVM_MED3', 150 : 'NVM_MED4', 151 : 'NVM_LARGE0', 152 : 'NVM_LARGE1', 153 : 'NVM_LARGE2', 154 : 'NVM_LARGE3', 155 : 'NVM_LARGE4', 156 : 'HOLDING0',}
def CONVERT_seq_exec_buf1_op3(val):
    try:
        return CONVERT_seq_exec_buf1_op3_dict[val]
    except:
        return val
CONVERT_seq_exec_id2_op3_dict = {}
def CONVERT_seq_exec_id2_op3(val):
    try:
        return CONVERT_seq_exec_id2_op3_dict[val]
    except:
        return val
CONVERT_seq_exec_buf2_op3_dict = { 0 : 'RAM_SMALL0', 1 : 'RAM_SMALL1', 2 : 'RAM_SMALL2', 3 : 'RAM_SMALL3', 4 : 'RAM_SMALL4', 5 : 'RAM_SMALL5', 6 : 'RAM_SMALL6', 7 : 'RAM_SMALL7', 8 : 'RAM_MED0', 9 : 'RAM_MED1', 10 : 'RAM_MED2', 11 : 'RAM_MED3', 12 : 'RAM_MED4', 13 : 'RAM_LARGE0', 14 : 'RAM_LARGE1', 15 : 'RAM_LARGE2', 16 : 'RAM_LARGE3', 17 : 'RAM_LARGE4', 18 : 'NVM_SMALL0', 19 : 'NVM_SMALL1', 20 : 'NVM_SMALL2', 21 : 'NVM_SMALL3', 22 : 'NVM_SMALL4', 23 : 'NVM_SMALL5', 24 : 'NVM_SMALL6', 25 : 'NVM_SMALL7', 26 : 'NVM_SMALL8', 27 : 'NVM_SMALL9', 28 : 'NVM_SMALL10', 29 : 'NVM_SMALL11', 30 : 'NVM_SMALL12', 31 : 'NVM_SMALL13', 32 : 'NVM_SMALL14', 33 : 'NVM_SMALL15', 34 : 'NVM_SMALL16', 35 : 'NVM_SMALL17', 36 : 'NVM_SMALL18', 37 : 'NVM_SMALL19', 38 : 'NVM_SMALL20', 39 : 'NVM_SMALL21', 40 : 'NVM_SMALL22', 41 : 'NVM_SMALL23', 42 : 'NVM_SMALL24', 43 : 'NVM_SMALL25', 44 : 'NVM_SMALL26', 45 : 'NVM_SMALL27', 46 : 'NVM_SMALL28', 47 : 'NVM_SMALL29', 48 : 'NVM_SMALL30', 49 : 'NVM_SMALL31', 50 : 'NVM_SMALL32', 51 : 'NVM_SMALL33', 52 : 'NVM_SMALL34', 53 : 'NVM_SMALL35', 54 : 'NVM_SMALL36', 55 : 'NVM_SMALL37', 56 : 'NVM_SMALL38', 57 : 'NVM_SMALL39', 58 : 'NVM_SMALL40', 59 : 'NVM_SMALL41', 60 : 'NVM_SMALL42', 61 : 'NVM_SMALL43', 62 : 'NVM_SMALL44', 63 : 'NVM_SMALL45', 64 : 'NVM_SMALL46', 65 : 'NVM_SMALL47', 66 : 'NVM_SMALL48', 67 : 'NVM_SMALL49', 68 : 'NVM_SMALL50', 69 : 'NVM_SMALL51', 70 : 'NVM_SMALL52', 71 : 'NVM_SMALL53', 72 : 'NVM_SMALL54', 73 : 'NVM_SMALL55', 74 : 'NVM_SMALL56', 75 : 'NVM_SMALL57', 76 : 'NVM_SMALL58', 77 : 'NVM_SMALL59', 78 : 'NVM_SMALL60', 79 : 'NVM_SMALL61', 80 : 'NVM_SMALL62', 81 : 'NVM_SMALL63', 82 : 'NVM_SMALL64', 83 : 'NVM_SMALL65', 84 : 'NVM_SMALL66', 85 : 'NVM_SMALL67', 86 : 'NVM_SMALL68', 87 : 'NVM_SMALL69', 88 : 'NVM_SMALL70', 89 : 'NVM_SMALL71', 90 : 'NVM_SMALL72', 91 : 'NVM_SMALL73', 92 : 'NVM_SMALL74', 93 : 'NVM_SMALL75', 94 : 'NVM_SMALL76', 95 : 'NVM_SMALL77', 96 : 'NVM_SMALL78', 97 : 'NVM_SMALL79', 98 : 'NVM_SMALL80', 99 : 'NVM_SMALL81', 100 : 'NVM_SMALL82', 101 : 'NVM_SMALL83', 102 : 'NVM_SMALL84', 103 : 'NVM_SMALL85', 104 : 'NVM_SMALL86', 105 : 'NVM_SMALL87', 106 : 'NVM_SMALL88', 107 : 'NVM_SMALL89', 108 : 'NVM_SMALL90', 109 : 'NVM_SMALL91', 110 : 'NVM_SMALL92', 111 : 'NVM_SMALL93', 112 : 'NVM_SMALL94', 113 : 'NVM_SMALL95', 114 : 'NVM_SMALL96', 115 : 'NVM_SMALL97', 116 : 'NVM_SMALL98', 117 : 'NVM_SMALL99', 118 : 'NVM_SMALL100', 119 : 'NVM_SMALL101', 120 : 'NVM_SMALL102', 121 : 'NVM_SMALL103', 122 : 'NVM_SMALL104', 123 : 'NVM_SMALL105', 124 : 'NVM_SMALL106', 125 : 'NVM_SMALL107', 126 : 'NVM_SMALL108', 127 : 'NVM_SMALL109', 128 : 'NVM_SMALL110', 129 : 'NVM_SMALL111', 130 : 'NVM_SMALL112', 131 : 'NVM_SMALL113', 132 : 'NVM_SMALL114', 133 : 'NVM_SMALL115', 134 : 'NVM_SMALL116', 135 : 'NVM_SMALL117', 136 : 'NVM_SMALL118', 137 : 'NVM_SMALL119', 138 : 'NVM_SMALL120', 139 : 'NVM_SMALL121', 140 : 'NVM_SMALL122', 141 : 'NVM_SMALL123', 142 : 'NVM_SMALL124', 143 : 'NVM_SMALL125', 144 : 'NVM_SMALL126', 145 : 'NVM_SMALL127', 146 : 'NVM_MED0', 147 : 'NVM_MED1', 148 : 'NVM_MED2', 149 : 'NVM_MED3', 150 : 'NVM_MED4', 151 : 'NVM_LARGE0', 152 : 'NVM_LARGE1', 153 : 'NVM_LARGE2', 154 : 'NVM_LARGE3', 155 : 'NVM_LARGE4', 156 : 'HOLDING0',}
def CONVERT_seq_exec_buf2_op3(val):
    try:
        return CONVERT_seq_exec_buf2_op3_dict[val]
    except:
        return val
CONVERT_store_write_state_dict = { 0 : 'DIS', 1 : 'ENA',}
def CONVERT_store_write_state(val):
    try:
        return CONVERT_store_write_state_dict[val]
    except:
        return val
CONVERT_store_sel_dict = { 0 : 'NAND',}
def CONVERT_store_sel(val):
    try:
        return CONVERT_store_sel_dict[val]
    except:
        return val
CONVERT_store_read_state_dict = { 0 : 'DIS', 1 : 'ENA',}
def CONVERT_store_read_state(val):
    try:
        return CONVERT_store_read_state_dict[val]
    except:
        return val
CONVERT_store_read_stream_dict = { 0 : 'DBG', 1 : 'STORE', 2 : 'UHF', 3 : 'ALL',}
def CONVERT_store_read_stream(val):
    try:
        return CONVERT_store_read_stream_dict[val]
    except:
        return val
CONVERT_store_read_id_dict = { 0 : 'MISC', 1 : 'LOG', 2 : 'ADCS', 3 : 'HK', 4 : 'SCI', 5 : 'DSPS', 6 : 'DOWNLINK',}
def CONVERT_store_read_id(val):
    try:
        return CONVERT_store_read_id_dict[val]
    except:
        return val
CONVERT_store_partition_id_misc_dict = { 0 : 'MISC', 1 : 'LOG', 2 : 'ADCS', 3 : 'HK', 4 : 'SCI', 5 : 'DSPS', 6 : 'DOWNLINK',}
def CONVERT_store_partition_id_misc(val):
    try:
        return CONVERT_store_partition_id_misc_dict[val]
    except:
        return val
CONVERT_store_partition_id_log_dict = { 0 : 'MISC', 1 : 'LOG', 2 : 'ADCS', 3 : 'HK', 4 : 'SCI', 5 : 'DSPS', 6 : 'DOWNLINK',}
def CONVERT_store_partition_id_log(val):
    try:
        return CONVERT_store_partition_id_log_dict[val]
    except:
        return val
CONVERT_store_partition_id_adcs_dict = { 0 : 'MISC', 1 : 'LOG', 2 : 'ADCS', 3 : 'HK', 4 : 'SCI', 5 : 'DSPS', 6 : 'DOWNLINK',}
def CONVERT_store_partition_id_adcs(val):
    try:
        return CONVERT_store_partition_id_adcs_dict[val]
    except:
        return val
CONVERT_store_partition_id_hk_dict = { 0 : 'MISC', 1 : 'LOG', 2 : 'ADCS', 3 : 'HK', 4 : 'SCI', 5 : 'DSPS', 6 : 'DOWNLINK',}
def CONVERT_store_partition_id_hk(val):
    try:
        return CONVERT_store_partition_id_hk_dict[val]
    except:
        return val
CONVERT_store_partition_id_sci_dict = { 0 : 'MISC', 1 : 'LOG', 2 : 'ADCS', 3 : 'HK', 4 : 'SCI', 5 : 'DSPS', 6 : 'DOWNLINK',}
def CONVERT_store_partition_id_sci(val):
    try:
        return CONVERT_store_partition_id_sci_dict[val]
    except:
        return val
CONVERT_store_partition_id_dsps_dict = { 0 : 'MISC', 1 : 'LOG', 2 : 'ADCS', 3 : 'HK', 4 : 'SCI', 5 : 'DSPS', 6 : 'DOWNLINK',}
def CONVERT_store_partition_id_dsps(val):
    try:
        return CONVERT_store_partition_id_dsps_dict[val]
    except:
        return val
CONVERT_store_partition_id_downlink_dict = { 0 : 'MISC', 1 : 'LOG', 2 : 'ADCS', 3 : 'HK', 4 : 'SCI', 5 : 'DSPS', 6 : 'DOWNLINK',}
def CONVERT_store_partition_id_downlink(val):
    try:
        return CONVERT_store_partition_id_downlink_dict[val]
    except:
        return val
CONVERT_store_map_apid0_dict = { 1 : 'SW_STAT', 2 : 'LIB_HK', 3 : 'MEM_HK', 4 : 'HW_STAT', 5 : 'SEQ_HK', 6 : 'MEM', 7 : 'FP_HK', 8 : 'TBL_HK', 9 : 'ECHO', 10 : 'PAYLOAD_SCI_PKT', 11 : 'DES_HK', 12 : 'CMD_HK', 13 : 'DES_SCHED', 14 : 'DES_TASK', 15 : 'LOG_HK', 16 : 'PAYLOAD_HK', 17 : 'TLM_HK', 18 : 'TIME_HK', 19 : 'DES_TIME', 20 : 'EVT_LOG', 21 : 'STORE_HK', 22 : 'FP_TEST', 23 : 'DSPS_LOG', 24 : 'SCI_META', 25 : 'DSPS_PARAM', 26 : 'MODE_PKT', 27 : 'ANALOG_HK', 28 : 'BATTERY_0_HK', 29 : 'DSPS_TIME', 30 : 'EPS_HK', 32 : 'SCI_HK', 33 : 'UHF_HK', 34 : 'UHF_PASS', 35 : 'DSPS_DATA', 36 : 'VERSION', 37 : 'FLASH_HK', 38 : 'BATTERY_ANA', 39 : 'ADCS_HK', 40 : 'XBAND_HK', 68 : 'PBK_PKT', 69 : 'XBAND_REG', 41 : 'ADCS_TLM_PROC', 42 : 'ADCS_COMMAND_TLM', 43 : 'ADCS_GENERAL', 44 : 'ADCS_TIME', 45 : 'ADCS_REFS', 46 : 'ADCS_ATT_DET', 47 : 'ADCS_ATT_CMD', 48 : 'ADCS_RW_DRIVE', 49 : 'ADCS_TRACKER', 50 : 'ADCS_ATT_CTRL', 51 : 'ADCS_MOMENTUM', 52 : 'ADCS_CSS', 53 : 'ADCS_MAG', 54 : 'ADCS_IMU', 55 : 'ADCS_CLOCK_SYNC', 56 : 'ADCS_ANALOGS', 57 : 'ADCS_TABLES', 58 : 'ADCS_TRACKER_2', 59 : 'ADCS_GPS', 60 : 'ADCS_CAL', 61 : 'ADCS_TRACKER_CTRL', 62 : 'ADCS_EXT_TRACKER_2', 63 : 'ADCS_L0',}
def CONVERT_store_map_apid0(val):
    try:
        return CONVERT_store_map_apid0_dict[val]
    except:
        return val
CONVERT_store_map_partition0_dict = { 0 : 'MISC', 1 : 'LOG', 2 : 'ADCS', 3 : 'HK', 4 : 'SCI', 5 : 'DSPS', 6 : 'DOWNLINK',}
def CONVERT_store_map_partition0(val):
    try:
        return CONVERT_store_map_partition0_dict[val]
    except:
        return val
CONVERT_store_map_apid1_dict = { 1 : 'SW_STAT', 2 : 'LIB_HK', 3 : 'MEM_HK', 4 : 'HW_STAT', 5 : 'SEQ_HK', 6 : 'MEM', 7 : 'FP_HK', 8 : 'TBL_HK', 9 : 'ECHO', 10 : 'PAYLOAD_SCI_PKT', 11 : 'DES_HK', 12 : 'CMD_HK', 13 : 'DES_SCHED', 14 : 'DES_TASK', 15 : 'LOG_HK', 16 : 'PAYLOAD_HK', 17 : 'TLM_HK', 18 : 'TIME_HK', 19 : 'DES_TIME', 20 : 'EVT_LOG', 21 : 'STORE_HK', 22 : 'FP_TEST', 23 : 'DSPS_LOG', 24 : 'SCI_META', 25 : 'DSPS_PARAM', 26 : 'MODE_PKT', 27 : 'ANALOG_HK', 28 : 'BATTERY_0_HK', 29 : 'DSPS_TIME', 30 : 'EPS_HK', 32 : 'SCI_HK', 33 : 'UHF_HK', 34 : 'UHF_PASS', 35 : 'DSPS_DATA', 36 : 'VERSION', 37 : 'FLASH_HK', 38 : 'BATTERY_ANA', 39 : 'ADCS_HK', 40 : 'XBAND_HK', 68 : 'PBK_PKT', 69 : 'XBAND_REG', 41 : 'ADCS_TLM_PROC', 42 : 'ADCS_COMMAND_TLM', 43 : 'ADCS_GENERAL', 44 : 'ADCS_TIME', 45 : 'ADCS_REFS', 46 : 'ADCS_ATT_DET', 47 : 'ADCS_ATT_CMD', 48 : 'ADCS_RW_DRIVE', 49 : 'ADCS_TRACKER', 50 : 'ADCS_ATT_CTRL', 51 : 'ADCS_MOMENTUM', 52 : 'ADCS_CSS', 53 : 'ADCS_MAG', 54 : 'ADCS_IMU', 55 : 'ADCS_CLOCK_SYNC', 56 : 'ADCS_ANALOGS', 57 : 'ADCS_TABLES', 58 : 'ADCS_TRACKER_2', 59 : 'ADCS_GPS', 60 : 'ADCS_CAL', 61 : 'ADCS_TRACKER_CTRL', 62 : 'ADCS_EXT_TRACKER_2', 63 : 'ADCS_L0',}
def CONVERT_store_map_apid1(val):
    try:
        return CONVERT_store_map_apid1_dict[val]
    except:
        return val
CONVERT_store_map_partition1_dict = { 0 : 'MISC', 1 : 'LOG', 2 : 'ADCS', 3 : 'HK', 4 : 'SCI', 5 : 'DSPS', 6 : 'DOWNLINK',}
def CONVERT_store_map_partition1(val):
    try:
        return CONVERT_store_map_partition1_dict[val]
    except:
        return val
CONVERT_store_map_apid2_dict = { 1 : 'SW_STAT', 2 : 'LIB_HK', 3 : 'MEM_HK', 4 : 'HW_STAT', 5 : 'SEQ_HK', 6 : 'MEM', 7 : 'FP_HK', 8 : 'TBL_HK', 9 : 'ECHO', 10 : 'PAYLOAD_SCI_PKT', 11 : 'DES_HK', 12 : 'CMD_HK', 13 : 'DES_SCHED', 14 : 'DES_TASK', 15 : 'LOG_HK', 16 : 'PAYLOAD_HK', 17 : 'TLM_HK', 18 : 'TIME_HK', 19 : 'DES_TIME', 20 : 'EVT_LOG', 21 : 'STORE_HK', 22 : 'FP_TEST', 23 : 'DSPS_LOG', 24 : 'SCI_META', 25 : 'DSPS_PARAM', 26 : 'MODE_PKT', 27 : 'ANALOG_HK', 28 : 'BATTERY_0_HK', 29 : 'DSPS_TIME', 30 : 'EPS_HK', 32 : 'SCI_HK', 33 : 'UHF_HK', 34 : 'UHF_PASS', 35 : 'DSPS_DATA', 36 : 'VERSION', 37 : 'FLASH_HK', 38 : 'BATTERY_ANA', 39 : 'ADCS_HK', 40 : 'XBAND_HK', 68 : 'PBK_PKT', 69 : 'XBAND_REG', 41 : 'ADCS_TLM_PROC', 42 : 'ADCS_COMMAND_TLM', 43 : 'ADCS_GENERAL', 44 : 'ADCS_TIME', 45 : 'ADCS_REFS', 46 : 'ADCS_ATT_DET', 47 : 'ADCS_ATT_CMD', 48 : 'ADCS_RW_DRIVE', 49 : 'ADCS_TRACKER', 50 : 'ADCS_ATT_CTRL', 51 : 'ADCS_MOMENTUM', 52 : 'ADCS_CSS', 53 : 'ADCS_MAG', 54 : 'ADCS_IMU', 55 : 'ADCS_CLOCK_SYNC', 56 : 'ADCS_ANALOGS', 57 : 'ADCS_TABLES', 58 : 'ADCS_TRACKER_2', 59 : 'ADCS_GPS', 60 : 'ADCS_CAL', 61 : 'ADCS_TRACKER_CTRL', 62 : 'ADCS_EXT_TRACKER_2', 63 : 'ADCS_L0',}
def CONVERT_store_map_apid2(val):
    try:
        return CONVERT_store_map_apid2_dict[val]
    except:
        return val
CONVERT_store_map_partition2_dict = { 0 : 'MISC', 1 : 'LOG', 2 : 'ADCS', 3 : 'HK', 4 : 'SCI', 5 : 'DSPS', 6 : 'DOWNLINK',}
def CONVERT_store_map_partition2(val):
    try:
        return CONVERT_store_map_partition2_dict[val]
    except:
        return val
CONVERT_store_map_apid3_dict = { 1 : 'SW_STAT', 2 : 'LIB_HK', 3 : 'MEM_HK', 4 : 'HW_STAT', 5 : 'SEQ_HK', 6 : 'MEM', 7 : 'FP_HK', 8 : 'TBL_HK', 9 : 'ECHO', 10 : 'PAYLOAD_SCI_PKT', 11 : 'DES_HK', 12 : 'CMD_HK', 13 : 'DES_SCHED', 14 : 'DES_TASK', 15 : 'LOG_HK', 16 : 'PAYLOAD_HK', 17 : 'TLM_HK', 18 : 'TIME_HK', 19 : 'DES_TIME', 20 : 'EVT_LOG', 21 : 'STORE_HK', 22 : 'FP_TEST', 23 : 'DSPS_LOG', 24 : 'SCI_META', 25 : 'DSPS_PARAM', 26 : 'MODE_PKT', 27 : 'ANALOG_HK', 28 : 'BATTERY_0_HK', 29 : 'DSPS_TIME', 30 : 'EPS_HK', 32 : 'SCI_HK', 33 : 'UHF_HK', 34 : 'UHF_PASS', 35 : 'DSPS_DATA', 36 : 'VERSION', 37 : 'FLASH_HK', 38 : 'BATTERY_ANA', 39 : 'ADCS_HK', 40 : 'XBAND_HK', 68 : 'PBK_PKT', 69 : 'XBAND_REG', 41 : 'ADCS_TLM_PROC', 42 : 'ADCS_COMMAND_TLM', 43 : 'ADCS_GENERAL', 44 : 'ADCS_TIME', 45 : 'ADCS_REFS', 46 : 'ADCS_ATT_DET', 47 : 'ADCS_ATT_CMD', 48 : 'ADCS_RW_DRIVE', 49 : 'ADCS_TRACKER', 50 : 'ADCS_ATT_CTRL', 51 : 'ADCS_MOMENTUM', 52 : 'ADCS_CSS', 53 : 'ADCS_MAG', 54 : 'ADCS_IMU', 55 : 'ADCS_CLOCK_SYNC', 56 : 'ADCS_ANALOGS', 57 : 'ADCS_TABLES', 58 : 'ADCS_TRACKER_2', 59 : 'ADCS_GPS', 60 : 'ADCS_CAL', 61 : 'ADCS_TRACKER_CTRL', 62 : 'ADCS_EXT_TRACKER_2', 63 : 'ADCS_L0',}
def CONVERT_store_map_apid3(val):
    try:
        return CONVERT_store_map_apid3_dict[val]
    except:
        return val
CONVERT_store_map_partition3_dict = { 0 : 'MISC', 1 : 'LOG', 2 : 'ADCS', 3 : 'HK', 4 : 'SCI', 5 : 'DSPS', 6 : 'DOWNLINK',}
def CONVERT_store_map_partition3(val):
    try:
        return CONVERT_store_map_partition3_dict[val]
    except:
        return val
CONVERT_store_map_apid4_dict = { 1 : 'SW_STAT', 2 : 'LIB_HK', 3 : 'MEM_HK', 4 : 'HW_STAT', 5 : 'SEQ_HK', 6 : 'MEM', 7 : 'FP_HK', 8 : 'TBL_HK', 9 : 'ECHO', 10 : 'PAYLOAD_SCI_PKT', 11 : 'DES_HK', 12 : 'CMD_HK', 13 : 'DES_SCHED', 14 : 'DES_TASK', 15 : 'LOG_HK', 16 : 'PAYLOAD_HK', 17 : 'TLM_HK', 18 : 'TIME_HK', 19 : 'DES_TIME', 20 : 'EVT_LOG', 21 : 'STORE_HK', 22 : 'FP_TEST', 23 : 'DSPS_LOG', 24 : 'SCI_META', 25 : 'DSPS_PARAM', 26 : 'MODE_PKT', 27 : 'ANALOG_HK', 28 : 'BATTERY_0_HK', 29 : 'DSPS_TIME', 30 : 'EPS_HK', 32 : 'SCI_HK', 33 : 'UHF_HK', 34 : 'UHF_PASS', 35 : 'DSPS_DATA', 36 : 'VERSION', 37 : 'FLASH_HK', 38 : 'BATTERY_ANA', 39 : 'ADCS_HK', 40 : 'XBAND_HK', 68 : 'PBK_PKT', 69 : 'XBAND_REG', 41 : 'ADCS_TLM_PROC', 42 : 'ADCS_COMMAND_TLM', 43 : 'ADCS_GENERAL', 44 : 'ADCS_TIME', 45 : 'ADCS_REFS', 46 : 'ADCS_ATT_DET', 47 : 'ADCS_ATT_CMD', 48 : 'ADCS_RW_DRIVE', 49 : 'ADCS_TRACKER', 50 : 'ADCS_ATT_CTRL', 51 : 'ADCS_MOMENTUM', 52 : 'ADCS_CSS', 53 : 'ADCS_MAG', 54 : 'ADCS_IMU', 55 : 'ADCS_CLOCK_SYNC', 56 : 'ADCS_ANALOGS', 57 : 'ADCS_TABLES', 58 : 'ADCS_TRACKER_2', 59 : 'ADCS_GPS', 60 : 'ADCS_CAL', 61 : 'ADCS_TRACKER_CTRL', 62 : 'ADCS_EXT_TRACKER_2', 63 : 'ADCS_L0',}
def CONVERT_store_map_apid4(val):
    try:
        return CONVERT_store_map_apid4_dict[val]
    except:
        return val
CONVERT_store_map_partition4_dict = { 0 : 'MISC', 1 : 'LOG', 2 : 'ADCS', 3 : 'HK', 4 : 'SCI', 5 : 'DSPS', 6 : 'DOWNLINK',}
def CONVERT_store_map_partition4(val):
    try:
        return CONVERT_store_map_partition4_dict[val]
    except:
        return val
CONVERT_store_map_apid5_dict = { 1 : 'SW_STAT', 2 : 'LIB_HK', 3 : 'MEM_HK', 4 : 'HW_STAT', 5 : 'SEQ_HK', 6 : 'MEM', 7 : 'FP_HK', 8 : 'TBL_HK', 9 : 'ECHO', 10 : 'PAYLOAD_SCI_PKT', 11 : 'DES_HK', 12 : 'CMD_HK', 13 : 'DES_SCHED', 14 : 'DES_TASK', 15 : 'LOG_HK', 16 : 'PAYLOAD_HK', 17 : 'TLM_HK', 18 : 'TIME_HK', 19 : 'DES_TIME', 20 : 'EVT_LOG', 21 : 'STORE_HK', 22 : 'FP_TEST', 23 : 'DSPS_LOG', 24 : 'SCI_META', 25 : 'DSPS_PARAM', 26 : 'MODE_PKT', 27 : 'ANALOG_HK', 28 : 'BATTERY_0_HK', 29 : 'DSPS_TIME', 30 : 'EPS_HK', 32 : 'SCI_HK', 33 : 'UHF_HK', 34 : 'UHF_PASS', 35 : 'DSPS_DATA', 36 : 'VERSION', 37 : 'FLASH_HK', 38 : 'BATTERY_ANA', 39 : 'ADCS_HK', 40 : 'XBAND_HK', 68 : 'PBK_PKT', 69 : 'XBAND_REG', 41 : 'ADCS_TLM_PROC', 42 : 'ADCS_COMMAND_TLM', 43 : 'ADCS_GENERAL', 44 : 'ADCS_TIME', 45 : 'ADCS_REFS', 46 : 'ADCS_ATT_DET', 47 : 'ADCS_ATT_CMD', 48 : 'ADCS_RW_DRIVE', 49 : 'ADCS_TRACKER', 50 : 'ADCS_ATT_CTRL', 51 : 'ADCS_MOMENTUM', 52 : 'ADCS_CSS', 53 : 'ADCS_MAG', 54 : 'ADCS_IMU', 55 : 'ADCS_CLOCK_SYNC', 56 : 'ADCS_ANALOGS', 57 : 'ADCS_TABLES', 58 : 'ADCS_TRACKER_2', 59 : 'ADCS_GPS', 60 : 'ADCS_CAL', 61 : 'ADCS_TRACKER_CTRL', 62 : 'ADCS_EXT_TRACKER_2', 63 : 'ADCS_L0',}
def CONVERT_store_map_apid5(val):
    try:
        return CONVERT_store_map_apid5_dict[val]
    except:
        return val
CONVERT_store_map_partition5_dict = { 0 : 'MISC', 1 : 'LOG', 2 : 'ADCS', 3 : 'HK', 4 : 'SCI', 5 : 'DSPS', 6 : 'DOWNLINK',}
def CONVERT_store_map_partition5(val):
    try:
        return CONVERT_store_map_partition5_dict[val]
    except:
        return val
CONVERT_store_map_apid6_dict = { 1 : 'SW_STAT', 2 : 'LIB_HK', 3 : 'MEM_HK', 4 : 'HW_STAT', 5 : 'SEQ_HK', 6 : 'MEM', 7 : 'FP_HK', 8 : 'TBL_HK', 9 : 'ECHO', 10 : 'PAYLOAD_SCI_PKT', 11 : 'DES_HK', 12 : 'CMD_HK', 13 : 'DES_SCHED', 14 : 'DES_TASK', 15 : 'LOG_HK', 16 : 'PAYLOAD_HK', 17 : 'TLM_HK', 18 : 'TIME_HK', 19 : 'DES_TIME', 20 : 'EVT_LOG', 21 : 'STORE_HK', 22 : 'FP_TEST', 23 : 'DSPS_LOG', 24 : 'SCI_META', 25 : 'DSPS_PARAM', 26 : 'MODE_PKT', 27 : 'ANALOG_HK', 28 : 'BATTERY_0_HK', 29 : 'DSPS_TIME', 30 : 'EPS_HK', 32 : 'SCI_HK', 33 : 'UHF_HK', 34 : 'UHF_PASS', 35 : 'DSPS_DATA', 36 : 'VERSION', 37 : 'FLASH_HK', 38 : 'BATTERY_ANA', 39 : 'ADCS_HK', 40 : 'XBAND_HK', 68 : 'PBK_PKT', 69 : 'XBAND_REG', 41 : 'ADCS_TLM_PROC', 42 : 'ADCS_COMMAND_TLM', 43 : 'ADCS_GENERAL', 44 : 'ADCS_TIME', 45 : 'ADCS_REFS', 46 : 'ADCS_ATT_DET', 47 : 'ADCS_ATT_CMD', 48 : 'ADCS_RW_DRIVE', 49 : 'ADCS_TRACKER', 50 : 'ADCS_ATT_CTRL', 51 : 'ADCS_MOMENTUM', 52 : 'ADCS_CSS', 53 : 'ADCS_MAG', 54 : 'ADCS_IMU', 55 : 'ADCS_CLOCK_SYNC', 56 : 'ADCS_ANALOGS', 57 : 'ADCS_TABLES', 58 : 'ADCS_TRACKER_2', 59 : 'ADCS_GPS', 60 : 'ADCS_CAL', 61 : 'ADCS_TRACKER_CTRL', 62 : 'ADCS_EXT_TRACKER_2', 63 : 'ADCS_L0',}
def CONVERT_store_map_apid6(val):
    try:
        return CONVERT_store_map_apid6_dict[val]
    except:
        return val
CONVERT_store_map_partition6_dict = { 0 : 'MISC', 1 : 'LOG', 2 : 'ADCS', 3 : 'HK', 4 : 'SCI', 5 : 'DSPS', 6 : 'DOWNLINK',}
def CONVERT_store_map_partition6(val):
    try:
        return CONVERT_store_map_partition6_dict[val]
    except:
        return val
CONVERT_store_map_apid7_dict = { 1 : 'SW_STAT', 2 : 'LIB_HK', 3 : 'MEM_HK', 4 : 'HW_STAT', 5 : 'SEQ_HK', 6 : 'MEM', 7 : 'FP_HK', 8 : 'TBL_HK', 9 : 'ECHO', 10 : 'PAYLOAD_SCI_PKT', 11 : 'DES_HK', 12 : 'CMD_HK', 13 : 'DES_SCHED', 14 : 'DES_TASK', 15 : 'LOG_HK', 16 : 'PAYLOAD_HK', 17 : 'TLM_HK', 18 : 'TIME_HK', 19 : 'DES_TIME', 20 : 'EVT_LOG', 21 : 'STORE_HK', 22 : 'FP_TEST', 23 : 'DSPS_LOG', 24 : 'SCI_META', 25 : 'DSPS_PARAM', 26 : 'MODE_PKT', 27 : 'ANALOG_HK', 28 : 'BATTERY_0_HK', 29 : 'DSPS_TIME', 30 : 'EPS_HK', 32 : 'SCI_HK', 33 : 'UHF_HK', 34 : 'UHF_PASS', 35 : 'DSPS_DATA', 36 : 'VERSION', 37 : 'FLASH_HK', 38 : 'BATTERY_ANA', 39 : 'ADCS_HK', 40 : 'XBAND_HK', 68 : 'PBK_PKT', 69 : 'XBAND_REG', 41 : 'ADCS_TLM_PROC', 42 : 'ADCS_COMMAND_TLM', 43 : 'ADCS_GENERAL', 44 : 'ADCS_TIME', 45 : 'ADCS_REFS', 46 : 'ADCS_ATT_DET', 47 : 'ADCS_ATT_CMD', 48 : 'ADCS_RW_DRIVE', 49 : 'ADCS_TRACKER', 50 : 'ADCS_ATT_CTRL', 51 : 'ADCS_MOMENTUM', 52 : 'ADCS_CSS', 53 : 'ADCS_MAG', 54 : 'ADCS_IMU', 55 : 'ADCS_CLOCK_SYNC', 56 : 'ADCS_ANALOGS', 57 : 'ADCS_TABLES', 58 : 'ADCS_TRACKER_2', 59 : 'ADCS_GPS', 60 : 'ADCS_CAL', 61 : 'ADCS_TRACKER_CTRL', 62 : 'ADCS_EXT_TRACKER_2', 63 : 'ADCS_L0',}
def CONVERT_store_map_apid7(val):
    try:
        return CONVERT_store_map_apid7_dict[val]
    except:
        return val
CONVERT_store_map_partition7_dict = { 0 : 'MISC', 1 : 'LOG', 2 : 'ADCS', 3 : 'HK', 4 : 'SCI', 5 : 'DSPS', 6 : 'DOWNLINK',}
def CONVERT_store_map_partition7(val):
    try:
        return CONVERT_store_map_partition7_dict[val]
    except:
        return val
CONVERT_store_map_apid8_dict = { 1 : 'SW_STAT', 2 : 'LIB_HK', 3 : 'MEM_HK', 4 : 'HW_STAT', 5 : 'SEQ_HK', 6 : 'MEM', 7 : 'FP_HK', 8 : 'TBL_HK', 9 : 'ECHO', 10 : 'PAYLOAD_SCI_PKT', 11 : 'DES_HK', 12 : 'CMD_HK', 13 : 'DES_SCHED', 14 : 'DES_TASK', 15 : 'LOG_HK', 16 : 'PAYLOAD_HK', 17 : 'TLM_HK', 18 : 'TIME_HK', 19 : 'DES_TIME', 20 : 'EVT_LOG', 21 : 'STORE_HK', 22 : 'FP_TEST', 23 : 'DSPS_LOG', 24 : 'SCI_META', 25 : 'DSPS_PARAM', 26 : 'MODE_PKT', 27 : 'ANALOG_HK', 28 : 'BATTERY_0_HK', 29 : 'DSPS_TIME', 30 : 'EPS_HK', 32 : 'SCI_HK', 33 : 'UHF_HK', 34 : 'UHF_PASS', 35 : 'DSPS_DATA', 36 : 'VERSION', 37 : 'FLASH_HK', 38 : 'BATTERY_ANA', 39 : 'ADCS_HK', 40 : 'XBAND_HK', 68 : 'PBK_PKT', 69 : 'XBAND_REG', 41 : 'ADCS_TLM_PROC', 42 : 'ADCS_COMMAND_TLM', 43 : 'ADCS_GENERAL', 44 : 'ADCS_TIME', 45 : 'ADCS_REFS', 46 : 'ADCS_ATT_DET', 47 : 'ADCS_ATT_CMD', 48 : 'ADCS_RW_DRIVE', 49 : 'ADCS_TRACKER', 50 : 'ADCS_ATT_CTRL', 51 : 'ADCS_MOMENTUM', 52 : 'ADCS_CSS', 53 : 'ADCS_MAG', 54 : 'ADCS_IMU', 55 : 'ADCS_CLOCK_SYNC', 56 : 'ADCS_ANALOGS', 57 : 'ADCS_TABLES', 58 : 'ADCS_TRACKER_2', 59 : 'ADCS_GPS', 60 : 'ADCS_CAL', 61 : 'ADCS_TRACKER_CTRL', 62 : 'ADCS_EXT_TRACKER_2', 63 : 'ADCS_L0',}
def CONVERT_store_map_apid8(val):
    try:
        return CONVERT_store_map_apid8_dict[val]
    except:
        return val
CONVERT_store_map_partition8_dict = { 0 : 'MISC', 1 : 'LOG', 2 : 'ADCS', 3 : 'HK', 4 : 'SCI', 5 : 'DSPS', 6 : 'DOWNLINK',}
def CONVERT_store_map_partition8(val):
    try:
        return CONVERT_store_map_partition8_dict[val]
    except:
        return val
CONVERT_store_map_apid9_dict = { 1 : 'SW_STAT', 2 : 'LIB_HK', 3 : 'MEM_HK', 4 : 'HW_STAT', 5 : 'SEQ_HK', 6 : 'MEM', 7 : 'FP_HK', 8 : 'TBL_HK', 9 : 'ECHO', 10 : 'PAYLOAD_SCI_PKT', 11 : 'DES_HK', 12 : 'CMD_HK', 13 : 'DES_SCHED', 14 : 'DES_TASK', 15 : 'LOG_HK', 16 : 'PAYLOAD_HK', 17 : 'TLM_HK', 18 : 'TIME_HK', 19 : 'DES_TIME', 20 : 'EVT_LOG', 21 : 'STORE_HK', 22 : 'FP_TEST', 23 : 'DSPS_LOG', 24 : 'SCI_META', 25 : 'DSPS_PARAM', 26 : 'MODE_PKT', 27 : 'ANALOG_HK', 28 : 'BATTERY_0_HK', 29 : 'DSPS_TIME', 30 : 'EPS_HK', 32 : 'SCI_HK', 33 : 'UHF_HK', 34 : 'UHF_PASS', 35 : 'DSPS_DATA', 36 : 'VERSION', 37 : 'FLASH_HK', 38 : 'BATTERY_ANA', 39 : 'ADCS_HK', 40 : 'XBAND_HK', 68 : 'PBK_PKT', 69 : 'XBAND_REG', 41 : 'ADCS_TLM_PROC', 42 : 'ADCS_COMMAND_TLM', 43 : 'ADCS_GENERAL', 44 : 'ADCS_TIME', 45 : 'ADCS_REFS', 46 : 'ADCS_ATT_DET', 47 : 'ADCS_ATT_CMD', 48 : 'ADCS_RW_DRIVE', 49 : 'ADCS_TRACKER', 50 : 'ADCS_ATT_CTRL', 51 : 'ADCS_MOMENTUM', 52 : 'ADCS_CSS', 53 : 'ADCS_MAG', 54 : 'ADCS_IMU', 55 : 'ADCS_CLOCK_SYNC', 56 : 'ADCS_ANALOGS', 57 : 'ADCS_TABLES', 58 : 'ADCS_TRACKER_2', 59 : 'ADCS_GPS', 60 : 'ADCS_CAL', 61 : 'ADCS_TRACKER_CTRL', 62 : 'ADCS_EXT_TRACKER_2', 63 : 'ADCS_L0',}
def CONVERT_store_map_apid9(val):
    try:
        return CONVERT_store_map_apid9_dict[val]
    except:
        return val
CONVERT_store_map_partition9_dict = { 0 : 'MISC', 1 : 'LOG', 2 : 'ADCS', 3 : 'HK', 4 : 'SCI', 5 : 'DSPS', 6 : 'DOWNLINK',}
def CONVERT_store_map_partition9(val):
    try:
        return CONVERT_store_map_partition9_dict[val]
    except:
        return val
CONVERT_uhf_recv_fmt_err_code_dict = { 0 : 'PID', 1 : 'CTRL', 2 : 'DST', 3 : 'SRC', 4 : 'CRC', 255 : 'NONE',}
def CONVERT_uhf_recv_fmt_err_code(val):
    try:
        return CONVERT_uhf_recv_fmt_err_code_dict[val]
    except:
        return val
CONVERT_pl_pwr_cycle_suncet_dict = { 0 : 'INACTIVE', 1 : 'ACTIVE',}
def CONVERT_pl_pwr_cycle_suncet(val):
    try:
        return CONVERT_pl_pwr_cycle_suncet_dict[val]
    except:
        return val
CONVERT_pl_pwr_off_suncet_dict = { 0 : 'INACTIVE', 1 : 'ACTIVE',}
def CONVERT_pl_pwr_off_suncet(val):
    try:
        return CONVERT_pl_pwr_off_suncet_dict[val]
    except:
        return val
CONVERT_pl_stat_st_suncet_dict = { 0 : 'DIS', 1 : 'ENA',}
def CONVERT_pl_stat_st_suncet(val):
    try:
        return CONVERT_pl_stat_st_suncet_dict[val]
    except:
        return val
CONVERT_pl_time_st_suncet_dict = { 0 : 'DIS', 1 : 'ENA',}
def CONVERT_pl_time_st_suncet(val):
    try:
        return CONVERT_pl_time_st_suncet_dict[val]
    except:
        return val
CONVERT_pl_alive_st_suncet_dict = { 0 : 'OFF', 1 : 'DEAD', 2 : 'ALIVE',}
def CONVERT_pl_alive_st_suncet(val):
    try:
        return CONVERT_pl_alive_st_suncet_dict[val]
    except:
        return val
CONVERT_pl_pwr_cycle_dsps_dict = { 0 : 'INACTIVE', 1 : 'ACTIVE',}
def CONVERT_pl_pwr_cycle_dsps(val):
    try:
        return CONVERT_pl_pwr_cycle_dsps_dict[val]
    except:
        return val
CONVERT_pl_pwr_off_dsps_dict = { 0 : 'INACTIVE', 1 : 'ACTIVE',}
def CONVERT_pl_pwr_off_dsps(val):
    try:
        return CONVERT_pl_pwr_off_dsps_dict[val]
    except:
        return val
CONVERT_pl_stat_st_dsps_dict = { 0 : 'DIS', 1 : 'ENA',}
def CONVERT_pl_stat_st_dsps(val):
    try:
        return CONVERT_pl_stat_st_dsps_dict[val]
    except:
        return val
CONVERT_pl_time_st_dsps_dict = { 0 : 'DIS', 1 : 'ENA',}
def CONVERT_pl_time_st_dsps(val):
    try:
        return CONVERT_pl_time_st_dsps_dict[val]
    except:
        return val
CONVERT_pl_alive_st_dsps_dict = { 0 : 'OFF', 1 : 'DEAD', 2 : 'ALIVE',}
def CONVERT_pl_alive_st_dsps(val):
    try:
        return CONVERT_pl_alive_st_dsps_dict[val]
    except:
        return val
CONVERT_adcs_alive_dict = { 0 : 'OFF', 1 : 'DEAD', 2 : 'ALIVE',}
def CONVERT_adcs_alive(val):
    try:
        return CONVERT_adcs_alive_dict[val]
    except:
        return val
CONVERT_adcs_img_dump_state_0_dict = { 0 : 'IDLE', 1 : 'LINE', 2 : 'DUMP', 3 : 'PAUSE',}
def CONVERT_adcs_img_dump_state_0(val):
    try:
        return CONVERT_adcs_img_dump_state_0_dict[val]
    except:
        return val
CONVERT_adcs_l0_rst_arm_status_dict = { 0 : 'NONE', 1 : 'ARMED',}
def CONVERT_adcs_l0_rst_arm_status(val):
    try:
        return CONVERT_adcs_l0_rst_arm_status_dict[val]
    except:
        return val
CONVERT_adcs_l0_wdog_evt_status_dict = { 0 : 'NONE', 1 : 'WDOG',}
def CONVERT_adcs_l0_wdog_evt_status(val):
    try:
        return CONVERT_adcs_l0_wdog_evt_status_dict[val]
    except:
        return val
CONVERT_adcs_l0_wdog_ena_status_dict = { 0 : 'DISABLED', 1 : 'ENABLED',}
def CONVERT_adcs_l0_wdog_ena_status(val):
    try:
        return CONVERT_adcs_l0_wdog_ena_status_dict[val]
    except:
        return val
CONVERT_adcs_l0_boot_relay_status_dict = { 0 : 'REDUNDANT', 3 : 'PRIMARY',}
def CONVERT_adcs_l0_boot_relay_status(val):
    try:
        return CONVERT_adcs_l0_boot_relay_status_dict[val]
    except:
        return val
CONVERT_adcs_l0_boot_table_dict = { 0 : 'FLASH', 1 : 'COMPILED',}
def CONVERT_adcs_l0_boot_table(val):
    try:
        return CONVERT_adcs_l0_boot_table_dict[val]
    except:
        return val
CONVERT_cmd_succ_op_dict = { 33 : 'DES_RST_STATS', 34 : 'DES_ADD_TASK', 35 : 'DES_SUB_TASK', 36 : 'DES_ADD_BACK', 37 : 'DES_SUB_BACK', 38 : 'DES_SET_TIME', 39 : 'DES_DUMP_SCHED', 40 : 'DES_SET_TASK_NUM', 16 : 'FP_RST_STATS', 17 : 'FP_RST_RESULTS', 18 : 'FP_VALIDATE', 19 : 'FP_SET_STATE', 20 : 'FP_SET_WP_STATE', 22 : 'FP_DUMP_RESULTS', 23 : 'FP_SET_WP', 24 : 'FP_SET_WP_THRESH', 25 : 'FP_SET_WP_RESP', 26 : 'FP_SET_TEST', 176 : 'MRAM_CLEAR', 179 : 'MRAM_ERR_INJ', 180 : 'MRAM_PWR', 181 : 'MRAM_PWR_TOGGLE', 185 : 'NAND_BAD_BLOCK', 186 : 'NAND_FORMAT', 187 : 'NAND_FORMAT_HALT', 188 : 'NAND_BB_INIT', 189 : 'NAND_REMAP', 64 : 'SEQ_LOAD', 65 : 'SEQ_INIT', 66 : 'SEQ_STATE', 67 : 'SEQ_VERIFY', 68 : 'SEQ_STOP', 69 : 'SEQ_FIND', 70 : 'SEQ_INFO', 71 : 'SEQ_DUMP', 72 : 'SEQ_RST_STATS', 73 : 'SEQ_LD_START', 74 : 'SEQ_LD_COMMIT', 75 : 'SEQ_LD_ABORT', 76 : 'SEQ_LIBRARY', 77 : 'SEQ_CLEAR', 144 : 'STORE_WRITE_STATE', 145 : 'STORE_READ', 146 : 'STORE_HALT', 147 : 'STORE_PLAYBACK', 149 : 'STORE_SELECT', 150 : 'STORE_SET_PARTITION', 151 : 'STORE_RESET_PARTITION', 152 : 'STORE_FLUSH', 153 : 'STORE_MOVE_READ', 154 : 'STORE_MULTI_PLAYBACK', 224 : 'CMD_OPCODE_UHF_PASS', 225 : 'CMD_OPCODE_UHF_INIT', 226 : 'CMD_OPCODE_UHF_RESP_STATE', 240 : 'PAYLOAD_MSG_STATE', 241 : 'PAYLOAD_HK_RESET', 242 : 'PAYLOAD_FLAGS_RESET', 243 : 'PAYLOAD_SET_ALIVENESS', 256 : 'EPS_SET_BAT_TIME', 257 : 'EPS_GET_BAT_TIME', 258 : 'EPS_BAT_PASS', 259 : 'EPS_BAT_TLM_STATE', 260 : 'EPS_BAT_HEATER', 261 : 'EPS_BAT_SET_CSP1', 262 : 'EPS_BAT_REBOOT', 263 : 'EPS_BAT_WDT', 160 : 'CMD_OPCODE_CFI_PWR_ON', 161 : 'CMD_OPCODE_CFI_PWR_OFF', 162 : 'CMD_OPCODE_CFI_SELECT', 163 : 'CMD_OPCODE_CFI_SELECT_TRIO', 272 : 'ADCS_PASS', 273 : 'ADCS_RESET', 274 : 'ADCS_READ', 275 : 'ADCS_COARSE_POINT', 276 : 'ADCS_FINE_POINT', 277 : 'ADCS_RAM_POINT', 278 : 'ADCS_FINE_UPDATE', 279 : 'ADCS_RAM_UPDATE', 280 : 'ADCS_ECLIPSE_CHECK', 281 : 'ADCS_DUMP_IMAGE', 282 : 'ADCS_DUMP_STATE', 283 : 'ADCS_INIT_EPHEMERIS', 284 : 'ADCS_SET_TIME', 0 : 'NOOP', 1 : 'ARM', 2 : 'CMD_RST_STATS', 3 : 'CMD_XSUM', 4 : 'CMD_ECHO_STATE', 5 : 'CMD_VERSION', 48 : 'LOG_ROUTE', 49 : 'LOG_STATE', 50 : 'LOG_RST_STATS', 52 : 'LOG_RESET_READ', 53 : 'LOG_ISSUE', 54 : 'LOG_DUMP_INFO', 55 : 'LOG_SET_PUBLISH', 56 : 'LOG_ALL_ROUTE', 80 : 'MEM_DUMP', 81 : 'MEM_LOAD', 82 : 'MEM_ERASE', 83 : 'MEM_XSUM', 84 : 'MEM_ABORT', 85 : 'MEM_RESET', 86 : 'MEM_LOAD_DWORD', 87 : 'MEM_LOAD_WORD', 88 : 'MEM_LOAD_BYTE', 89 : 'MEM_RESET_COUNTERS', 90 : 'MEM_COPY', 91 : 'MEM_TEST', 96 : 'PKT_ISSUE', 97 : 'PKT_SET_RATE', 98 : 'PKT_SET_STREAM', 99 : 'PKT_SET_PRIORITY', 100 : 'PKT_QUERY_APID', 101 : 'PKT_SET_DELAY', 102 : 'PKT_COMMIT_TABLE', 103 : 'LIB_RESET_COUNTERS', 104 : 'LIB_DUMP_ENTRIES', 105 : 'PKT_RESET_COUNTERS', 128 : 'TBL_DUMP', 129 : 'TBL_LOAD', 130 : 'TBL_LOAD_START', 131 : 'TBL_COMMIT', 132 : 'TBL_ABORT', 133 : 'TBL_VERIFY', 134 : 'TBL_SAVE', 135 : 'TBL_RESET_STATS', 208 : 'EPS_PWR_ON', 209 : 'EPS_PWR_OFF', 210 : 'EPS_PWR_CYCLE', 211 : 'EPS_DEPLOY', 212 : 'EPS_DEPLOY_ABORT', 304 : 'HK_TIME_RESET', 201 : 'DOWNLINK', 207 : 'CLT_RESET', 206 : 'CLT_THRESHOLD', 205 : 'WATCHDOG', 204 : 'PHOENIX', 203 : 'SAFE', 202 : 'SCIENCE', 200 : 'SET_AUTO_PROMOTE_SCI', 288 : 'XBAND_WRITE', 289 : 'XBAND_READ', 290 : 'XBAND_ENABLE_TX',}
def CONVERT_cmd_succ_op(val):
    try:
        return CONVERT_cmd_succ_op_dict[val]
    except:
        return val
CONVERT_cmd_rjct_op_dict = { 33 : 'DES_RST_STATS', 34 : 'DES_ADD_TASK', 35 : 'DES_SUB_TASK', 36 : 'DES_ADD_BACK', 37 : 'DES_SUB_BACK', 38 : 'DES_SET_TIME', 39 : 'DES_DUMP_SCHED', 40 : 'DES_SET_TASK_NUM', 16 : 'FP_RST_STATS', 17 : 'FP_RST_RESULTS', 18 : 'FP_VALIDATE', 19 : 'FP_SET_STATE', 20 : 'FP_SET_WP_STATE', 22 : 'FP_DUMP_RESULTS', 23 : 'FP_SET_WP', 24 : 'FP_SET_WP_THRESH', 25 : 'FP_SET_WP_RESP', 26 : 'FP_SET_TEST', 176 : 'MRAM_CLEAR', 179 : 'MRAM_ERR_INJ', 180 : 'MRAM_PWR', 181 : 'MRAM_PWR_TOGGLE', 185 : 'NAND_BAD_BLOCK', 186 : 'NAND_FORMAT', 187 : 'NAND_FORMAT_HALT', 188 : 'NAND_BB_INIT', 189 : 'NAND_REMAP', 64 : 'SEQ_LOAD', 65 : 'SEQ_INIT', 66 : 'SEQ_STATE', 67 : 'SEQ_VERIFY', 68 : 'SEQ_STOP', 69 : 'SEQ_FIND', 70 : 'SEQ_INFO', 71 : 'SEQ_DUMP', 72 : 'SEQ_RST_STATS', 73 : 'SEQ_LD_START', 74 : 'SEQ_LD_COMMIT', 75 : 'SEQ_LD_ABORT', 76 : 'SEQ_LIBRARY', 77 : 'SEQ_CLEAR', 144 : 'STORE_WRITE_STATE', 145 : 'STORE_READ', 146 : 'STORE_HALT', 147 : 'STORE_PLAYBACK', 149 : 'STORE_SELECT', 150 : 'STORE_SET_PARTITION', 151 : 'STORE_RESET_PARTITION', 152 : 'STORE_FLUSH', 153 : 'STORE_MOVE_READ', 154 : 'STORE_MULTI_PLAYBACK', 224 : 'CMD_OPCODE_UHF_PASS', 225 : 'CMD_OPCODE_UHF_INIT', 226 : 'CMD_OPCODE_UHF_RESP_STATE', 240 : 'PAYLOAD_MSG_STATE', 241 : 'PAYLOAD_HK_RESET', 242 : 'PAYLOAD_FLAGS_RESET', 243 : 'PAYLOAD_SET_ALIVENESS', 256 : 'EPS_SET_BAT_TIME', 257 : 'EPS_GET_BAT_TIME', 258 : 'EPS_BAT_PASS', 259 : 'EPS_BAT_TLM_STATE', 260 : 'EPS_BAT_HEATER', 261 : 'EPS_BAT_SET_CSP1', 262 : 'EPS_BAT_REBOOT', 263 : 'EPS_BAT_WDT', 160 : 'CMD_OPCODE_CFI_PWR_ON', 161 : 'CMD_OPCODE_CFI_PWR_OFF', 162 : 'CMD_OPCODE_CFI_SELECT', 163 : 'CMD_OPCODE_CFI_SELECT_TRIO', 272 : 'ADCS_PASS', 273 : 'ADCS_RESET', 274 : 'ADCS_READ', 275 : 'ADCS_COARSE_POINT', 276 : 'ADCS_FINE_POINT', 277 : 'ADCS_RAM_POINT', 278 : 'ADCS_FINE_UPDATE', 279 : 'ADCS_RAM_UPDATE', 280 : 'ADCS_ECLIPSE_CHECK', 281 : 'ADCS_DUMP_IMAGE', 282 : 'ADCS_DUMP_STATE', 283 : 'ADCS_INIT_EPHEMERIS', 284 : 'ADCS_SET_TIME', 0 : 'NOOP', 1 : 'ARM', 2 : 'CMD_RST_STATS', 3 : 'CMD_XSUM', 4 : 'CMD_ECHO_STATE', 5 : 'CMD_VERSION', 48 : 'LOG_ROUTE', 49 : 'LOG_STATE', 50 : 'LOG_RST_STATS', 52 : 'LOG_RESET_READ', 53 : 'LOG_ISSUE', 54 : 'LOG_DUMP_INFO', 55 : 'LOG_SET_PUBLISH', 56 : 'LOG_ALL_ROUTE', 80 : 'MEM_DUMP', 81 : 'MEM_LOAD', 82 : 'MEM_ERASE', 83 : 'MEM_XSUM', 84 : 'MEM_ABORT', 85 : 'MEM_RESET', 86 : 'MEM_LOAD_DWORD', 87 : 'MEM_LOAD_WORD', 88 : 'MEM_LOAD_BYTE', 89 : 'MEM_RESET_COUNTERS', 90 : 'MEM_COPY', 91 : 'MEM_TEST', 96 : 'PKT_ISSUE', 97 : 'PKT_SET_RATE', 98 : 'PKT_SET_STREAM', 99 : 'PKT_SET_PRIORITY', 100 : 'PKT_QUERY_APID', 101 : 'PKT_SET_DELAY', 102 : 'PKT_COMMIT_TABLE', 103 : 'LIB_RESET_COUNTERS', 104 : 'LIB_DUMP_ENTRIES', 105 : 'PKT_RESET_COUNTERS', 128 : 'TBL_DUMP', 129 : 'TBL_LOAD', 130 : 'TBL_LOAD_START', 131 : 'TBL_COMMIT', 132 : 'TBL_ABORT', 133 : 'TBL_VERIFY', 134 : 'TBL_SAVE', 135 : 'TBL_RESET_STATS', 208 : 'EPS_PWR_ON', 209 : 'EPS_PWR_OFF', 210 : 'EPS_PWR_CYCLE', 211 : 'EPS_DEPLOY', 212 : 'EPS_DEPLOY_ABORT', 304 : 'HK_TIME_RESET', 201 : 'DOWNLINK', 207 : 'CLT_RESET', 206 : 'CLT_THRESHOLD', 205 : 'WATCHDOG', 204 : 'PHOENIX', 203 : 'SAFE', 202 : 'SCIENCE', 200 : 'SET_AUTO_PROMOTE_SCI', 288 : 'XBAND_WRITE', 289 : 'XBAND_READ', 290 : 'XBAND_ENABLE_TX',}
def CONVERT_cmd_rjct_op(val):
    try:
        return CONVERT_cmd_rjct_op_dict[val]
    except:
        return val
CONVERT_cmd_fail_code_dict = { 0 : 'SUCCESS', 1 : 'MODE', 2 : 'ARM', 3 : 'SOURCE', 4 : 'OPCODE', 5 : 'METHOD', 6 : 'LENGTH', 7 : 'RANGE', 8 : 'CHECKSUM', 9 : 'PKT_TYPE',}
def CONVERT_cmd_fail_code(val):
    try:
        return CONVERT_cmd_fail_code_dict[val]
    except:
        return val
CONVERT_cmd_xsum_state_dict = { 0 : 'DIS', 1 : 'ENA',}
def CONVERT_cmd_xsum_state(val):
    try:
        return CONVERT_cmd_xsum_state_dict[val]
    except:
        return val
CONVERT_REUSABLE_SPARE_1_dict = {}
def CONVERT_REUSABLE_SPARE_1(val):
    try:
        return CONVERT_REUSABLE_SPARE_1_dict[val]
    except:
        return val
CONVERT_REUSABLE_SPARE_1_dict = {}
def CONVERT_REUSABLE_SPARE_1(val):
    try:
        return CONVERT_REUSABLE_SPARE_1_dict[val]
    except:
        return val
CONVERT_REUSABLE_SPARE_1_dict = {}
def CONVERT_REUSABLE_SPARE_1(val):
    try:
        return CONVERT_REUSABLE_SPARE_1_dict[val]
    except:
        return val
CONVERT_REUSABLE_SPARE_1_dict = {}
def CONVERT_REUSABLE_SPARE_1(val):
    try:
        return CONVERT_REUSABLE_SPARE_1_dict[val]
    except:
        return val
CONVERT_REUSABLE_SPARE_1_dict = {}
def CONVERT_REUSABLE_SPARE_1(val):
    try:
        return CONVERT_REUSABLE_SPARE_1_dict[val]
    except:
        return val
CONVERT_cmd_arm_state_uhf_dict = { 0 : 'OFF', 1 : 'ARMED',}
def CONVERT_cmd_arm_state_uhf(val):
    try:
        return CONVERT_cmd_arm_state_uhf_dict[val]
    except:
        return val
CONVERT_cmd_arm_state_seq_dict = { 0 : 'OFF', 1 : 'ARMED',}
def CONVERT_cmd_arm_state_seq(val):
    try:
        return CONVERT_cmd_arm_state_seq_dict[val]
    except:
        return val
CONVERT_cmd_arm_state_dbg_dict = { 0 : 'OFF', 1 : 'ARMED',}
def CONVERT_cmd_arm_state_dbg(val):
    try:
        return CONVERT_cmd_arm_state_dbg_dict[val]
    except:
        return val
CONVERT_cmd_echo_source_dict = { 0 : 'DBG', 1 : 'SEQ', 2 : 'UHF',}
def CONVERT_cmd_echo_source(val):
    try:
        return CONVERT_cmd_echo_source_dict[val]
    except:
        return val
CONVERT_cmd_echo_opcode_dict = { 33 : 'DES_RST_STATS', 34 : 'DES_ADD_TASK', 35 : 'DES_SUB_TASK', 36 : 'DES_ADD_BACK', 37 : 'DES_SUB_BACK', 38 : 'DES_SET_TIME', 39 : 'DES_DUMP_SCHED', 40 : 'DES_SET_TASK_NUM', 16 : 'FP_RST_STATS', 17 : 'FP_RST_RESULTS', 18 : 'FP_VALIDATE', 19 : 'FP_SET_STATE', 20 : 'FP_SET_WP_STATE', 22 : 'FP_DUMP_RESULTS', 23 : 'FP_SET_WP', 24 : 'FP_SET_WP_THRESH', 25 : 'FP_SET_WP_RESP', 26 : 'FP_SET_TEST', 176 : 'MRAM_CLEAR', 179 : 'MRAM_ERR_INJ', 180 : 'MRAM_PWR', 181 : 'MRAM_PWR_TOGGLE', 185 : 'NAND_BAD_BLOCK', 186 : 'NAND_FORMAT', 187 : 'NAND_FORMAT_HALT', 188 : 'NAND_BB_INIT', 189 : 'NAND_REMAP', 64 : 'SEQ_LOAD', 65 : 'SEQ_INIT', 66 : 'SEQ_STATE', 67 : 'SEQ_VERIFY', 68 : 'SEQ_STOP', 69 : 'SEQ_FIND', 70 : 'SEQ_INFO', 71 : 'SEQ_DUMP', 72 : 'SEQ_RST_STATS', 73 : 'SEQ_LD_START', 74 : 'SEQ_LD_COMMIT', 75 : 'SEQ_LD_ABORT', 76 : 'SEQ_LIBRARY', 77 : 'SEQ_CLEAR', 144 : 'STORE_WRITE_STATE', 145 : 'STORE_READ', 146 : 'STORE_HALT', 147 : 'STORE_PLAYBACK', 149 : 'STORE_SELECT', 150 : 'STORE_SET_PARTITION', 151 : 'STORE_RESET_PARTITION', 152 : 'STORE_FLUSH', 153 : 'STORE_MOVE_READ', 154 : 'STORE_MULTI_PLAYBACK', 224 : 'CMD_OPCODE_UHF_PASS', 225 : 'CMD_OPCODE_UHF_INIT', 226 : 'CMD_OPCODE_UHF_RESP_STATE', 240 : 'PAYLOAD_MSG_STATE', 241 : 'PAYLOAD_HK_RESET', 242 : 'PAYLOAD_FLAGS_RESET', 243 : 'PAYLOAD_SET_ALIVENESS', 256 : 'EPS_SET_BAT_TIME', 257 : 'EPS_GET_BAT_TIME', 258 : 'EPS_BAT_PASS', 259 : 'EPS_BAT_TLM_STATE', 260 : 'EPS_BAT_HEATER', 261 : 'EPS_BAT_SET_CSP1', 262 : 'EPS_BAT_REBOOT', 263 : 'EPS_BAT_WDT', 160 : 'CMD_OPCODE_CFI_PWR_ON', 161 : 'CMD_OPCODE_CFI_PWR_OFF', 162 : 'CMD_OPCODE_CFI_SELECT', 163 : 'CMD_OPCODE_CFI_SELECT_TRIO', 272 : 'ADCS_PASS', 273 : 'ADCS_RESET', 274 : 'ADCS_READ', 275 : 'ADCS_COARSE_POINT', 276 : 'ADCS_FINE_POINT', 277 : 'ADCS_RAM_POINT', 278 : 'ADCS_FINE_UPDATE', 279 : 'ADCS_RAM_UPDATE', 280 : 'ADCS_ECLIPSE_CHECK', 281 : 'ADCS_DUMP_IMAGE', 282 : 'ADCS_DUMP_STATE', 283 : 'ADCS_INIT_EPHEMERIS', 284 : 'ADCS_SET_TIME', 0 : 'NOOP', 1 : 'ARM', 2 : 'CMD_RST_STATS', 3 : 'CMD_XSUM', 4 : 'CMD_ECHO_STATE', 5 : 'CMD_VERSION', 48 : 'LOG_ROUTE', 49 : 'LOG_STATE', 50 : 'LOG_RST_STATS', 52 : 'LOG_RESET_READ', 53 : 'LOG_ISSUE', 54 : 'LOG_DUMP_INFO', 55 : 'LOG_SET_PUBLISH', 56 : 'LOG_ALL_ROUTE', 80 : 'MEM_DUMP', 81 : 'MEM_LOAD', 82 : 'MEM_ERASE', 83 : 'MEM_XSUM', 84 : 'MEM_ABORT', 85 : 'MEM_RESET', 86 : 'MEM_LOAD_DWORD', 87 : 'MEM_LOAD_WORD', 88 : 'MEM_LOAD_BYTE', 89 : 'MEM_RESET_COUNTERS', 90 : 'MEM_COPY', 91 : 'MEM_TEST', 96 : 'PKT_ISSUE', 97 : 'PKT_SET_RATE', 98 : 'PKT_SET_STREAM', 99 : 'PKT_SET_PRIORITY', 100 : 'PKT_QUERY_APID', 101 : 'PKT_SET_DELAY', 102 : 'PKT_COMMIT_TABLE', 103 : 'LIB_RESET_COUNTERS', 104 : 'LIB_DUMP_ENTRIES', 105 : 'PKT_RESET_COUNTERS', 128 : 'TBL_DUMP', 129 : 'TBL_LOAD', 130 : 'TBL_LOAD_START', 131 : 'TBL_COMMIT', 132 : 'TBL_ABORT', 133 : 'TBL_VERIFY', 134 : 'TBL_SAVE', 135 : 'TBL_RESET_STATS', 208 : 'EPS_PWR_ON', 209 : 'EPS_PWR_OFF', 210 : 'EPS_PWR_CYCLE', 211 : 'EPS_DEPLOY', 212 : 'EPS_DEPLOY_ABORT', 304 : 'HK_TIME_RESET', 201 : 'DOWNLINK', 207 : 'CLT_RESET', 206 : 'CLT_THRESHOLD', 205 : 'WATCHDOG', 204 : 'PHOENIX', 203 : 'SAFE', 202 : 'SCIENCE', 200 : 'SET_AUTO_PROMOTE_SCI', 288 : 'XBAND_WRITE', 289 : 'XBAND_READ', 290 : 'XBAND_ENABLE_TX',}
def CONVERT_cmd_echo_opcode(val):
    try:
        return CONVERT_cmd_echo_opcode_dict[val]
    except:
        return val
CONVERT_cmd_echo_status_dict = { 0 : 'SUCCESS', 1 : 'MODE', 2 : 'ARM', 3 : 'SOURCE', 4 : 'OPCODE', 5 : 'METHOD', 6 : 'LENGTH', 7 : 'RANGE', 8 : 'CHECKSUM', 9 : 'PKT_TYPE',}
def CONVERT_cmd_echo_status(val):
    try:
        return CONVERT_cmd_echo_status_dict[val]
    except:
        return val
CONVERT_log_msgid_hdr_dict = { 1024 : 'MSG_ERROR_DES_OVERRUN', 1025 : 'MSG_ERROR_DES_OVER_TIME', 1026 : 'MSG_ERROR_DES_CMD_NYI', 1027 : 'MSG_PM_DES_TASK_ENTRY', 1028 : 'MSG_PM_DES_TASK_EXIT', 1029 : 'MSG_ERROR_DES_BAD_SLICE', 1280 : 'MSG_FP_WATCH_FIRED', 1281 : 'MSG_FP_WATCH_PASSIVE', 1282 : 'MSG_ERROR_FP_BAD_VALIDATE', 1283 : 'MSG_ERROR_FP_BAD_WATCH', 1284 : 'MSG_FP_BAD_TABLE_ERR', 4096 : 'MSG_NAND_BAD_BLOCK_ERROR', 4097 : 'MSG_NAND_FLASH_NVM_ERROR', 4098 : 'MSG_NAND_FLASH_TIMEOUT_ERROR', 4099 : 'MSG_NAND_FLASH_BAD_READ_ERROR', 4100 : 'MSG_NAND_FLASH_BAD_WRITE_ERROR', 4101 : 'MSG_NAND_FLASH_FORMAT_START', 4102 : 'MSG_NAND_FLASH_FORMAT_END', 4196 : 'MSG_NAND_BB_NVM_ERROR', 4197 : 'MSG_NAND_BB_FREE_ERROR', 4199 : 'MSG_NAND_BB_REMAP1_ERROR', 4200 : 'MSG_NAND_BB_REMAP2_ERROR', 512 : 'MSG_SEQ_STATE', 513 : 'MSG_SEQ_CALL', 514 : 'MSG_SEQ_RETURN', 515 : 'MSG_SEQ_START', 516 : 'MSG_SEQ_FIND', 517 : 'MSG_SEQ_INFO', 518 : 'MSG_SEQ_ERROR_NO_SEQ', 519 : 'MSG_SEQ_ERROR_BAD_STATE', 520 : 'MSG_SEQ_ERROR_STOP', 521 : 'MSG_SEQ_ERROR_NESTED', 522 : 'MSG_SEQ_ERR_FIND', 523 : 'MSG_SEQ_CMD', 524 : 'MSG_SEQ_INT_CMD', 2048 : 'MSG_STORE_PKT_SIZE_ERROR', 2049 : 'MSG_STORE_CARD_READ_ERR', 2050 : 'MSG_STORE_READ_TIME_PAGE_ERROR', 2051 : 'MSG_STORE_BAD_TABLE', 2052 : 'MSG_STORE_READ_BAD_LEN_ERR', 2053 : 'MSG_STORE_CARD_BAD_WRITE_ERR', 2054 : 'MSG_STORE_READ_START', 2055 : 'MSG_STORE_READ_HALT', 2056 : 'MSG_STORE_BAD_POINTERS', 2057 : 'MSG_STORE_INIT_PARTITION', 3328 : 'MSG_UHF_ALIVE_MSG', 3329 : 'MSG_UHF_INIT_MSG', 3330 : 'MSG_UHF_AX25_ERR', 3331 : 'MSG_UHF_FRAME_ERR', 3332 : 'MSG_UHF_TX_PROGRESS_ERR', 3333 : 'MSG_UHF_RADIO_NOT_READY_ERR', 3334 : 'MSG_UHF_RADIO_WAITING_ERR', 3335 : 'MSG_UHF_DEAD_ERR_MSG', 3584 : 'MSG_PAYLOAD_PASS_CMD_MSG', 3586 : 'MSG_PAYLOAD_PASS_ERR_MSG', 3587 : 'MSG_PAYLOAD_STATUS_MSG', 3840 : 'MSG_BATTERY_SMALL_PKT_ERR', 3841 : 'MSG_BATTERY_SOURCE_ID_ERR', 3842 : 'MSG_BATTERY_LEN_RECV_ERR', 3843 : 'MSG_BATTERY_LEN_EXP_ERR', 3844 : 'MSG_BATTERY_CRC_LEN_ERR', 3845 : 'MSG_BATTERY_CRC_CALC_ERR', 3846 : 'MSG_BATTERY_CRC_RECV_ERR', 3847 : 'MSG_BATTERY_CRC_ERR', 3848 : 'MSG_BATTERY_TIME_PKT_ERR', 3849 : 'MSG_BATTERY_UNKNOWN_LARGE_ERR', 3850 : 'MSG_BATTERY_PARAM_MISMATCH_ERR', 3851 : 'MSG_EPS_CAN_TX_ERR_MSG', 3852 : 'MSG_EPS_CAN_RX_SHORT_ERR_MSG', 3853 : 'MSG_EPS_CAN_RX_FRAME_ERR_MSG', 3854 : 'MSG_EPS_CAN_BUS_ERROR_ERR_MSG', 3855 : 'MSG_EPS_BAT_ALIVE_MSG', 2304 : 'MSG_CFI_READ_SELECT', 2305 : 'MSG_CFI_POWER_ERR', 2306 : 'MSG_CFI_WRITE_SELECT', 2307 : 'MSG_CFI_ERASE_SELECT', 2308 : 'MSG_CFI_EXCEPTION', 2309 : 'MSG_CFI_OP_TIMEOUT', 4352 : 'MSG_ADCS_ECLIPSE_STATE_MSG', 4354 : 'MSG_ADCS_DUMP_ERR_MSG', 4355 : 'MSG_ADCS_BAD_TABLE_ERR_MSG', 4356 : 'MSG_ADCS_STATUS_CHANGE_MSG', 4357 : 'MSG_ADCS_NO_HK_ERR_MSG', 4358 : 'MSG_ADCS_MSG_LEN_ERR_MSG', 4359 : 'MSG_ADCS_MSG_APID_ERR_MSG', 4360 : 'MSG_ADCS_MSG_PASS_ERR_MSG', 4361 : 'MSG_ADCS_DEFAULT_CASE_ERR_MSG', 4362 : 'MSG_ADCS_PASS_CMD_MSG', 0 : 'MSG_CMD_RECEIVED', 1 : 'MSG_CMD_REJECTED', 2 : 'MSG_CMD_REJECTED_CODE', 3 : 'MSG_CMD_UNKNOWN_APID', 4 : 'MSG_CMD_BAD_APID', 5 : 'MSG_CMD_BAD_TYPE', 6 : 'MSG_CMD_BAD_LENGTH', 7 : 'MSG_CMD_BAD_XSUM', 8 : 'MSG_CMD_INVALID_LENGTH', 9 : 'MSG_CMD_BAD_SOURCE', 10 : 'MSG_CMD_BAD_FLETCH_EXP', 11 : 'MSG_CMD_BAD_FLETCH_REC', 12 : 'MSG_CMD_GET_VERSION', 768 : 'MSG_MEM_BAD_SECTION', 769 : 'MSG_MEM_STATE', 770 : 'MSG_MEM_OP_FAIL', 771 : 'MSG_MEM_DEFAULT_CASE', 1792 : 'MSG_PKT_BAD_APID', 1793 : 'MSG_TLM_PKT_SEND_ERR', 1795 : 'MSG_PKT_QUERY_RSEPONSE', 1796 : 'MSG_PKT_ISSUE_UNAV', 1797 : 'MSG_PKT_SYNC_RX_TIMEOUT', 1536 : 'MSG_TBL_UPDATE_PENDING', 1537 : 'MSG_TBL_UPDATE_COMPLETE', 1538 : 'MSG_TBL_VERIFY_BAD_CHECK', 1539 : 'MSG_TBL_VERIFY_BAD_VALID', 1540 : 'MSG_TBL_COMMIT', 1541 : 'MSG_TBL_LOAD_START', 1542 : 'MSG_TBL_VERIFY_GOOD', 1543 : 'MSG_TBL_COMMIT_NO_VERIFY', 1544 : 'MSG_TBL_COMMIT_BAD_ID', 1545 : 'MSG_TBL_BAD_REG_DATA', 1546 : 'MSG_TBL_BAD_REG_TABLE', 1547 : 'MSG_TBL_BAD_STORAGE', 1548 : 'MSG_TBL_UPDATE_FAILED', 3072 : 'MSG_EPS_PWR_SWITCH_MSG', 3073 : 'MSG_EPS_DEPLOY_SWITCH_MSG', 3074 : 'MSG_EPS_DEPLOY_UHF_WARN', 2560 : 'MSG_INIT_MSG', 2561 : 'MSG_INIT_GIT_MSG', 2562 : 'MSG_INIT_TIME_MSG', 2816 : 'MSG_MODE_CLT_FIRST_ERROR_MSG', 2817 : 'MSG_MODE_CLT_SECOND_ERROR_MSG', 2818 : 'MSG_MODE_BAD_TABLE_ERROR_MSG', 2819 : 'MSG_MODE_TRANSITION', 2820 : 'MSG_MODE_SEQ_ERROR', 4608 : 'MSG_DSPS_CMD_CHECKSUM_ERROR_MSG', 4609 : 'MSG_DSPS_CMD_LOG_RECV_MSG', 3588 : 'MSG_PAYLOAD_CMD_CHECK_ERROR_MSG', 3589 : 'MSG_PAYLOAD_RECV_PKT_LEN_MSG', 3590 : 'MSG_PAYLOAD_RECV_PKT_BAD_APID_MSG',}
def CONVERT_log_msgid_hdr(val):
    try:
        return CONVERT_log_msgid_hdr_dict[val]
    except:
        return val
CONVERT_log_logid_hdr_dict = { 0 : 'EVT', 1 : 'PM',}
def CONVERT_log_logid_hdr(val):
    try:
        return CONVERT_log_logid_hdr_dict[val]
    except:
        return val
CONVERT_log_state_evt_dict = { 0 : 'DIS', 1 : 'ENA',}
def CONVERT_log_state_evt(val):
    try:
        return CONVERT_log_state_evt_dict[val]
    except:
        return val
CONVERT_log_state_pm_dict = { 0 : 'DIS', 1 : 'ENA',}
def CONVERT_log_state_pm(val):
    try:
        return CONVERT_log_state_pm_dict[val]
    except:
        return val
CONVERT_REUSABLE_SPARE_1_dict = {}
def CONVERT_REUSABLE_SPARE_1(val):
    try:
        return CONVERT_REUSABLE_SPARE_1_dict[val]
    except:
        return val
CONVERT_REUSABLE_SPARE_1_dict = {}
def CONVERT_REUSABLE_SPARE_1(val):
    try:
        return CONVERT_REUSABLE_SPARE_1_dict[val]
    except:
        return val
CONVERT_REUSABLE_SPARE_1_dict = {}
def CONVERT_REUSABLE_SPARE_1(val):
    try:
        return CONVERT_REUSABLE_SPARE_1_dict[val]
    except:
        return val
CONVERT_REUSABLE_SPARE_1_dict = {}
def CONVERT_REUSABLE_SPARE_1(val):
    try:
        return CONVERT_REUSABLE_SPARE_1_dict[val]
    except:
        return val
CONVERT_REUSABLE_SPARE_1_dict = {}
def CONVERT_REUSABLE_SPARE_1(val):
    try:
        return CONVERT_REUSABLE_SPARE_1_dict[val]
    except:
        return val
CONVERT_REUSABLE_SPARE_1_dict = {}
def CONVERT_REUSABLE_SPARE_1(val):
    try:
        return CONVERT_REUSABLE_SPARE_1_dict[val]
    except:
        return val
CONVERT_log_pub_state_pm_dict = { 0 : 'DIS', 1 : 'ENA',}
def CONVERT_log_pub_state_pm(val):
    try:
        return CONVERT_log_pub_state_pm_dict[val]
    except:
        return val
CONVERT_log_pub_state_evt_dict = { 0 : 'DIS', 1 : 'ENA',}
def CONVERT_log_pub_state_evt(val):
    try:
        return CONVERT_log_pub_state_evt_dict[val]
    except:
        return val
CONVERT_mem_op_type_dict = { 0 : 'NONE', 1 : 'DUMP', 2 : 'LOAD', 3 : 'XSUM', 4 : 'COPY', 5 : 'ERASE', 6 : 'WAIT', 7 : 'TEST',}
def CONVERT_mem_op_type(val):
    try:
        return CONVERT_mem_op_type_dict[val]
    except:
        return val
CONVERT_mem_section_dict = { 0 : 'NONE', 1 : 'PTR', 2 : 'CUSTOM',}
def CONVERT_mem_section(val):
    try:
        return CONVERT_mem_section_dict[val]
    except:
        return val
CONVERT_mem_dump_flags_dict = { 1 : 'SOP', 2 : 'MOP', 3 : 'EOP', 4 : 'SINGLE',}
def CONVERT_mem_dump_flags(val):
    try:
        return CONVERT_mem_dump_flags_dict[val]
    except:
        return val
CONVERT_tlm_len_apid_dbg_dict = { 1 : 'SW_STAT', 2 : 'LIB_HK', 3 : 'MEM_HK', 4 : 'HW_STAT', 5 : 'SEQ_HK', 6 : 'MEM', 7 : 'FP_HK', 8 : 'TBL_HK', 9 : 'ECHO', 10 : 'PAYLOAD_SCI_PKT', 11 : 'DES_HK', 12 : 'CMD_HK', 13 : 'DES_SCHED', 14 : 'DES_TASK', 15 : 'LOG_HK', 16 : 'PAYLOAD_HK', 17 : 'TLM_HK', 18 : 'TIME_HK', 19 : 'DES_TIME', 20 : 'EVT_LOG', 21 : 'STORE_HK', 22 : 'FP_TEST', 23 : 'DSPS_LOG', 24 : 'SCI_META', 25 : 'DSPS_PARAM', 26 : 'MODE_PKT', 27 : 'ANALOG_HK', 28 : 'BATTERY_0_HK', 29 : 'DSPS_TIME', 30 : 'EPS_HK', 32 : 'SCI_HK', 33 : 'UHF_HK', 34 : 'UHF_PASS', 35 : 'DSPS_DATA', 36 : 'VERSION', 37 : 'FLASH_HK', 38 : 'BATTERY_ANA', 39 : 'ADCS_HK', 40 : 'XBAND_HK', 68 : 'PBK_PKT', 69 : 'XBAND_REG', 41 : 'ADCS_TLM_PROC', 42 : 'ADCS_COMMAND_TLM', 43 : 'ADCS_GENERAL', 44 : 'ADCS_TIME', 45 : 'ADCS_REFS', 46 : 'ADCS_ATT_DET', 47 : 'ADCS_ATT_CMD', 48 : 'ADCS_RW_DRIVE', 49 : 'ADCS_TRACKER', 50 : 'ADCS_ATT_CTRL', 51 : 'ADCS_MOMENTUM', 52 : 'ADCS_CSS', 53 : 'ADCS_MAG', 54 : 'ADCS_IMU', 55 : 'ADCS_CLOCK_SYNC', 56 : 'ADCS_ANALOGS', 57 : 'ADCS_TABLES', 58 : 'ADCS_TRACKER_2', 59 : 'ADCS_GPS', 60 : 'ADCS_CAL', 61 : 'ADCS_TRACKER_CTRL', 62 : 'ADCS_EXT_TRACKER_2', 63 : 'ADCS_L0',}
def CONVERT_tlm_len_apid_dbg(val):
    try:
        return CONVERT_tlm_len_apid_dbg_dict[val]
    except:
        return val
CONVERT_tlm_stream_st_dbg_dict = { 0 : 'DIS', 1 : 'ENA',}
def CONVERT_tlm_stream_st_dbg(val):
    try:
        return CONVERT_tlm_stream_st_dbg_dict[val]
    except:
        return val
CONVERT_tlm_len_apid_store_dict = { 1 : 'SW_STAT', 2 : 'LIB_HK', 3 : 'MEM_HK', 4 : 'HW_STAT', 5 : 'SEQ_HK', 6 : 'MEM', 7 : 'FP_HK', 8 : 'TBL_HK', 9 : 'ECHO', 10 : 'PAYLOAD_SCI_PKT', 11 : 'DES_HK', 12 : 'CMD_HK', 13 : 'DES_SCHED', 14 : 'DES_TASK', 15 : 'LOG_HK', 16 : 'PAYLOAD_HK', 17 : 'TLM_HK', 18 : 'TIME_HK', 19 : 'DES_TIME', 20 : 'EVT_LOG', 21 : 'STORE_HK', 22 : 'FP_TEST', 23 : 'DSPS_LOG', 24 : 'SCI_META', 25 : 'DSPS_PARAM', 26 : 'MODE_PKT', 27 : 'ANALOG_HK', 28 : 'BATTERY_0_HK', 29 : 'DSPS_TIME', 30 : 'EPS_HK', 32 : 'SCI_HK', 33 : 'UHF_HK', 34 : 'UHF_PASS', 35 : 'DSPS_DATA', 36 : 'VERSION', 37 : 'FLASH_HK', 38 : 'BATTERY_ANA', 39 : 'ADCS_HK', 40 : 'XBAND_HK', 68 : 'PBK_PKT', 69 : 'XBAND_REG', 41 : 'ADCS_TLM_PROC', 42 : 'ADCS_COMMAND_TLM', 43 : 'ADCS_GENERAL', 44 : 'ADCS_TIME', 45 : 'ADCS_REFS', 46 : 'ADCS_ATT_DET', 47 : 'ADCS_ATT_CMD', 48 : 'ADCS_RW_DRIVE', 49 : 'ADCS_TRACKER', 50 : 'ADCS_ATT_CTRL', 51 : 'ADCS_MOMENTUM', 52 : 'ADCS_CSS', 53 : 'ADCS_MAG', 54 : 'ADCS_IMU', 55 : 'ADCS_CLOCK_SYNC', 56 : 'ADCS_ANALOGS', 57 : 'ADCS_TABLES', 58 : 'ADCS_TRACKER_2', 59 : 'ADCS_GPS', 60 : 'ADCS_CAL', 61 : 'ADCS_TRACKER_CTRL', 62 : 'ADCS_EXT_TRACKER_2', 63 : 'ADCS_L0',}
def CONVERT_tlm_len_apid_store(val):
    try:
        return CONVERT_tlm_len_apid_store_dict[val]
    except:
        return val
CONVERT_tlm_stream_st_store_dict = { 0 : 'DIS', 1 : 'ENA',}
def CONVERT_tlm_stream_st_store(val):
    try:
        return CONVERT_tlm_stream_st_store_dict[val]
    except:
        return val
CONVERT_tlm_len_apid_uhf_dict = { 1 : 'SW_STAT', 2 : 'LIB_HK', 3 : 'MEM_HK', 4 : 'HW_STAT', 5 : 'SEQ_HK', 6 : 'MEM', 7 : 'FP_HK', 8 : 'TBL_HK', 9 : 'ECHO', 10 : 'PAYLOAD_SCI_PKT', 11 : 'DES_HK', 12 : 'CMD_HK', 13 : 'DES_SCHED', 14 : 'DES_TASK', 15 : 'LOG_HK', 16 : 'PAYLOAD_HK', 17 : 'TLM_HK', 18 : 'TIME_HK', 19 : 'DES_TIME', 20 : 'EVT_LOG', 21 : 'STORE_HK', 22 : 'FP_TEST', 23 : 'DSPS_LOG', 24 : 'SCI_META', 25 : 'DSPS_PARAM', 26 : 'MODE_PKT', 27 : 'ANALOG_HK', 28 : 'BATTERY_0_HK', 29 : 'DSPS_TIME', 30 : 'EPS_HK', 32 : 'SCI_HK', 33 : 'UHF_HK', 34 : 'UHF_PASS', 35 : 'DSPS_DATA', 36 : 'VERSION', 37 : 'FLASH_HK', 38 : 'BATTERY_ANA', 39 : 'ADCS_HK', 40 : 'XBAND_HK', 68 : 'PBK_PKT', 69 : 'XBAND_REG', 41 : 'ADCS_TLM_PROC', 42 : 'ADCS_COMMAND_TLM', 43 : 'ADCS_GENERAL', 44 : 'ADCS_TIME', 45 : 'ADCS_REFS', 46 : 'ADCS_ATT_DET', 47 : 'ADCS_ATT_CMD', 48 : 'ADCS_RW_DRIVE', 49 : 'ADCS_TRACKER', 50 : 'ADCS_ATT_CTRL', 51 : 'ADCS_MOMENTUM', 52 : 'ADCS_CSS', 53 : 'ADCS_MAG', 54 : 'ADCS_IMU', 55 : 'ADCS_CLOCK_SYNC', 56 : 'ADCS_ANALOGS', 57 : 'ADCS_TABLES', 58 : 'ADCS_TRACKER_2', 59 : 'ADCS_GPS', 60 : 'ADCS_CAL', 61 : 'ADCS_TRACKER_CTRL', 62 : 'ADCS_EXT_TRACKER_2', 63 : 'ADCS_L0',}
def CONVERT_tlm_len_apid_uhf(val):
    try:
        return CONVERT_tlm_len_apid_uhf_dict[val]
    except:
        return val
CONVERT_tlm_stream_st_uhf_dict = { 0 : 'DIS', 1 : 'ENA',}
def CONVERT_tlm_stream_st_uhf(val):
    try:
        return CONVERT_tlm_stream_st_uhf_dict[val]
    except:
        return val
CONVERT_tbl_load_state_dict = { 0 : 'IDLE', 1 : 'IN_PROGRESS', 2 : 'VERIFIED', 3 : 'FAILED',}
def CONVERT_tbl_load_state(val):
    try:
        return CONVERT_tbl_load_state_dict[val]
    except:
        return val
CONVERT_adcs_tlm_proc_streaming_dict = { 1 : 'YES', 0 : 'NO',}
def CONVERT_adcs_tlm_proc_streaming(val):
    try:
        return CONVERT_adcs_tlm_proc_streaming_dict[val]
    except:
        return val
CONVERT_adcs_command_tlm_cmd_status_dict = { 0 : 'OK', 1 : 'BAD_APID', 2 : 'BAD_OPCODE', 3 : 'BAD_DATA', 4 : 'NOW_READING', 5 : 'DONE_READING', 6 : 'IDLE', 7 : 'NO_CMD_DATA', 8 : 'CMD_SRVC_OVERRUN', 9 : 'CMD_APID_OVERRUN', 10 : 'SPARE', 11 : 'BAD_ELEMENT', 12 : 'TABLES_BUSY', 13 : 'FLASH_NOT_ARMED', 14 : 'THRUSTERS_NOT_ENABLED', 15 : 'ATT_ERR_TOO_HIGH', 16 : 'ASYNC_REFUSED', 17 : 'DRIVER_ERROR', 18 : 'INVALID_GNC_MODE', 19 : 'INVALID_COMPONENT_MODE', 20 : 'ARG_OUT_OF_RANGE', 21 : 'INVALID_SW_STATE', 22 : 'NO_VALID_CHEBY_SLOT', 23 : 'TOO_FEW_CMD_BYTES', 24 : 'TOO_MANY_CMD_BYTES', 25 : 'COMPONENT_DOES_NOT_EXIST', 26 : 'INVALID_POSITION', 27 : 'INVALID_RATE', 28 : 'CMD_ERR_1', 29 : 'CMD_ERR_2', 30 : 'CMD_ERR_3', 31 : 'CMD_ERR_4', 32 : 'CMD_ERR_5', 33 : 'CMD_ERR_6', 34 : 'CMD_ERR_7', 35 : 'CMD_ERR_8', 36 : 'CMD_ERR_9', 37 : 'INVALID_TIME', 38 : 'MAX_DEFINED_CMD_STATUS_ETYPES',}
def CONVERT_adcs_command_tlm_cmd_status(val):
    try:
        return CONVERT_adcs_command_tlm_cmd_status_dict[val]
    except:
        return val
CONVERT_adcs_command_tlm_cmd_reject_status_dict = { 0 : 'OK', 1 : 'BAD_APID', 2 : 'BAD_OPCODE', 3 : 'BAD_DATA', 4 : 'NOW_READING', 5 : 'DONE_READING', 6 : 'IDLE', 7 : 'NO_CMD_DATA', 8 : 'CMD_SRVC_OVERRUN', 9 : 'CMD_APID_OVERRUN', 10 : 'SPARE', 11 : 'BAD_ELEMENT', 12 : 'TABLES_BUSY', 13 : 'FLASH_NOT_ARMED', 14 : 'THRUSTERS_NOT_ENABLED', 15 : 'ATT_ERR_TOO_HIGH', 16 : 'ASYNC_REFUSED', 17 : 'DRIVER_ERROR', 18 : 'INVALID_GNC_MODE', 19 : 'INVALID_COMPONENT_MODE', 20 : 'ARG_OUT_OF_RANGE', 21 : 'INVALID_SW_STATE', 22 : 'NO_VALID_CHEBY_SLOT', 23 : 'TOO_FEW_CMD_BYTES', 24 : 'TOO_MANY_CMD_BYTES', 25 : 'COMPONENT_DOES_NOT_EXIST', 26 : 'INVALID_POSITION', 27 : 'INVALID_RATE', 28 : 'CMD_ERR_1', 29 : 'CMD_ERR_2', 30 : 'CMD_ERR_3', 31 : 'CMD_ERR_4', 32 : 'CMD_ERR_5', 33 : 'CMD_ERR_6', 34 : 'CMD_ERR_7', 35 : 'CMD_ERR_8', 36 : 'CMD_ERR_9', 37 : 'INVALID_TIME', 38 : 'MAX_DEFINED_CMD_STATUS_ETYPES',}
def CONVERT_adcs_command_tlm_cmd_reject_status(val):
    try:
        return CONVERT_adcs_command_tlm_cmd_reject_status_dict[val]
    except:
        return val
CONVERT_adcs_time_time_valid_dict = { 1 : 'YES', 0 : 'NO',}
def CONVERT_adcs_time_time_valid(val):
    try:
        return CONVERT_adcs_time_time_valid_dict[val]
    except:
        return val
CONVERT_adcs_refs_orbit_method_dict = { 0 : 'KEPLER', 1 : 'GRAVITY_POINT', 2 : 'GRAVITY_J2', 3 : 'GRAVITY_HARMONIC', 4 : 'SGP4', 5 : 'EXTERN_ACC_ONLY', 6 : 'POLYNOMIAL', 7 : 'DEPRECATED', 8 : 'FILTER',}
def CONVERT_adcs_refs_orbit_method(val):
    try:
        return CONVERT_adcs_refs_orbit_method_dict[val]
    except:
        return val
CONVERT_adcs_refs_esm_valid_dict = { 1 : 'YES', 0 : 'NO',}
def CONVERT_adcs_refs_esm_valid(val):
    try:
        return CONVERT_adcs_refs_esm_valid_dict[val]
    except:
        return val
CONVERT_adcs_refs_sun_eclipse_moon_penumbra_flag_dict = { 1 : 'YES', 0 : 'NO',}
def CONVERT_adcs_refs_sun_eclipse_moon_penumbra_flag(val):
    try:
        return CONVERT_adcs_refs_sun_eclipse_moon_penumbra_flag_dict[val]
    except:
        return val
CONVERT_adcs_refs_sun_eclipse_moon_umbra_flag_dict = { 1 : 'YES', 0 : 'NO',}
def CONVERT_adcs_refs_sun_eclipse_moon_umbra_flag(val):
    try:
        return CONVERT_adcs_refs_sun_eclipse_moon_umbra_flag_dict[val]
    except:
        return val
CONVERT_adcs_refs_sun_avoid_eclipse_flag_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_refs_sun_avoid_eclipse_flag(val):
    try:
        return CONVERT_adcs_refs_sun_avoid_eclipse_flag_dict[val]
    except:
        return val
CONVERT_adcs_refs_earth_umbra_flag_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_refs_earth_umbra_flag(val):
    try:
        return CONVERT_adcs_refs_earth_umbra_flag_dict[val]
    except:
        return val
CONVERT_adcs_run_low_rate_task_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_run_low_rate_task(val):
    try:
        return CONVERT_adcs_run_low_rate_task_dict[val]
    except:
        return val
CONVERT_adcs_refs_gps_auto_sync_enabled_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_refs_gps_auto_sync_enabled(val):
    try:
        return CONVERT_adcs_refs_gps_auto_sync_enabled_dict[val]
    except:
        return val
CONVERT_adcs_refs_gps_valid_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_refs_gps_valid(val):
    try:
        return CONVERT_adcs_refs_gps_valid_dict[val]
    except:
        return val
CONVERT_adcs_refs_time_valid_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_refs_time_valid(val):
    try:
        return CONVERT_adcs_refs_time_valid_dict[val]
    except:
        return val
CONVERT_adcs_refs_refs_valid_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_refs_refs_valid(val):
    try:
        return CONVERT_adcs_refs_refs_valid_dict[val]
    except:
        return val
CONVERT_adcs_att_det_attitude_alg_dict = { 1 : 'RAW', 2 : 'FIXED_GAIN_NO_BIAS', 3 : 'FIXED_GAIN', 4 : 'MEKF', 5 : 'MEKF_BASIC',}
def CONVERT_adcs_att_det_attitude_alg(val):
    try:
        return CONVERT_adcs_att_det_attitude_alg_dict[val]
    except:
        return val
CONVERT_adcs_att_det_attitude_valid_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_att_det_attitude_valid(val):
    try:
        return CONVERT_adcs_att_det_attitude_valid_dict[val]
    except:
        return val
CONVERT_adcs_att_det_meas_att_valid_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_att_det_meas_att_valid(val):
    try:
        return CONVERT_adcs_att_det_meas_att_valid_dict[val]
    except:
        return val
CONVERT_adcs_att_det_meas_rate_valid_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_att_det_meas_rate_valid(val):
    try:
        return CONVERT_adcs_att_det_meas_rate_valid_dict[val]
    except:
        return val
CONVERT_adcs_att_det_imu_data_valid_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_att_det_imu_data_valid(val):
    try:
        return CONVERT_adcs_att_det_imu_data_valid_dict[val]
    except:
        return val
CONVERT_adcs_att_det_tracker_1data_valid_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_att_det_tracker_1data_valid(val):
    try:
        return CONVERT_adcs_att_det_tracker_1data_valid_dict[val]
    except:
        return val
CONVERT_adcs_att_det_tracker_2data_valid_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_att_det_tracker_2data_valid(val):
    try:
        return CONVERT_adcs_att_det_tracker_2data_valid_dict[val]
    except:
        return val
CONVERT_adcs_att_det_tracker_sol_mixed_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_att_det_tracker_sol_mixed(val):
    try:
        return CONVERT_adcs_att_det_tracker_sol_mixed_dict[val]
    except:
        return val
CONVERT_adcs_att_cmd_pri_ref_dir_dict = { 0 : 'ECI_X', 1 : 'ECI_Y', 2 : 'ECI_Z', 3 : 'SUN', 4 : 'MAG', 5 : 'MOON', 6 : 'POS', 7 : 'VEL', 8 : 'TARG_ECI', 9 : 'TARG_ECEF', 10 : 'BEARING', 11 : 'HEADING', 12 : 'ORB_NORM', 13 : 'GCNADIR', 14 : 'GDNADIR',}
def CONVERT_adcs_att_cmd_pri_ref_dir(val):
    try:
        return CONVERT_adcs_att_cmd_pri_ref_dir_dict[val]
    except:
        return val
CONVERT_adcs_att_cmd_sec_ref_dir_dict = { 0 : 'ECI_X', 1 : 'ECI_Y', 2 : 'ECI_Z', 3 : 'SUN', 4 : 'MAG', 5 : 'MOON', 6 : 'POS', 7 : 'VEL', 8 : 'TARG_ECI', 9 : 'TARG_ECEF', 10 : 'BEARING', 11 : 'HEADING', 12 : 'ORB_NORM', 13 : 'GCNADIR', 14 : 'GDNADIR',}
def CONVERT_adcs_att_cmd_sec_ref_dir(val):
    try:
        return CONVERT_adcs_att_cmd_sec_ref_dir_dict[val]
    except:
        return val
CONVERT_adcs_att_cmd_sun_point_reason_dict = { 0 : 'BOOT', 1 : 'COMMAND', 2 : 'ATTITUDE_INVALID', 3 : 'TIME_INVALID', 4 : 'REFS_INVALID',}
def CONVERT_adcs_att_cmd_sun_point_reason(val):
    try:
        return CONVERT_adcs_att_cmd_sun_point_reason_dict[val]
    except:
        return val
CONVERT_adcs_att_cmd_recommended_sun_point_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_att_cmd_recommended_sun_point(val):
    try:
        return CONVERT_adcs_att_cmd_recommended_sun_point_dict[val]
    except:
        return val
CONVERT_adcs_att_cmd_adcs_mode_dict = { 0 : 'SUN_POINT', 1 : 'FINE_REF_POINT',}
def CONVERT_adcs_att_cmd_adcs_mode(val):
    try:
        return CONVERT_adcs_att_cmd_adcs_mode_dict[val]
    except:
        return val
CONVERT_adcs_rw_drive_operating_mode_0_dict = { 0 : 'IDLE', 1 : 'INT', 2 : 'EXT', 3 : 'DELAYED_INT', 4 : 'BOOT_DELAY',}
def CONVERT_adcs_rw_drive_operating_mode_0(val):
    try:
        return CONVERT_adcs_rw_drive_operating_mode_0_dict[val]
    except:
        return val
CONVERT_adcs_rw_drive_operating_mode_1_dict = { 0 : 'IDLE', 1 : 'INT', 2 : 'EXT', 3 : 'DELAYED_INT', 4 : 'BOOT_DELAY',}
def CONVERT_adcs_rw_drive_operating_mode_1(val):
    try:
        return CONVERT_adcs_rw_drive_operating_mode_1_dict[val]
    except:
        return val
CONVERT_adcs_rw_drive_operating_mode_2_dict = { 0 : 'IDLE', 1 : 'INT', 2 : 'EXT', 3 : 'DELAYED_INT', 4 : 'BOOT_DELAY',}
def CONVERT_adcs_rw_drive_operating_mode_2(val):
    try:
        return CONVERT_adcs_rw_drive_operating_mode_2_dict[val]
    except:
        return val
CONVERT_adcs_rw_drive_operating_mode_3_dict = { 0 : 'IDLE', 1 : 'INT', 2 : 'EXT', 3 : 'DELAYED_INT', 4 : 'BOOT_DELAY',}
def CONVERT_adcs_rw_drive_operating_mode_3(val):
    try:
        return CONVERT_adcs_rw_drive_operating_mode_3_dict[val]
    except:
        return val
CONVERT_adcs_rw_drive_control_mode_0_dict = { 0 : 'TRQ', 1 : 'SPD', 2 : 'PWM', 3 : 'ISOLATE',}
def CONVERT_adcs_rw_drive_control_mode_0(val):
    try:
        return CONVERT_adcs_rw_drive_control_mode_0_dict[val]
    except:
        return val
CONVERT_adcs_rw_drive_control_mode_1_dict = { 0 : 'TRQ', 1 : 'SPD', 2 : 'PWM', 3 : 'ISOLATE',}
def CONVERT_adcs_rw_drive_control_mode_1(val):
    try:
        return CONVERT_adcs_rw_drive_control_mode_1_dict[val]
    except:
        return val
CONVERT_adcs_rw_drive_control_mode_2_dict = { 0 : 'TRQ', 1 : 'SPD', 2 : 'PWM', 3 : 'ISOLATE',}
def CONVERT_adcs_rw_drive_control_mode_2(val):
    try:
        return CONVERT_adcs_rw_drive_control_mode_2_dict[val]
    except:
        return val
CONVERT_adcs_rw_drive_control_mode_3_dict = { 0 : 'TRQ', 1 : 'SPD', 2 : 'PWM', 3 : 'ISOLATE',}
def CONVERT_adcs_rw_drive_control_mode_3(val):
    try:
        return CONVERT_adcs_rw_drive_control_mode_3_dict[val]
    except:
        return val
CONVERT_adcs_rw_drive_pwmenable_0_dict = { 1 : 'YES', 0 : 'NO',}
def CONVERT_adcs_rw_drive_pwmenable_0(val):
    try:
        return CONVERT_adcs_rw_drive_pwmenable_0_dict[val]
    except:
        return val
CONVERT_adcs_rw_drive_pwmenable_1_dict = { 1 : 'YES', 0 : 'NO',}
def CONVERT_adcs_rw_drive_pwmenable_1(val):
    try:
        return CONVERT_adcs_rw_drive_pwmenable_1_dict[val]
    except:
        return val
CONVERT_adcs_rw_drive_pwmenable_2_dict = { 1 : 'YES', 0 : 'NO',}
def CONVERT_adcs_rw_drive_pwmenable_2(val):
    try:
        return CONVERT_adcs_rw_drive_pwmenable_2_dict[val]
    except:
        return val
CONVERT_adcs_rw_drive_pwmenable_3_dict = { 1 : 'YES', 0 : 'NO',}
def CONVERT_adcs_rw_drive_pwmenable_3(val):
    try:
        return CONVERT_adcs_rw_drive_pwmenable_3_dict[val]
    except:
        return val
CONVERT_adcs_rw_drive_pwmdirection_0_dict = { 0 : 'POS', 1 : 'NEG',}
def CONVERT_adcs_rw_drive_pwmdirection_0(val):
    try:
        return CONVERT_adcs_rw_drive_pwmdirection_0_dict[val]
    except:
        return val
CONVERT_adcs_rw_drive_pwmdirection_1_dict = { 0 : 'POS', 1 : 'NEG',}
def CONVERT_adcs_rw_drive_pwmdirection_1(val):
    try:
        return CONVERT_adcs_rw_drive_pwmdirection_1_dict[val]
    except:
        return val
CONVERT_adcs_rw_drive_pwmdirection_2_dict = { 0 : 'POS', 1 : 'NEG',}
def CONVERT_adcs_rw_drive_pwmdirection_2(val):
    try:
        return CONVERT_adcs_rw_drive_pwmdirection_2_dict[val]
    except:
        return val
CONVERT_adcs_rw_drive_pwmdirection_3_dict = { 0 : 'POS', 1 : 'NEG',}
def CONVERT_adcs_rw_drive_pwmdirection_3(val):
    try:
        return CONVERT_adcs_rw_drive_pwmdirection_3_dict[val]
    except:
        return val
CONVERT_adcs_rw_drive_pwmcmd_dir_0_dict = { 0 : 'POS', 1 : 'NEG',}
def CONVERT_adcs_rw_drive_pwmcmd_dir_0(val):
    try:
        return CONVERT_adcs_rw_drive_pwmcmd_dir_0_dict[val]
    except:
        return val
CONVERT_adcs_rw_drive_pwmcmd_dir_1_dict = { 0 : 'POS', 1 : 'NEG',}
def CONVERT_adcs_rw_drive_pwmcmd_dir_1(val):
    try:
        return CONVERT_adcs_rw_drive_pwmcmd_dir_1_dict[val]
    except:
        return val
CONVERT_adcs_rw_drive_pwmcmd_dir_2_dict = { 0 : 'POS', 1 : 'NEG',}
def CONVERT_adcs_rw_drive_pwmcmd_dir_2(val):
    try:
        return CONVERT_adcs_rw_drive_pwmcmd_dir_2_dict[val]
    except:
        return val
CONVERT_adcs_rw_drive_pwmcmd_dir_3_dict = { 0 : 'POS', 1 : 'NEG',}
def CONVERT_adcs_rw_drive_pwmcmd_dir_3(val):
    try:
        return CONVERT_adcs_rw_drive_pwmcmd_dir_3_dict[val]
    except:
        return val
CONVERT_adcs_rw_drive_rw_test_mode_dict = { 0 : 'OFF', 1 : 'ON',}
def CONVERT_adcs_rw_drive_rw_test_mode(val):
    try:
        return CONVERT_adcs_rw_drive_rw_test_mode_dict[val]
    except:
        return val
CONVERT_adcs_tracker_operating_mode_dict = { 0 : 'IDLE', 1 : 'INITIALIZE', 2 : 'STARID', 3 : 'TRACK', 4 : 'PHOTO', 5 : 'CAL', 6 : 'BLOCK',}
def CONVERT_adcs_tracker_operating_mode(val):
    try:
        return CONVERT_adcs_tracker_operating_mode_dict[val]
    except:
        return val
CONVERT_adcs_tracker_star_id_step_dict = { 0 : 'IDLE', 1 : 'INITIALIZE', 2 : 'WAITING_FOR_IMAGE1', 3 : 'WAITING_FOR_IMAGE2', 4 : 'CALCULATE_RATE', 5 : 'MAKE_UNIT_VECTORS', 6 : 'AWAITING_TRISTAR', 7 : 'OK_Found_4', 8 : 'OK_Found_3', 9 : 'TIME_OUT', 10 : 'spare', 11 : 'NO_MATCH',}
def CONVERT_adcs_tracker_star_id_step(val):
    try:
        return CONVERT_adcs_tracker_star_id_step_dict[val]
    except:
        return val
CONVERT_adcs_tracker_id_status_dict = { 0 : 'IDLE', 1 : 'INITIALIZE', 2 : 'WAITING_FOR_IMAGE1', 3 : 'WAITING_FOR_IMAGE2', 4 : 'CALCULATE_RATE', 5 : 'MAKE_UNIT_VECTORS', 6 : 'AWAITING_TRISTAR', 7 : 'OK_Found_4', 8 : 'OK_Found_3', 9 : 'TIME_OUT', 10 : 'spare', 11 : 'NO_MATCH',}
def CONVERT_adcs_tracker_id_status(val):
    try:
        return CONVERT_adcs_tracker_id_status_dict[val]
    except:
        return val
CONVERT_adcs_tracker_att_status_dict = { 0 : 'OK', 1 : 'PENDING', 2 : 'BAD', 3 : 'TOO_FEW_STARS', 4 : 'QUEST_FAILED', 5 : 'RESIDUALS_TOO_HIGH', 6 : 'TOO_CLOSE_TO_EDGE', 7 : 'PIX_AMP_TOO_LOW', 8 : 'PIX_AMP_TOO_HIGH', 9 : 'BACKGND_TOO_HIGH', 10 : 'TRACK_FAILURE', 11 : 'PIX_SUM_TOO_LOW', 12 : 'UNUSED', 13 : 'TOO_DIM_FOR_STARID', 14 : 'TOO_MANY_GROUPS', 15 : 'TOO_FEW_GROUPS', 16 : 'CHANNEL_DISABLED', 17 : 'TRACK_BLK_OVERLAP', 18 : 'OK_FOR_STARID', 19 : 'TOO_CLOSE_TO_OTHER', 20 : 'TOO_MANY_PIXELS', 21 : 'TOO_MANY_COLUMNS', 22 : 'TOO_MANY_ROWS', 23 : 'OPEN', 24 : 'CLOSED', 25 : 'RATE_TOO_HIGH',}
def CONVERT_adcs_tracker_att_status(val):
    try:
        return CONVERT_adcs_tracker_att_status_dict[val]
    except:
        return val
CONVERT_adcs_tracker_track_ref_available_dict = { 1 : 'YES', 0 : 'NO',}
def CONVERT_adcs_tracker_track_ref_available(val):
    try:
        return CONVERT_adcs_tracker_track_ref_available_dict[val]
    except:
        return val
CONVERT_adcs_att_ctrl_sun_point_state_dict = { 0 : 'SUN_POINT', 1 : 'FINE_REF_POINT', 2 : 'SEARCH_INIT', 3 : 'SEARCHING', 4 : 'WAITING', 5 : 'CONVERGING', 6 : 'ON_SUN', 7 : 'NOT_ACTIVE',}
def CONVERT_adcs_att_ctrl_sun_point_state(val):
    try:
        return CONVERT_adcs_att_ctrl_sun_point_state_dict[val]
    except:
        return val
CONVERT_adcs_att_ctrl_sun_source_preference_dict = { 0 : 'MEASURED', 1 : 'MODELED',}
def CONVERT_adcs_att_ctrl_sun_source_preference(val):
    try:
        return CONVERT_adcs_att_ctrl_sun_source_preference_dict[val]
    except:
        return val
CONVERT_adcs_att_ctrl_allow_sun_model_dict = { 1 : 'YES', 0 : 'NO',}
def CONVERT_adcs_att_ctrl_allow_sun_model(val):
    try:
        return CONVERT_adcs_att_ctrl_allow_sun_model_dict[val]
    except:
        return val
CONVERT_adcs_att_ctrl_sun_source_used_dict = { 0 : 'MEASURED', 1 : 'MODELED',}
def CONVERT_adcs_att_ctrl_sun_source_used(val):
    try:
        return CONVERT_adcs_att_ctrl_sun_source_used_dict[val]
    except:
        return val
CONVERT_adcs_att_ctrl_sun_source_failover_dict = { 0 : 'OK', 1 : 'FAIL',}
def CONVERT_adcs_att_ctrl_sun_source_failover(val):
    try:
        return CONVERT_adcs_att_ctrl_sun_source_failover_dict[val]
    except:
        return val
CONVERT_adcs_att_ctrl_sun_avoid_flag_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_att_ctrl_sun_avoid_flag(val):
    try:
        return CONVERT_adcs_att_ctrl_sun_avoid_flag_dict[val]
    except:
        return val
CONVERT_adcs_att_ctrl_on_sun_flag_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_att_ctrl_on_sun_flag(val):
    try:
        return CONVERT_adcs_att_ctrl_on_sun_flag_dict[val]
    except:
        return val
CONVERT_adcs_att_ctrl_momentum_too_high_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_att_ctrl_momentum_too_high(val):
    try:
        return CONVERT_adcs_att_ctrl_momentum_too_high_dict[val]
    except:
        return val
CONVERT_adcs_att_ctrl_att_ctrl_active_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_att_ctrl_att_ctrl_active(val):
    try:
        return CONVERT_adcs_att_ctrl_att_ctrl_active_dict[val]
    except:
        return val
CONVERT_adcs_momentum_torque_rod_mode_0_dict = { 0 : 'OFF', 1 : 'ON_POS', 2 : 'ON_NEG', 3 : 'AUTO', 4 : 'UNUSED1', 5 : 'UNUSED2', 6 : 'DELAYED_AUTO', 7 : 'UNUSED3', 8 : 'UNUSED4', 9 : 'UNUSED5', 10 : 'UNUSED6', 11 : 'UNUSED7', 12 : 'UNUSED8', 13 : 'BOOT_DELAY',}
def CONVERT_adcs_momentum_torque_rod_mode_0(val):
    try:
        return CONVERT_adcs_momentum_torque_rod_mode_0_dict[val]
    except:
        return val
CONVERT_adcs_momentum_torque_rod_mode_1_dict = { 0 : 'OFF', 1 : 'ON_POS', 2 : 'ON_NEG', 3 : 'AUTO', 4 : 'UNUSED1', 5 : 'UNUSED2', 6 : 'DELAYED_AUTO', 7 : 'UNUSED3', 8 : 'UNUSED4', 9 : 'UNUSED5', 10 : 'UNUSED6', 11 : 'UNUSED7', 12 : 'UNUSED8', 13 : 'BOOT_DELAY',}
def CONVERT_adcs_momentum_torque_rod_mode_1(val):
    try:
        return CONVERT_adcs_momentum_torque_rod_mode_1_dict[val]
    except:
        return val
CONVERT_adcs_momentum_torque_rod_mode_2_dict = { 0 : 'OFF', 1 : 'ON_POS', 2 : 'ON_NEG', 3 : 'AUTO', 4 : 'UNUSED1', 5 : 'UNUSED2', 6 : 'DELAYED_AUTO', 7 : 'UNUSED3', 8 : 'UNUSED4', 9 : 'UNUSED5', 10 : 'UNUSED6', 11 : 'UNUSED7', 12 : 'UNUSED8', 13 : 'BOOT_DELAY',}
def CONVERT_adcs_momentum_torque_rod_mode_2(val):
    try:
        return CONVERT_adcs_momentum_torque_rod_mode_2_dict[val]
    except:
        return val
CONVERT_adcs_momentum_any_torque_rod_direction_change_prevented_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_momentum_any_torque_rod_direction_change_prevented(val):
    try:
        return CONVERT_adcs_momentum_any_torque_rod_direction_change_prevented_dict[val]
    except:
        return val
CONVERT_adcs_momentum_torque_rod_direction_3_dict = { 0 : 'POS', 1 : 'NEG',}
def CONVERT_adcs_momentum_torque_rod_direction_3(val):
    try:
        return CONVERT_adcs_momentum_torque_rod_direction_3_dict[val]
    except:
        return val
CONVERT_adcs_momentum_torque_rod_direction_2_dict = { 0 : 'POS', 1 : 'NEG',}
def CONVERT_adcs_momentum_torque_rod_direction_2(val):
    try:
        return CONVERT_adcs_momentum_torque_rod_direction_2_dict[val]
    except:
        return val
CONVERT_adcs_momentum_torque_rod_direction_1_dict = { 0 : 'POS', 1 : 'NEG',}
def CONVERT_adcs_momentum_torque_rod_direction_1(val):
    try:
        return CONVERT_adcs_momentum_torque_rod_direction_1_dict[val]
    except:
        return val
CONVERT_adcs_momentum_torque_rod_enable_3_dict = { 0 : 'DS', 1 : 'EN',}
def CONVERT_adcs_momentum_torque_rod_enable_3(val):
    try:
        return CONVERT_adcs_momentum_torque_rod_enable_3_dict[val]
    except:
        return val
CONVERT_adcs_momentum_torque_rod_enable_2_dict = { 0 : 'DS', 1 : 'EN',}
def CONVERT_adcs_momentum_torque_rod_enable_2(val):
    try:
        return CONVERT_adcs_momentum_torque_rod_enable_2_dict[val]
    except:
        return val
CONVERT_adcs_momentum_torque_rod_enable_1_dict = { 0 : 'DS', 1 : 'EN',}
def CONVERT_adcs_momentum_torque_rod_enable_1(val):
    try:
        return CONVERT_adcs_momentum_torque_rod_enable_1_dict[val]
    except:
        return val
CONVERT_adcs_momentum_mag_source_setting_dict = { 0 : 'NONE', 4 : 'MEASURED', 5 : 'MODELED', 7 : 'NO_FIELD_VALID',}
def CONVERT_adcs_momentum_mag_source_setting(val):
    try:
        return CONVERT_adcs_momentum_mag_source_setting_dict[val]
    except:
        return val
CONVERT_adcs_momentum_mag_source_used_dict = { 0 : 'NONE', 4 : 'MEASURED', 5 : 'MODELED', 7 : 'NO_FIELD_VALID',}
def CONVERT_adcs_momentum_mag_source_used(val):
    try:
        return CONVERT_adcs_momentum_mag_source_used_dict[val]
    except:
        return val
CONVERT_adcs_momentum_rate_source_setting_dict = { 0 : 'MEASURED', 1 : 'FILTERED',}
def CONVERT_adcs_momentum_rate_source_setting(val):
    try:
        return CONVERT_adcs_momentum_rate_source_setting_dict[val]
    except:
        return val
CONVERT_adcs_momentum_rate_source_used_dict = { 0 : 'MEASURED', 1 : 'FILTERED',}
def CONVERT_adcs_momentum_rate_source_used(val):
    try:
        return CONVERT_adcs_momentum_rate_source_used_dict[val]
    except:
        return val
CONVERT_adcs_css_sun_vector_status_dict = { 0 : 'GOOD', 1 : 'COARSE', 2 : 'BAD',}
def CONVERT_adcs_css_sun_vector_status(val):
    try:
        return CONVERT_adcs_css_sun_vector_status_dict[val]
    except:
        return val
CONVERT_adcs_css_invalid_count_reason_dict = { 0 : 'NONE', 1 : 'UNKNOWN_ERROR', 2 : 'DIODE_TOO_HIGH', 3 : 'DIODE_STALE_DATA', 4 : 'NO_NEW_TLM', 5 : 'LEN_CHK_FAIL', 6 : 'CRC_FAIL', 7 : 'SLIP_FAIL', 8 : 'UNKNOWN_HEADER', 9 : 'MSG_SEQ_STALE', 10 : 'DRIVER_ERROR',}
def CONVERT_adcs_css_invalid_count_reason(val):
    try:
        return CONVERT_adcs_css_invalid_count_reason_dict[val]
    except:
        return val
CONVERT_adcs_css_css_test_mode_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_css_css_test_mode(val):
    try:
        return CONVERT_adcs_css_css_test_mode_dict[val]
    except:
        return val
CONVERT_adcs_css_sun_vector_enabled_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_css_sun_vector_enabled(val):
    try:
        return CONVERT_adcs_css_sun_vector_enabled_dict[val]
    except:
        return val
CONVERT_adcs_css_meas_sun_valid_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_css_meas_sun_valid(val):
    try:
        return CONVERT_adcs_css_meas_sun_valid_dict[val]
    except:
        return val
CONVERT_adcs_css_power_state_dict = { 0 : 'OFF', 1 : 'ON',}
def CONVERT_adcs_css_power_state(val):
    try:
        return CONVERT_adcs_css_power_state_dict[val]
    except:
        return val
CONVERT_adcs_mag_mag_invalid_count_reason_dict = { 0 : 'NONE', 1 : 'UNKNOWN_ERROR', 2 : 'FIELD_TOO_LOW', 3 : 'MAG_STALE_DATA', 4 : 'FIELD_JUMP', 5 : 'COMMAND', 6 : 'CSS_TELEMETRY_ERROR',}
def CONVERT_adcs_mag_mag_invalid_count_reason(val):
    try:
        return CONVERT_adcs_mag_mag_invalid_count_reason_dict[val]
    except:
        return val
CONVERT_adcs_mag_mag_test_mode_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_mag_mag_test_mode(val):
    try:
        return CONVERT_adcs_mag_mag_test_mode_dict[val]
    except:
        return val
CONVERT_adcs_mag_mag_vector_enabled_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_mag_mag_vector_enabled(val):
    try:
        return CONVERT_adcs_mag_mag_vector_enabled_dict[val]
    except:
        return val
CONVERT_adcs_mag_mag_vector_valid_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_mag_mag_vector_valid(val):
    try:
        return CONVERT_adcs_mag_mag_vector_valid_dict[val]
    except:
        return val
CONVERT_adcs_mag_mag_power_state_dict = { 0 : 'OFF', 1 : 'ON',}
def CONVERT_adcs_mag_mag_power_state(val):
    try:
        return CONVERT_adcs_mag_mag_power_state_dict[val]
    except:
        return val
CONVERT_adcs_imu_imu_avg_vector_frame_dict = { 1 : 'BODY', 2 : 'AVIONICS', 3 : 'IMU',}
def CONVERT_adcs_imu_imu_avg_vector_frame(val):
    try:
        return CONVERT_adcs_imu_imu_avg_vector_frame_dict[val]
    except:
        return val
CONVERT_adcs_imu_imu_invalid_count_reason_dict = { 0 : 'NONE', 1 : 'UNKNOWN_ERROR', 2 : 'TOO_MANY_PACKETS', 3 : 'TOO_FEW_PACKETS', 4 : 'STALE_ANGLE_DATA', 5 : 'STALE_TIME_TAG_DATA', 6 : 'TIME_TAGS_NOT_CONSECUTIVE', 7 : 'TIME_TAGS_SPACING', 8 : 'TIME_TAGS_ALIGNMENT',}
def CONVERT_adcs_imu_imu_invalid_count_reason(val):
    try:
        return CONVERT_adcs_imu_imu_invalid_count_reason_dict[val]
    except:
        return val
CONVERT_adcs_imu_imu_valid_packets_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_imu_imu_valid_packets(val):
    try:
        return CONVERT_adcs_imu_imu_valid_packets_dict[val]
    except:
        return val
CONVERT_adcs_imu_imu_test_mode_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_imu_imu_test_mode(val):
    try:
        return CONVERT_adcs_imu_imu_test_mode_dict[val]
    except:
        return val
CONVERT_adcs_imu_imu_vector_enabled_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_imu_imu_vector_enabled(val):
    try:
        return CONVERT_adcs_imu_imu_vector_enabled_dict[val]
    except:
        return val
CONVERT_adcs_imu_imu_vector_valid_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_imu_imu_vector_valid(val):
    try:
        return CONVERT_adcs_imu_imu_vector_valid_dict[val]
    except:
        return val
CONVERT_adcs_imu_imu_power_state_dict = { 0 : 'OFF', 1 : 'ON',}
def CONVERT_adcs_imu_imu_power_state(val):
    try:
        return CONVERT_adcs_imu_imu_power_state_dict[val]
    except:
        return val
CONVERT_adcs_clock_sync_clock_sync_enable_dict = { 0 : 'DS', 1 : 'EN', 2 : 'SLOPE_ONLY', 3 : 'GPS_LOCK',}
def CONVERT_adcs_clock_sync_clock_sync_enable(val):
    try:
        return CONVERT_adcs_clock_sync_clock_sync_enable_dict[val]
    except:
        return val
CONVERT_adcs_clock_sync_pps_output_source_dict = { 0 : 'DISABLED', 1 : 'GPS', 2 : 'INTERNAL', 3 : 'EXTERNAL',}
def CONVERT_adcs_clock_sync_pps_output_source(val):
    try:
        return CONVERT_adcs_clock_sync_pps_output_source_dict[val]
    except:
        return val
CONVERT_adcs_clock_sync_pps_input_source_dict = { 0 : 'DISABLED', 1 : 'GPS', 2 : 'INTERNAL', 3 : 'EXTERNAL',}
def CONVERT_adcs_clock_sync_pps_input_source(val):
    try:
        return CONVERT_adcs_clock_sync_pps_input_source_dict[val]
    except:
        return val
CONVERT_adcs_clock_sync_clock_frame_rate_err_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_clock_sync_clock_frame_rate_err(val):
    try:
        return CONVERT_adcs_clock_sync_clock_frame_rate_err_dict[val]
    except:
        return val
CONVERT_adcs_clock_sync_clock_offset_adjust_active_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_clock_sync_clock_offset_adjust_active(val):
    try:
        return CONVERT_adcs_clock_sync_clock_offset_adjust_active_dict[val]
    except:
        return val
CONVERT_adcs_clock_sync_clock_slope_adjust_active_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_clock_sync_clock_slope_adjust_active(val):
    try:
        return CONVERT_adcs_clock_sync_clock_slope_adjust_active_dict[val]
    except:
        return val
CONVERT_adcs_clock_sync_incoming_pps_valid_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_clock_sync_incoming_pps_valid(val):
    try:
        return CONVERT_adcs_clock_sync_incoming_pps_valid_dict[val]
    except:
        return val
CONVERT_adcs_clock_sync_pps_recieved_this_cycle_dict = { 0 : 'NOT_RECV', 1 : 'RECV',}
def CONVERT_adcs_clock_sync_pps_recieved_this_cycle(val):
    try:
        return CONVERT_adcs_clock_sync_pps_recieved_this_cycle_dict[val]
    except:
        return val
CONVERT_adcs_tables_table_upload_status_dict = { 0 : 'NEW_DATA_IN', 1 : 'COMMITTING', 2 : 'COMMITTED', 3 : 'EXTRACTING', 4 : 'EXTRACTED', 5 : 'CALCULATING_CRC', 6 : 'CRC_READY', 7 : 'INVALID_TABLE', 8 : 'IDLE', 9 : 'FLASH_BURN_COPY', 10 : 'FLASH_BURN_DIRECT', 11 : 'FLASH_EXTRACT', 12 : 'FLASH_BURN_DONE', 13 : 'FLASH_EXTRACT_DONE', 14 : 'FLASH_WRITE_WITH_CRC', 15 : 'FLASH_READ', 16 : 'CRC_MISMATCH', 17 : 'FLASH_EXTRACT_FAILED', 18 : 'FLASH_BURN_ERR_MANIFEST', 19 : 'FLASH_BURN_ERR_MD5_GEN', 20 : 'FLASH_BURN_ERR_WRITE', 21 : 'FLASH_BURN_ERR_TBL_LKUP', 22 : 'FLASH_BURN_ERR_MOUNT', 23 : 'TABLES_TASK_ERROR', 24 : 'TABLES_OPERATION_TIMEOUT',}
def CONVERT_adcs_tables_table_upload_status(val):
    try:
        return CONVERT_adcs_tables_table_upload_status_dict[val]
    except:
        return val
CONVERT_adcs_tables_flash_burn_armed_dict = { 1 : 'YES', 0 : 'NO',}
def CONVERT_adcs_tables_flash_burn_armed(val):
    try:
        return CONVERT_adcs_tables_flash_burn_armed_dict[val]
    except:
        return val
CONVERT_adcs_tables_tables_thread_status_dict = { 0 : 'IDLE', 1 : 'ACTIVE',}
def CONVERT_adcs_tables_tables_thread_status(val):
    try:
        return CONVERT_adcs_tables_tables_thread_status_dict[val]
    except:
        return val
CONVERT_adcs_tracker_2_operating_mode_dict = { 0 : 'IDLE', 1 : 'INITIALIZE', 2 : 'STARID', 3 : 'TRACK', 4 : 'PHOTO', 5 : 'CAL', 6 : 'BLOCK',}
def CONVERT_adcs_tracker_2_operating_mode(val):
    try:
        return CONVERT_adcs_tracker_2_operating_mode_dict[val]
    except:
        return val
CONVERT_adcs_tracker_2_star_id_step_dict = { 0 : 'IDLE', 1 : 'INITIALIZE', 2 : 'WAITING_FOR_IMAGE1', 3 : 'WAITING_FOR_IMAGE2', 4 : 'CALCULATE_RATE', 5 : 'MAKE_UNIT_VECTORS', 6 : 'AWAITING_TRISTAR', 7 : 'OK_FOUND_4', 8 : 'OK_FOUND_3', 9 : 'TIME_OUT', 10 : 'SPARE', 11 : 'NO_MATCH',}
def CONVERT_adcs_tracker_2_star_id_step(val):
    try:
        return CONVERT_adcs_tracker_2_star_id_step_dict[val]
    except:
        return val
CONVERT_adcs_tracker_2_id_status_dict = { 0 : 'IDLE', 1 : 'INITIALIZE', 2 : 'WAITING_FOR_IMAGE1', 3 : 'WAITING_FOR_IMAGE2', 4 : 'CALCULATE_RATE', 5 : 'MAKE_UNIT_VECTORS', 6 : 'AWAITING_TRISTAR', 7 : 'OK_FOUND_4', 8 : 'OK_FOUND_3', 9 : 'TIME_OUT', 10 : 'SPARE', 11 : 'NO_MATCH',}
def CONVERT_adcs_tracker_2_id_status(val):
    try:
        return CONVERT_adcs_tracker_2_id_status_dict[val]
    except:
        return val
CONVERT_adcs_tracker_2_id_status_save_dict = { 0 : 'IDLE', 1 : 'INITIALIZE', 2 : 'WAITING_FOR_IMAGE1', 3 : 'WAITING_FOR_IMAGE2', 4 : 'CALCULATE_RATE', 5 : 'MAKE_UNIT_VECTORS', 6 : 'AWAITING_TRISTAR', 7 : 'OK_FOUND_4', 8 : 'OK_FOUND_3', 9 : 'TIME_OUT', 10 : 'SPARE', 11 : 'NO_MATCH',}
def CONVERT_adcs_tracker_2_id_status_save(val):
    try:
        return CONVERT_adcs_tracker_2_id_status_save_dict[val]
    except:
        return val
CONVERT_adcs_tracker_2_att_status_dict = { 0 : 'OK', 1 : 'PENDING', 2 : 'BAD', 3 : 'TOO_FEW_STARS', 4 : 'QUEST_FAILED', 5 : 'RESIDUALS_TOO_HIGH', 6 : 'TOO_CLOSE_TO_EDGE', 7 : 'PIX_AMP_TOO_LOW', 8 : 'PIX_AMP_TOO_HIGH', 9 : 'BACKGND_TOO_HIGH', 10 : 'TRACK_FAILURE', 11 : 'PIX_SUM_TOO_LOW', 12 : 'UNUSED', 13 : 'TOO_DIM_FOR_STARID', 14 : 'TOO_MANY_GROUPS', 15 : 'TOO_FEW_GROUPS', 16 : 'CHANNEL_DISABLED', 17 : 'TRACK_BLK_OVERLAP', 18 : 'OK_FOR_STARID', 19 : 'TOO_CLOSE_TO_OTHER', 20 : 'TOO_MANY_PIXELS', 21 : 'TOO_MANY_COLUMNS', 22 : 'TOO_MANY_ROWS', 23 : 'OPEN', 24 : 'CLOSED', 25 : 'RATE_TOO_HIGH',}
def CONVERT_adcs_tracker_2_att_status(val):
    try:
        return CONVERT_adcs_tracker_2_att_status_dict[val]
    except:
        return val
CONVERT_adcs_tracker_2_rate_est_status_dict = { 0 : 'OK', 1 : 'PENDING', 2 : 'BAD', 3 : 'TOO_FEW_STARS', 4 : 'QUEST_FAILED', 5 : 'RESIDUALS_TOO_HIGH', 6 : 'TOO_CLOSE_TO_EDGE', 7 : 'PIX_AMP_TOO_LOW', 8 : 'PIX_AMP_TOO_HIGH', 9 : 'BACKGND_TOO_HIGH', 10 : 'TRACK_FAILURE', 11 : 'PIX_SUM_TOO_LOW', 12 : 'UNUSED', 13 : 'TOO_DIM_FOR_STARID', 14 : 'TOO_MANY_GROUPS', 15 : 'TOO_FEW_GROUPS', 16 : 'CHANNEL_DISABLED', 17 : 'TRACK_BLK_OVERLAP', 18 : 'OK_FOR_STARID', 19 : 'TOO_CLOSE_TO_OTHER', 20 : 'TOO_MANY_PIXELS', 21 : 'TOO_MANY_COLUMNS', 22 : 'TOO_MANY_ROWS', 23 : 'OPEN', 24 : 'CLOSED', 25 : 'RATE_TOO_HIGH',}
def CONVERT_adcs_tracker_2_rate_est_status(val):
    try:
        return CONVERT_adcs_tracker_2_rate_est_status_dict[val]
    except:
        return val
CONVERT_adcs_tracker_2_vel_aid_status_dict = { 0 : 'OK', 1 : 'PENDING', 2 : 'BAD', 3 : 'TOO_FEW_STARS', 4 : 'QUEST_FAILED', 5 : 'RESIDUALS_TOO_HIGH', 6 : 'TOO_CLOSE_TO_EDGE', 7 : 'PIX_AMP_TOO_LOW', 8 : 'PIX_AMP_TOO_HIGH', 9 : 'BACKGND_TOO_HIGH', 10 : 'TRACK_FAILURE', 11 : 'PIX_SUM_TOO_LOW', 12 : 'UNUSED', 13 : 'TOO_DIM_FOR_STARID', 14 : 'TOO_MANY_GROUPS', 15 : 'TOO_FEW_GROUPS', 16 : 'CHANNEL_DISABLED', 17 : 'TRACK_BLK_OVERLAP', 18 : 'OK_FOR_STARID', 19 : 'TOO_CLOSE_TO_OTHER', 20 : 'TOO_MANY_PIXELS', 21 : 'TOO_MANY_COLUMNS', 22 : 'TOO_MANY_ROWS', 23 : 'OPEN', 24 : 'CLOSED', 25 : 'RATE_TOO_HIGH',}
def CONVERT_adcs_tracker_2_vel_aid_status(val):
    try:
        return CONVERT_adcs_tracker_2_vel_aid_status_dict[val]
    except:
        return val
CONVERT_adcs_tracker_2_track_ref_available_dict = { 1 : 'YES', 0 : 'NO',}
def CONVERT_adcs_tracker_2_track_ref_available(val):
    try:
        return CONVERT_adcs_tracker_2_track_ref_available_dict[val]
    except:
        return val
CONVERT_adcs_gps_gps_sample_error_dict = { 0 : 'NONE', 1 : 'NOPREVIOUS', 2 : 'PREV_STATE', 3 : 'NEW_STATE', 4 : 'TIME_TOL', 5 : 'POS_TOL', 6 : 'VEL_MAG_TOL', 7 : 'VEL_ANG_TOL', 8 : 'ENERGY_TOL', 9 : 'GPSREF_TIME', 10 : 'GPSPOS_SOL', 11 : 'GPSVEL_SOL', 12 : 'RADIUS_TOO_SMALL', 13 : 'RADIUS_TOO_LARGE',}
def CONVERT_adcs_gps_gps_sample_error(val):
    try:
        return CONVERT_adcs_gps_gps_sample_error_dict[val]
    except:
        return val
CONVERT_adcs_gps_gps_pos_lock_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_gps_gps_pos_lock(val):
    try:
        return CONVERT_adcs_gps_gps_pos_lock_dict[val]
    except:
        return val
CONVERT_adcs_gps_gps_time_lock_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_gps_gps_time_lock(val):
    try:
        return CONVERT_adcs_gps_gps_time_lock_dict[val]
    except:
        return val
CONVERT_adcs_gps_msg_data_valid_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_gps_msg_data_valid(val):
    try:
        return CONVERT_adcs_gps_msg_data_valid_dict[val]
    except:
        return val
CONVERT_adcs_gps_gps_new_data_recieved_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_gps_gps_new_data_recieved(val):
    try:
        return CONVERT_adcs_gps_gps_new_data_recieved_dict[val]
    except:
        return val
CONVERT_adcs_gps_gps_enabled_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_gps_gps_enabled(val):
    try:
        return CONVERT_adcs_gps_gps_enabled_dict[val]
    except:
        return val
CONVERT_adcs_gps_gps_valid_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_gps_gps_valid(val):
    try:
        return CONVERT_adcs_gps_gps_valid_dict[val]
    except:
        return val
CONVERT_adcs_gps_gps_power_state_dict = { 0 : 'OFF', 1 : 'ON',}
def CONVERT_adcs_gps_gps_power_state(val):
    try:
        return CONVERT_adcs_gps_gps_power_state_dict[val]
    except:
        return val
CONVERT_adcs_gps_gps_supervisor_tripped_dict = { 0 : 'NO', 1 : 'MAX_CYCLES_SINCE_CRC', 2 : 'LOSS_OF_VALID_LOCK', 3 : 'PERSISTENT_INVALID_DATA', 4 : 'VOLT_WARNING_COUNTS',}
def CONVERT_adcs_gps_gps_supervisor_tripped(val):
    try:
        return CONVERT_adcs_gps_gps_supervisor_tripped_dict[val]
    except:
        return val
CONVERT_adcs_cal_tracker_align_method_dict = { 0 : 'BATCH', 1 : 'RUNNING',}
def CONVERT_adcs_cal_tracker_align_method(val):
    try:
        return CONVERT_adcs_cal_tracker_align_method_dict[val]
    except:
        return val
CONVERT_adcs_cal_tracker_align_usage_dict = { 0 : 'TABLE', 1 : 'DYN',}
def CONVERT_adcs_cal_tracker_align_usage(val):
    try:
        return CONVERT_adcs_cal_tracker_align_usage_dict[val]
    except:
        return val
CONVERT_adcs_tracker_ctrl_tracker_att_valid0_dict = { 1 : 'YES', 0 : 'NO',}
def CONVERT_adcs_tracker_ctrl_tracker_att_valid0(val):
    try:
        return CONVERT_adcs_tracker_ctrl_tracker_att_valid0_dict[val]
    except:
        return val
CONVERT_adcs_tracker_ctrl_tracker_att_valid1_dict = { 1 : 'YES', 0 : 'NO',}
def CONVERT_adcs_tracker_ctrl_tracker_att_valid1(val):
    try:
        return CONVERT_adcs_tracker_ctrl_tracker_att_valid1_dict[val]
    except:
        return val
CONVERT_adcs_tracker_ctrl_tracker_usage_enabled0_dict = { 1 : 'YES', 0 : 'NO',}
def CONVERT_adcs_tracker_ctrl_tracker_usage_enabled0(val):
    try:
        return CONVERT_adcs_tracker_ctrl_tracker_usage_enabled0_dict[val]
    except:
        return val
CONVERT_adcs_tracker_ctrl_tracker_usage_enabled1_dict = { 1 : 'YES', 0 : 'NO',}
def CONVERT_adcs_tracker_ctrl_tracker_usage_enabled1(val):
    try:
        return CONVERT_adcs_tracker_ctrl_tracker_usage_enabled1_dict[val]
    except:
        return val
CONVERT_adcs_tracker_ctrl_nst_att_available_2_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_tracker_ctrl_nst_att_available_2(val):
    try:
        return CONVERT_adcs_tracker_ctrl_nst_att_available_2_dict[val]
    except:
        return val
CONVERT_adcs_tracker_ctrl_nst_att_timing_2_dict = { 0 : 'INVALID', 1 : 'VALID',}
def CONVERT_adcs_tracker_ctrl_nst_att_timing_2(val):
    try:
        return CONVERT_adcs_tracker_ctrl_nst_att_timing_2_dict[val]
    except:
        return val
CONVERT_adcs_tracker_ctrl_nst_valid_att_2_dict = { 0 : 'INVALID', 1 : 'VALID',}
def CONVERT_adcs_tracker_ctrl_nst_valid_att_2(val):
    try:
        return CONVERT_adcs_tracker_ctrl_nst_valid_att_2_dict[val]
    except:
        return val
CONVERT_adcs_tracker_ctrl_nst_data_valid_2_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_tracker_ctrl_nst_data_valid_2(val):
    try:
        return CONVERT_adcs_tracker_ctrl_nst_data_valid_2_dict[val]
    except:
        return val
CONVERT_adcs_tracker_ctrl_nst_data_integrity_2_dict = { 0 : 'INVALID', 1 : 'VALID',}
def CONVERT_adcs_tracker_ctrl_nst_data_integrity_2(val):
    try:
        return CONVERT_adcs_tracker_ctrl_nst_data_integrity_2_dict[val]
    except:
        return val
CONVERT_adcs_tracker_ctrl_nst_new_data_recieved_2_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_tracker_ctrl_nst_new_data_recieved_2(val):
    try:
        return CONVERT_adcs_tracker_ctrl_nst_new_data_recieved_2_dict[val]
    except:
        return val
CONVERT_adcs_tracker_ctrl_nst_power_state_2_dict = { 0 : 'OFF', 1 : 'ON',}
def CONVERT_adcs_tracker_ctrl_nst_power_state_2(val):
    try:
        return CONVERT_adcs_tracker_ctrl_nst_power_state_2_dict[val]
    except:
        return val
CONVERT_adcs_tracker_ctrl_desired_nst_power_state_2_dict = { 0 : 'OFF', 1 : 'ON',}
def CONVERT_adcs_tracker_ctrl_desired_nst_power_state_2(val):
    try:
        return CONVERT_adcs_tracker_ctrl_desired_nst_power_state_2_dict[val]
    except:
        return val
CONVERT_adcs_ctrl_nst_sup_reinit_performed_2_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_ctrl_nst_sup_reinit_performed_2(val):
    try:
        return CONVERT_adcs_ctrl_nst_sup_reinit_performed_2_dict[val]
    except:
        return val
CONVERT_adcs_ctrl_nst_sup_no_att_2_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_ctrl_nst_sup_no_att_2(val):
    try:
        return CONVERT_adcs_ctrl_nst_sup_no_att_2_dict[val]
    except:
        return val
CONVERT_adcs_ctrl_nst_sup_max_resets_2_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_ctrl_nst_sup_max_resets_2(val):
    try:
        return CONVERT_adcs_ctrl_nst_sup_max_resets_2_dict[val]
    except:
        return val
CONVERT_adcs_ctrl_nst_sup_stale_data_2_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_ctrl_nst_sup_stale_data_2(val):
    try:
        return CONVERT_adcs_ctrl_nst_sup_stale_data_2_dict[val]
    except:
        return val
CONVERT_adcs_ctrl_nst_sup_max_reinits_2_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_ctrl_nst_sup_max_reinits_2(val):
    try:
        return CONVERT_adcs_ctrl_nst_sup_max_reinits_2_dict[val]
    except:
        return val
CONVERT_adcs_ctrl_nst_sup_allow_reinits_2_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_adcs_ctrl_nst_sup_allow_reinits_2(val):
    try:
        return CONVERT_adcs_ctrl_nst_sup_allow_reinits_2_dict[val]
    except:
        return val
CONVERT_adcs_ctrl_pkt_nst_sup_active_2_dict = { 0 : 'OFF', 1 : 'ON',}
def CONVERT_adcs_ctrl_pkt_nst_sup_active_2(val):
    try:
        return CONVERT_adcs_ctrl_pkt_nst_sup_active_2_dict[val]
    except:
        return val
CONVERT_adcs_ctrl_pkt_nst_sup_enabled_2_dict = { 0 : 'OFF', 1 : 'ON',}
def CONVERT_adcs_ctrl_pkt_nst_sup_enabled_2(val):
    try:
        return CONVERT_adcs_ctrl_pkt_nst_sup_enabled_2_dict[val]
    except:
        return val
CONVERT_adcs_ext_tracker_2_cmd_status_dict = { 0 : 'OK', 1 : 'BAD_APID', 2 : 'BAD_OPCODE', 3 : 'BAD_DATA', 4 : 'NOW_READING', 5 : 'DONE_READING', 6 : 'IDLE', 7 : 'NO_CMD_DATA', 8 : 'CMD_SRVC_OVERRUN', 9 : 'CMD_APID_OVERRUN', 10 : 'SPARE', 11 : 'BAD_ELEMENT', 12 : 'TABLES_BUSY', 13 : 'FLASH_NOT_ARMED', 14 : 'THRUSTERS_NOT_ENABLED', 15 : 'ATT_ERR_TOO_HIGH', 16 : 'ASYNC_REFUSED', 17 : 'DRIVER_ERROR', 18 : 'INVALID_GNC_MODE', 19 : 'INVALID_COMPONENT_MODE', 20 : 'ARG_OUT_OF_RANGE', 21 : 'INVALID_SW_STATE', 22 : 'NO_VALID_CHEBY_SLOT', 23 : 'TOO_FEW_CMD_BYTES', 24 : 'TOO_MANY_CMD_BYTES', 25 : 'COMPONENT_DOES_NOT_EXIST', 26 : 'INVALID_POSITION', 27 : 'INVALID_RATE', 28 : 'CMD_ERR_1', 29 : 'CMD_ERR_2', 30 : 'CMD_ERR_3', 31 : 'CMD_ERR_4', 32 : 'CMD_ERR_5', 33 : 'CMD_ERR_6', 34 : 'CMD_ERR_7', 35 : 'CMD_ERR_8', 36 : 'CMD_ERR_9', 37 : 'INVALID_TIME', 38 : 'MAX_DEFINED_CMD_STATUS_ETYPES',}
def CONVERT_adcs_ext_tracker_2_cmd_status(val):
    try:
        return CONVERT_adcs_ext_tracker_2_cmd_status_dict[val]
    except:
        return val
CONVERT_adcs_ext_tracker_2_cmd_reject_status_dict = { 0 : 'OK', 1 : 'BAD_APID', 2 : 'BAD_OPCODE', 3 : 'BAD_DATA', 4 : 'NOW_READING', 5 : 'DONE_READING', 6 : 'IDLE', 7 : 'NO_CMD_DATA', 8 : 'CMD_SRVC_OVERRUN', 9 : 'CMD_APID_OVERRUN', 10 : 'SPARE', 11 : 'BAD_ELEMENT', 12 : 'TABLES_BUSY', 13 : 'FLASH_NOT_ARMED', 14 : 'THRUSTERS_NOT_ENABLED', 15 : 'ATT_ERR_TOO_HIGH', 16 : 'ASYNC_REFUSED', 17 : 'DRIVER_ERROR', 18 : 'INVALID_GNC_MODE', 19 : 'INVALID_COMPONENT_MODE', 20 : 'ARG_OUT_OF_RANGE', 21 : 'INVALID_SW_STATE', 22 : 'NO_VALID_CHEBY_SLOT', 23 : 'TOO_FEW_CMD_BYTES', 24 : 'TOO_MANY_CMD_BYTES', 25 : 'COMPONENT_DOES_NOT_EXIST', 26 : 'INVALID_POSITION', 27 : 'INVALID_RATE', 28 : 'CMD_ERR_1', 29 : 'CMD_ERR_2', 30 : 'CMD_ERR_3', 31 : 'CMD_ERR_4', 32 : 'CMD_ERR_5', 33 : 'CMD_ERR_6', 34 : 'CMD_ERR_7', 35 : 'CMD_ERR_8', 36 : 'CMD_ERR_9', 37 : 'INVALID_TIME', 38 : 'MAX_DEFINED_CMD_STATUS_ETYPES',}
def CONVERT_adcs_ext_tracker_2_cmd_reject_status(val):
    try:
        return CONVERT_adcs_ext_tracker_2_cmd_reject_status_dict[val]
    except:
        return val
CONVERT_adcs_ext_tracker_2_table_upload_status_dict = { 0 : 'NEW_DATA_IN', 1 : 'COMMITTING', 2 : 'COMMITTED', 3 : 'EXTRACTING', 4 : 'EXTRACTED', 5 : 'CALCULATING_CRC', 6 : 'CRC_READY', 7 : 'INVALID_TABLE', 8 : 'IDLE', 9 : 'FLASH_BURN_COPY', 10 : 'FLASH_BURN_DIRECT', 11 : 'FLASH_EXTRACT', 12 : 'FLASH_BURN_DONE', 13 : 'FLASH_EXTRACT_DONE', 14 : 'FLASH_WRITE_WITH_CRC', 15 : 'FLASH_READ', 16 : 'CRC_MISMATCH', 17 : 'FLASH_EXTRACT_FAILED', 18 : 'FLASH_BURN_ERR_MANIFEST', 19 : 'FLASH_BURN_ERR_MD5_GEN', 20 : 'FLASH_BURN_ERR_WRITE', 21 : 'FLASH_BURN_ERR_TBL_LKUP', 22 : 'FLASH_BURN_ERR_MOUNT', 23 : 'TABLES_TASK_ERROR', 24 : 'TABLES_OPERATION_TIMEOUT',}
def CONVERT_adcs_ext_tracker_2_table_upload_status(val):
    try:
        return CONVERT_adcs_ext_tracker_2_table_upload_status_dict[val]
    except:
        return val
CONVERT_eps_deploy_select_dict = { 2 : 'SA1', 3 : 'SA2', 4 : 'ANT', 5 : 'ENA', 6 : 'DIS',}
def CONVERT_eps_deploy_select(val):
    try:
        return CONVERT_eps_deploy_select_dict[val]
    except:
        return val
CONVERT_REUSABLE_SPARE_1_dict = {}
def CONVERT_REUSABLE_SPARE_1(val):
    try:
        return CONVERT_REUSABLE_SPARE_1_dict[val]
    except:
        return val
CONVERT_eps_pwr_state_inst4_dict = { 0 : 'OFF', 1 : 'ON',}
def CONVERT_eps_pwr_state_inst4(val):
    try:
        return CONVERT_eps_pwr_state_inst4_dict[val]
    except:
        return val
CONVERT_eps_pwr_state_inst3_dict = { 0 : 'OFF', 1 : 'ON',}
def CONVERT_eps_pwr_state_inst3(val):
    try:
        return CONVERT_eps_pwr_state_inst3_dict[val]
    except:
        return val
CONVERT_eps_pwr_state_dsps_dict = { 0 : 'OFF', 1 : 'ON',}
def CONVERT_eps_pwr_state_dsps(val):
    try:
        return CONVERT_eps_pwr_state_dsps_dict[val]
    except:
        return val
CONVERT_eps_pwr_state_csie_dict = { 0 : 'OFF', 1 : 'ON',}
def CONVERT_eps_pwr_state_csie(val):
    try:
        return CONVERT_eps_pwr_state_csie_dict[val]
    except:
        return val
CONVERT_eps_pwr_state_xband_dict = { 0 : 'OFF', 1 : 'ON',}
def CONVERT_eps_pwr_state_xband(val):
    try:
        return CONVERT_eps_pwr_state_xband_dict[val]
    except:
        return val
CONVERT_eps_pwr_state_uhf_dict = { 0 : 'OFF', 1 : 'ON',}
def CONVERT_eps_pwr_state_uhf(val):
    try:
        return CONVERT_eps_pwr_state_uhf_dict[val]
    except:
        return val
CONVERT_eps_pwr_state_adcs_dict = { 0 : 'OFF', 1 : 'ON',}
def CONVERT_eps_pwr_state_adcs(val):
    try:
        return CONVERT_eps_pwr_state_adcs_dict[val]
    except:
        return val
CONVERT_eps_bat_tlm_state_1_dict = { 0 : 'DIS', 1 : 'ENA',}
def CONVERT_eps_bat_tlm_state_1(val):
    try:
        return CONVERT_eps_bat_tlm_state_1_dict[val]
    except:
        return val
CONVERT_eps_bat_tlm_state_0_dict = { 0 : 'DIS', 1 : 'ENA',}
def CONVERT_eps_bat_tlm_state_0(val):
    try:
        return CONVERT_eps_bat_tlm_state_0_dict[val]
    except:
        return val
CONVERT_eps_bat_alive_dict = { 0 : 'DEAD', 1 : 'ALIVE',}
def CONVERT_eps_bat_alive(val):
    try:
        return CONVERT_eps_bat_alive_dict[val]
    except:
        return val
CONVERT_mram_state_dict = { 0 : 'OFF', 1 : 'ON',}
def CONVERT_mram_state(val):
    try:
        return CONVERT_mram_state_dict[val]
    except:
        return val
CONVERT_cfi_pwr_state_dict = { 0 : 'OFF', 1 : 'ON',}
def CONVERT_cfi_pwr_state(val):
    try:
        return CONVERT_cfi_pwr_state_dict[val]
    except:
        return val
CONVERT_cfi_triple_state_dict = { 0 : 'SINGLE', 1 : 'TRIPLE',}
def CONVERT_cfi_triple_state(val):
    try:
        return CONVERT_cfi_triple_state_dict[val]
    except:
        return val
CONVERT_cfi_sw_state_dict = { 0 : 'OFF', 1 : 'GOOD', 2 : 'XFER_TO', 3 : 'DONE_TO', 4 : 'BUSY_TO',}
def CONVERT_cfi_sw_state(val):
    try:
        return CONVERT_cfi_sw_state_dict[val]
    except:
        return val
CONVERT_sw_cmd_rjct_op_dict = { 33 : 'DES_RST_STATS', 34 : 'DES_ADD_TASK', 35 : 'DES_SUB_TASK', 36 : 'DES_ADD_BACK', 37 : 'DES_SUB_BACK', 38 : 'DES_SET_TIME', 39 : 'DES_DUMP_SCHED', 40 : 'DES_SET_TASK_NUM', 16 : 'FP_RST_STATS', 17 : 'FP_RST_RESULTS', 18 : 'FP_VALIDATE', 19 : 'FP_SET_STATE', 20 : 'FP_SET_WP_STATE', 22 : 'FP_DUMP_RESULTS', 23 : 'FP_SET_WP', 24 : 'FP_SET_WP_THRESH', 25 : 'FP_SET_WP_RESP', 26 : 'FP_SET_TEST', 176 : 'MRAM_CLEAR', 179 : 'MRAM_ERR_INJ', 180 : 'MRAM_PWR', 181 : 'MRAM_PWR_TOGGLE', 185 : 'NAND_BAD_BLOCK', 186 : 'NAND_FORMAT', 187 : 'NAND_FORMAT_HALT', 188 : 'NAND_BB_INIT', 189 : 'NAND_REMAP', 64 : 'SEQ_LOAD', 65 : 'SEQ_INIT', 66 : 'SEQ_STATE', 67 : 'SEQ_VERIFY', 68 : 'SEQ_STOP', 69 : 'SEQ_FIND', 70 : 'SEQ_INFO', 71 : 'SEQ_DUMP', 72 : 'SEQ_RST_STATS', 73 : 'SEQ_LD_START', 74 : 'SEQ_LD_COMMIT', 75 : 'SEQ_LD_ABORT', 76 : 'SEQ_LIBRARY', 77 : 'SEQ_CLEAR', 144 : 'STORE_WRITE_STATE', 145 : 'STORE_READ', 146 : 'STORE_HALT', 147 : 'STORE_PLAYBACK', 149 : 'STORE_SELECT', 150 : 'STORE_SET_PARTITION', 151 : 'STORE_RESET_PARTITION', 152 : 'STORE_FLUSH', 153 : 'STORE_MOVE_READ', 154 : 'STORE_MULTI_PLAYBACK', 224 : 'CMD_OPCODE_UHF_PASS', 225 : 'CMD_OPCODE_UHF_INIT', 226 : 'CMD_OPCODE_UHF_RESP_STATE', 240 : 'PAYLOAD_MSG_STATE', 241 : 'PAYLOAD_HK_RESET', 242 : 'PAYLOAD_FLAGS_RESET', 243 : 'PAYLOAD_SET_ALIVENESS', 256 : 'EPS_SET_BAT_TIME', 257 : 'EPS_GET_BAT_TIME', 258 : 'EPS_BAT_PASS', 259 : 'EPS_BAT_TLM_STATE', 260 : 'EPS_BAT_HEATER', 261 : 'EPS_BAT_SET_CSP1', 262 : 'EPS_BAT_REBOOT', 263 : 'EPS_BAT_WDT', 160 : 'CMD_OPCODE_CFI_PWR_ON', 161 : 'CMD_OPCODE_CFI_PWR_OFF', 162 : 'CMD_OPCODE_CFI_SELECT', 163 : 'CMD_OPCODE_CFI_SELECT_TRIO', 272 : 'ADCS_PASS', 273 : 'ADCS_RESET', 274 : 'ADCS_READ', 275 : 'ADCS_COARSE_POINT', 276 : 'ADCS_FINE_POINT', 277 : 'ADCS_RAM_POINT', 278 : 'ADCS_FINE_UPDATE', 279 : 'ADCS_RAM_UPDATE', 280 : 'ADCS_ECLIPSE_CHECK', 281 : 'ADCS_DUMP_IMAGE', 282 : 'ADCS_DUMP_STATE', 283 : 'ADCS_INIT_EPHEMERIS', 284 : 'ADCS_SET_TIME', 0 : 'NOOP', 1 : 'ARM', 2 : 'CMD_RST_STATS', 3 : 'CMD_XSUM', 4 : 'CMD_ECHO_STATE', 5 : 'CMD_VERSION', 48 : 'LOG_ROUTE', 49 : 'LOG_STATE', 50 : 'LOG_RST_STATS', 52 : 'LOG_RESET_READ', 53 : 'LOG_ISSUE', 54 : 'LOG_DUMP_INFO', 55 : 'LOG_SET_PUBLISH', 56 : 'LOG_ALL_ROUTE', 80 : 'MEM_DUMP', 81 : 'MEM_LOAD', 82 : 'MEM_ERASE', 83 : 'MEM_XSUM', 84 : 'MEM_ABORT', 85 : 'MEM_RESET', 86 : 'MEM_LOAD_DWORD', 87 : 'MEM_LOAD_WORD', 88 : 'MEM_LOAD_BYTE', 89 : 'MEM_RESET_COUNTERS', 90 : 'MEM_COPY', 91 : 'MEM_TEST', 96 : 'PKT_ISSUE', 97 : 'PKT_SET_RATE', 98 : 'PKT_SET_STREAM', 99 : 'PKT_SET_PRIORITY', 100 : 'PKT_QUERY_APID', 101 : 'PKT_SET_DELAY', 102 : 'PKT_COMMIT_TABLE', 103 : 'LIB_RESET_COUNTERS', 104 : 'LIB_DUMP_ENTRIES', 105 : 'PKT_RESET_COUNTERS', 128 : 'TBL_DUMP', 129 : 'TBL_LOAD', 130 : 'TBL_LOAD_START', 131 : 'TBL_COMMIT', 132 : 'TBL_ABORT', 133 : 'TBL_VERIFY', 134 : 'TBL_SAVE', 135 : 'TBL_RESET_STATS', 208 : 'EPS_PWR_ON', 209 : 'EPS_PWR_OFF', 210 : 'EPS_PWR_CYCLE', 211 : 'EPS_DEPLOY', 212 : 'EPS_DEPLOY_ABORT', 304 : 'HK_TIME_RESET', 201 : 'DOWNLINK', 207 : 'CLT_RESET', 206 : 'CLT_THRESHOLD', 205 : 'WATCHDOG', 204 : 'PHOENIX', 203 : 'SAFE', 202 : 'SCIENCE', 200 : 'SET_AUTO_PROMOTE_SCI', 288 : 'XBAND_WRITE', 289 : 'XBAND_READ', 290 : 'XBAND_ENABLE_TX',}
def CONVERT_sw_cmd_rjct_op(val):
    try:
        return CONVERT_sw_cmd_rjct_op_dict[val]
    except:
        return val
CONVERT_sw_seq_exec_buf_auto_dict = { 0 : 'RAM_SMALL0', 1 : 'RAM_SMALL1', 2 : 'RAM_SMALL2', 3 : 'RAM_SMALL3', 4 : 'RAM_SMALL4', 5 : 'RAM_SMALL5', 6 : 'RAM_SMALL6', 7 : 'RAM_SMALL7', 8 : 'RAM_MED0', 9 : 'RAM_MED1', 10 : 'RAM_MED2', 11 : 'RAM_MED3', 12 : 'RAM_MED4', 13 : 'RAM_LARGE0', 14 : 'RAM_LARGE1', 15 : 'RAM_LARGE2', 16 : 'RAM_LARGE3', 17 : 'RAM_LARGE4', 18 : 'NVM_SMALL0', 19 : 'NVM_SMALL1', 20 : 'NVM_SMALL2', 21 : 'NVM_SMALL3', 22 : 'NVM_SMALL4', 23 : 'NVM_SMALL5', 24 : 'NVM_SMALL6', 25 : 'NVM_SMALL7', 26 : 'NVM_SMALL8', 27 : 'NVM_SMALL9', 28 : 'NVM_SMALL10', 29 : 'NVM_SMALL11', 30 : 'NVM_SMALL12', 31 : 'NVM_SMALL13', 32 : 'NVM_SMALL14', 33 : 'NVM_SMALL15', 34 : 'NVM_SMALL16', 35 : 'NVM_SMALL17', 36 : 'NVM_SMALL18', 37 : 'NVM_SMALL19', 38 : 'NVM_SMALL20', 39 : 'NVM_SMALL21', 40 : 'NVM_SMALL22', 41 : 'NVM_SMALL23', 42 : 'NVM_SMALL24', 43 : 'NVM_SMALL25', 44 : 'NVM_SMALL26', 45 : 'NVM_SMALL27', 46 : 'NVM_SMALL28', 47 : 'NVM_SMALL29', 48 : 'NVM_SMALL30', 49 : 'NVM_SMALL31', 50 : 'NVM_SMALL32', 51 : 'NVM_SMALL33', 52 : 'NVM_SMALL34', 53 : 'NVM_SMALL35', 54 : 'NVM_SMALL36', 55 : 'NVM_SMALL37', 56 : 'NVM_SMALL38', 57 : 'NVM_SMALL39', 58 : 'NVM_SMALL40', 59 : 'NVM_SMALL41', 60 : 'NVM_SMALL42', 61 : 'NVM_SMALL43', 62 : 'NVM_SMALL44', 63 : 'NVM_SMALL45', 64 : 'NVM_SMALL46', 65 : 'NVM_SMALL47', 66 : 'NVM_SMALL48', 67 : 'NVM_SMALL49', 68 : 'NVM_SMALL50', 69 : 'NVM_SMALL51', 70 : 'NVM_SMALL52', 71 : 'NVM_SMALL53', 72 : 'NVM_SMALL54', 73 : 'NVM_SMALL55', 74 : 'NVM_SMALL56', 75 : 'NVM_SMALL57', 76 : 'NVM_SMALL58', 77 : 'NVM_SMALL59', 78 : 'NVM_SMALL60', 79 : 'NVM_SMALL61', 80 : 'NVM_SMALL62', 81 : 'NVM_SMALL63', 82 : 'NVM_SMALL64', 83 : 'NVM_SMALL65', 84 : 'NVM_SMALL66', 85 : 'NVM_SMALL67', 86 : 'NVM_SMALL68', 87 : 'NVM_SMALL69', 88 : 'NVM_SMALL70', 89 : 'NVM_SMALL71', 90 : 'NVM_SMALL72', 91 : 'NVM_SMALL73', 92 : 'NVM_SMALL74', 93 : 'NVM_SMALL75', 94 : 'NVM_SMALL76', 95 : 'NVM_SMALL77', 96 : 'NVM_SMALL78', 97 : 'NVM_SMALL79', 98 : 'NVM_SMALL80', 99 : 'NVM_SMALL81', 100 : 'NVM_SMALL82', 101 : 'NVM_SMALL83', 102 : 'NVM_SMALL84', 103 : 'NVM_SMALL85', 104 : 'NVM_SMALL86', 105 : 'NVM_SMALL87', 106 : 'NVM_SMALL88', 107 : 'NVM_SMALL89', 108 : 'NVM_SMALL90', 109 : 'NVM_SMALL91', 110 : 'NVM_SMALL92', 111 : 'NVM_SMALL93', 112 : 'NVM_SMALL94', 113 : 'NVM_SMALL95', 114 : 'NVM_SMALL96', 115 : 'NVM_SMALL97', 116 : 'NVM_SMALL98', 117 : 'NVM_SMALL99', 118 : 'NVM_SMALL100', 119 : 'NVM_SMALL101', 120 : 'NVM_SMALL102', 121 : 'NVM_SMALL103', 122 : 'NVM_SMALL104', 123 : 'NVM_SMALL105', 124 : 'NVM_SMALL106', 125 : 'NVM_SMALL107', 126 : 'NVM_SMALL108', 127 : 'NVM_SMALL109', 128 : 'NVM_SMALL110', 129 : 'NVM_SMALL111', 130 : 'NVM_SMALL112', 131 : 'NVM_SMALL113', 132 : 'NVM_SMALL114', 133 : 'NVM_SMALL115', 134 : 'NVM_SMALL116', 135 : 'NVM_SMALL117', 136 : 'NVM_SMALL118', 137 : 'NVM_SMALL119', 138 : 'NVM_SMALL120', 139 : 'NVM_SMALL121', 140 : 'NVM_SMALL122', 141 : 'NVM_SMALL123', 142 : 'NVM_SMALL124', 143 : 'NVM_SMALL125', 144 : 'NVM_SMALL126', 145 : 'NVM_SMALL127', 146 : 'NVM_MED0', 147 : 'NVM_MED1', 148 : 'NVM_MED2', 149 : 'NVM_MED3', 150 : 'NVM_MED4', 151 : 'NVM_LARGE0', 152 : 'NVM_LARGE1', 153 : 'NVM_LARGE2', 154 : 'NVM_LARGE3', 155 : 'NVM_LARGE4', 156 : 'HOLDING0',}
def CONVERT_sw_seq_exec_buf_auto(val):
    try:
        return CONVERT_sw_seq_exec_buf_auto_dict[val]
    except:
        return val
CONVERT_sw_seq_exec_buf_op1_dict = { 0 : 'RAM_SMALL0', 1 : 'RAM_SMALL1', 2 : 'RAM_SMALL2', 3 : 'RAM_SMALL3', 4 : 'RAM_SMALL4', 5 : 'RAM_SMALL5', 6 : 'RAM_SMALL6', 7 : 'RAM_SMALL7', 8 : 'RAM_MED0', 9 : 'RAM_MED1', 10 : 'RAM_MED2', 11 : 'RAM_MED3', 12 : 'RAM_MED4', 13 : 'RAM_LARGE0', 14 : 'RAM_LARGE1', 15 : 'RAM_LARGE2', 16 : 'RAM_LARGE3', 17 : 'RAM_LARGE4', 18 : 'NVM_SMALL0', 19 : 'NVM_SMALL1', 20 : 'NVM_SMALL2', 21 : 'NVM_SMALL3', 22 : 'NVM_SMALL4', 23 : 'NVM_SMALL5', 24 : 'NVM_SMALL6', 25 : 'NVM_SMALL7', 26 : 'NVM_SMALL8', 27 : 'NVM_SMALL9', 28 : 'NVM_SMALL10', 29 : 'NVM_SMALL11', 30 : 'NVM_SMALL12', 31 : 'NVM_SMALL13', 32 : 'NVM_SMALL14', 33 : 'NVM_SMALL15', 34 : 'NVM_SMALL16', 35 : 'NVM_SMALL17', 36 : 'NVM_SMALL18', 37 : 'NVM_SMALL19', 38 : 'NVM_SMALL20', 39 : 'NVM_SMALL21', 40 : 'NVM_SMALL22', 41 : 'NVM_SMALL23', 42 : 'NVM_SMALL24', 43 : 'NVM_SMALL25', 44 : 'NVM_SMALL26', 45 : 'NVM_SMALL27', 46 : 'NVM_SMALL28', 47 : 'NVM_SMALL29', 48 : 'NVM_SMALL30', 49 : 'NVM_SMALL31', 50 : 'NVM_SMALL32', 51 : 'NVM_SMALL33', 52 : 'NVM_SMALL34', 53 : 'NVM_SMALL35', 54 : 'NVM_SMALL36', 55 : 'NVM_SMALL37', 56 : 'NVM_SMALL38', 57 : 'NVM_SMALL39', 58 : 'NVM_SMALL40', 59 : 'NVM_SMALL41', 60 : 'NVM_SMALL42', 61 : 'NVM_SMALL43', 62 : 'NVM_SMALL44', 63 : 'NVM_SMALL45', 64 : 'NVM_SMALL46', 65 : 'NVM_SMALL47', 66 : 'NVM_SMALL48', 67 : 'NVM_SMALL49', 68 : 'NVM_SMALL50', 69 : 'NVM_SMALL51', 70 : 'NVM_SMALL52', 71 : 'NVM_SMALL53', 72 : 'NVM_SMALL54', 73 : 'NVM_SMALL55', 74 : 'NVM_SMALL56', 75 : 'NVM_SMALL57', 76 : 'NVM_SMALL58', 77 : 'NVM_SMALL59', 78 : 'NVM_SMALL60', 79 : 'NVM_SMALL61', 80 : 'NVM_SMALL62', 81 : 'NVM_SMALL63', 82 : 'NVM_SMALL64', 83 : 'NVM_SMALL65', 84 : 'NVM_SMALL66', 85 : 'NVM_SMALL67', 86 : 'NVM_SMALL68', 87 : 'NVM_SMALL69', 88 : 'NVM_SMALL70', 89 : 'NVM_SMALL71', 90 : 'NVM_SMALL72', 91 : 'NVM_SMALL73', 92 : 'NVM_SMALL74', 93 : 'NVM_SMALL75', 94 : 'NVM_SMALL76', 95 : 'NVM_SMALL77', 96 : 'NVM_SMALL78', 97 : 'NVM_SMALL79', 98 : 'NVM_SMALL80', 99 : 'NVM_SMALL81', 100 : 'NVM_SMALL82', 101 : 'NVM_SMALL83', 102 : 'NVM_SMALL84', 103 : 'NVM_SMALL85', 104 : 'NVM_SMALL86', 105 : 'NVM_SMALL87', 106 : 'NVM_SMALL88', 107 : 'NVM_SMALL89', 108 : 'NVM_SMALL90', 109 : 'NVM_SMALL91', 110 : 'NVM_SMALL92', 111 : 'NVM_SMALL93', 112 : 'NVM_SMALL94', 113 : 'NVM_SMALL95', 114 : 'NVM_SMALL96', 115 : 'NVM_SMALL97', 116 : 'NVM_SMALL98', 117 : 'NVM_SMALL99', 118 : 'NVM_SMALL100', 119 : 'NVM_SMALL101', 120 : 'NVM_SMALL102', 121 : 'NVM_SMALL103', 122 : 'NVM_SMALL104', 123 : 'NVM_SMALL105', 124 : 'NVM_SMALL106', 125 : 'NVM_SMALL107', 126 : 'NVM_SMALL108', 127 : 'NVM_SMALL109', 128 : 'NVM_SMALL110', 129 : 'NVM_SMALL111', 130 : 'NVM_SMALL112', 131 : 'NVM_SMALL113', 132 : 'NVM_SMALL114', 133 : 'NVM_SMALL115', 134 : 'NVM_SMALL116', 135 : 'NVM_SMALL117', 136 : 'NVM_SMALL118', 137 : 'NVM_SMALL119', 138 : 'NVM_SMALL120', 139 : 'NVM_SMALL121', 140 : 'NVM_SMALL122', 141 : 'NVM_SMALL123', 142 : 'NVM_SMALL124', 143 : 'NVM_SMALL125', 144 : 'NVM_SMALL126', 145 : 'NVM_SMALL127', 146 : 'NVM_MED0', 147 : 'NVM_MED1', 148 : 'NVM_MED2', 149 : 'NVM_MED3', 150 : 'NVM_MED4', 151 : 'NVM_LARGE0', 152 : 'NVM_LARGE1', 153 : 'NVM_LARGE2', 154 : 'NVM_LARGE3', 155 : 'NVM_LARGE4', 156 : 'HOLDING0',}
def CONVERT_sw_seq_exec_buf_op1(val):
    try:
        return CONVERT_sw_seq_exec_buf_op1_dict[val]
    except:
        return val
CONVERT_sw_seq_exec_buf_op2_dict = { 0 : 'RAM_SMALL0', 1 : 'RAM_SMALL1', 2 : 'RAM_SMALL2', 3 : 'RAM_SMALL3', 4 : 'RAM_SMALL4', 5 : 'RAM_SMALL5', 6 : 'RAM_SMALL6', 7 : 'RAM_SMALL7', 8 : 'RAM_MED0', 9 : 'RAM_MED1', 10 : 'RAM_MED2', 11 : 'RAM_MED3', 12 : 'RAM_MED4', 13 : 'RAM_LARGE0', 14 : 'RAM_LARGE1', 15 : 'RAM_LARGE2', 16 : 'RAM_LARGE3', 17 : 'RAM_LARGE4', 18 : 'NVM_SMALL0', 19 : 'NVM_SMALL1', 20 : 'NVM_SMALL2', 21 : 'NVM_SMALL3', 22 : 'NVM_SMALL4', 23 : 'NVM_SMALL5', 24 : 'NVM_SMALL6', 25 : 'NVM_SMALL7', 26 : 'NVM_SMALL8', 27 : 'NVM_SMALL9', 28 : 'NVM_SMALL10', 29 : 'NVM_SMALL11', 30 : 'NVM_SMALL12', 31 : 'NVM_SMALL13', 32 : 'NVM_SMALL14', 33 : 'NVM_SMALL15', 34 : 'NVM_SMALL16', 35 : 'NVM_SMALL17', 36 : 'NVM_SMALL18', 37 : 'NVM_SMALL19', 38 : 'NVM_SMALL20', 39 : 'NVM_SMALL21', 40 : 'NVM_SMALL22', 41 : 'NVM_SMALL23', 42 : 'NVM_SMALL24', 43 : 'NVM_SMALL25', 44 : 'NVM_SMALL26', 45 : 'NVM_SMALL27', 46 : 'NVM_SMALL28', 47 : 'NVM_SMALL29', 48 : 'NVM_SMALL30', 49 : 'NVM_SMALL31', 50 : 'NVM_SMALL32', 51 : 'NVM_SMALL33', 52 : 'NVM_SMALL34', 53 : 'NVM_SMALL35', 54 : 'NVM_SMALL36', 55 : 'NVM_SMALL37', 56 : 'NVM_SMALL38', 57 : 'NVM_SMALL39', 58 : 'NVM_SMALL40', 59 : 'NVM_SMALL41', 60 : 'NVM_SMALL42', 61 : 'NVM_SMALL43', 62 : 'NVM_SMALL44', 63 : 'NVM_SMALL45', 64 : 'NVM_SMALL46', 65 : 'NVM_SMALL47', 66 : 'NVM_SMALL48', 67 : 'NVM_SMALL49', 68 : 'NVM_SMALL50', 69 : 'NVM_SMALL51', 70 : 'NVM_SMALL52', 71 : 'NVM_SMALL53', 72 : 'NVM_SMALL54', 73 : 'NVM_SMALL55', 74 : 'NVM_SMALL56', 75 : 'NVM_SMALL57', 76 : 'NVM_SMALL58', 77 : 'NVM_SMALL59', 78 : 'NVM_SMALL60', 79 : 'NVM_SMALL61', 80 : 'NVM_SMALL62', 81 : 'NVM_SMALL63', 82 : 'NVM_SMALL64', 83 : 'NVM_SMALL65', 84 : 'NVM_SMALL66', 85 : 'NVM_SMALL67', 86 : 'NVM_SMALL68', 87 : 'NVM_SMALL69', 88 : 'NVM_SMALL70', 89 : 'NVM_SMALL71', 90 : 'NVM_SMALL72', 91 : 'NVM_SMALL73', 92 : 'NVM_SMALL74', 93 : 'NVM_SMALL75', 94 : 'NVM_SMALL76', 95 : 'NVM_SMALL77', 96 : 'NVM_SMALL78', 97 : 'NVM_SMALL79', 98 : 'NVM_SMALL80', 99 : 'NVM_SMALL81', 100 : 'NVM_SMALL82', 101 : 'NVM_SMALL83', 102 : 'NVM_SMALL84', 103 : 'NVM_SMALL85', 104 : 'NVM_SMALL86', 105 : 'NVM_SMALL87', 106 : 'NVM_SMALL88', 107 : 'NVM_SMALL89', 108 : 'NVM_SMALL90', 109 : 'NVM_SMALL91', 110 : 'NVM_SMALL92', 111 : 'NVM_SMALL93', 112 : 'NVM_SMALL94', 113 : 'NVM_SMALL95', 114 : 'NVM_SMALL96', 115 : 'NVM_SMALL97', 116 : 'NVM_SMALL98', 117 : 'NVM_SMALL99', 118 : 'NVM_SMALL100', 119 : 'NVM_SMALL101', 120 : 'NVM_SMALL102', 121 : 'NVM_SMALL103', 122 : 'NVM_SMALL104', 123 : 'NVM_SMALL105', 124 : 'NVM_SMALL106', 125 : 'NVM_SMALL107', 126 : 'NVM_SMALL108', 127 : 'NVM_SMALL109', 128 : 'NVM_SMALL110', 129 : 'NVM_SMALL111', 130 : 'NVM_SMALL112', 131 : 'NVM_SMALL113', 132 : 'NVM_SMALL114', 133 : 'NVM_SMALL115', 134 : 'NVM_SMALL116', 135 : 'NVM_SMALL117', 136 : 'NVM_SMALL118', 137 : 'NVM_SMALL119', 138 : 'NVM_SMALL120', 139 : 'NVM_SMALL121', 140 : 'NVM_SMALL122', 141 : 'NVM_SMALL123', 142 : 'NVM_SMALL124', 143 : 'NVM_SMALL125', 144 : 'NVM_SMALL126', 145 : 'NVM_SMALL127', 146 : 'NVM_MED0', 147 : 'NVM_MED1', 148 : 'NVM_MED2', 149 : 'NVM_MED3', 150 : 'NVM_MED4', 151 : 'NVM_LARGE0', 152 : 'NVM_LARGE1', 153 : 'NVM_LARGE2', 154 : 'NVM_LARGE3', 155 : 'NVM_LARGE4', 156 : 'HOLDING0',}
def CONVERT_sw_seq_exec_buf_op2(val):
    try:
        return CONVERT_sw_seq_exec_buf_op2_dict[val]
    except:
        return val
CONVERT_sw_seq_exec_buf_op3_dict = { 0 : 'RAM_SMALL0', 1 : 'RAM_SMALL1', 2 : 'RAM_SMALL2', 3 : 'RAM_SMALL3', 4 : 'RAM_SMALL4', 5 : 'RAM_SMALL5', 6 : 'RAM_SMALL6', 7 : 'RAM_SMALL7', 8 : 'RAM_MED0', 9 : 'RAM_MED1', 10 : 'RAM_MED2', 11 : 'RAM_MED3', 12 : 'RAM_MED4', 13 : 'RAM_LARGE0', 14 : 'RAM_LARGE1', 15 : 'RAM_LARGE2', 16 : 'RAM_LARGE3', 17 : 'RAM_LARGE4', 18 : 'NVM_SMALL0', 19 : 'NVM_SMALL1', 20 : 'NVM_SMALL2', 21 : 'NVM_SMALL3', 22 : 'NVM_SMALL4', 23 : 'NVM_SMALL5', 24 : 'NVM_SMALL6', 25 : 'NVM_SMALL7', 26 : 'NVM_SMALL8', 27 : 'NVM_SMALL9', 28 : 'NVM_SMALL10', 29 : 'NVM_SMALL11', 30 : 'NVM_SMALL12', 31 : 'NVM_SMALL13', 32 : 'NVM_SMALL14', 33 : 'NVM_SMALL15', 34 : 'NVM_SMALL16', 35 : 'NVM_SMALL17', 36 : 'NVM_SMALL18', 37 : 'NVM_SMALL19', 38 : 'NVM_SMALL20', 39 : 'NVM_SMALL21', 40 : 'NVM_SMALL22', 41 : 'NVM_SMALL23', 42 : 'NVM_SMALL24', 43 : 'NVM_SMALL25', 44 : 'NVM_SMALL26', 45 : 'NVM_SMALL27', 46 : 'NVM_SMALL28', 47 : 'NVM_SMALL29', 48 : 'NVM_SMALL30', 49 : 'NVM_SMALL31', 50 : 'NVM_SMALL32', 51 : 'NVM_SMALL33', 52 : 'NVM_SMALL34', 53 : 'NVM_SMALL35', 54 : 'NVM_SMALL36', 55 : 'NVM_SMALL37', 56 : 'NVM_SMALL38', 57 : 'NVM_SMALL39', 58 : 'NVM_SMALL40', 59 : 'NVM_SMALL41', 60 : 'NVM_SMALL42', 61 : 'NVM_SMALL43', 62 : 'NVM_SMALL44', 63 : 'NVM_SMALL45', 64 : 'NVM_SMALL46', 65 : 'NVM_SMALL47', 66 : 'NVM_SMALL48', 67 : 'NVM_SMALL49', 68 : 'NVM_SMALL50', 69 : 'NVM_SMALL51', 70 : 'NVM_SMALL52', 71 : 'NVM_SMALL53', 72 : 'NVM_SMALL54', 73 : 'NVM_SMALL55', 74 : 'NVM_SMALL56', 75 : 'NVM_SMALL57', 76 : 'NVM_SMALL58', 77 : 'NVM_SMALL59', 78 : 'NVM_SMALL60', 79 : 'NVM_SMALL61', 80 : 'NVM_SMALL62', 81 : 'NVM_SMALL63', 82 : 'NVM_SMALL64', 83 : 'NVM_SMALL65', 84 : 'NVM_SMALL66', 85 : 'NVM_SMALL67', 86 : 'NVM_SMALL68', 87 : 'NVM_SMALL69', 88 : 'NVM_SMALL70', 89 : 'NVM_SMALL71', 90 : 'NVM_SMALL72', 91 : 'NVM_SMALL73', 92 : 'NVM_SMALL74', 93 : 'NVM_SMALL75', 94 : 'NVM_SMALL76', 95 : 'NVM_SMALL77', 96 : 'NVM_SMALL78', 97 : 'NVM_SMALL79', 98 : 'NVM_SMALL80', 99 : 'NVM_SMALL81', 100 : 'NVM_SMALL82', 101 : 'NVM_SMALL83', 102 : 'NVM_SMALL84', 103 : 'NVM_SMALL85', 104 : 'NVM_SMALL86', 105 : 'NVM_SMALL87', 106 : 'NVM_SMALL88', 107 : 'NVM_SMALL89', 108 : 'NVM_SMALL90', 109 : 'NVM_SMALL91', 110 : 'NVM_SMALL92', 111 : 'NVM_SMALL93', 112 : 'NVM_SMALL94', 113 : 'NVM_SMALL95', 114 : 'NVM_SMALL96', 115 : 'NVM_SMALL97', 116 : 'NVM_SMALL98', 117 : 'NVM_SMALL99', 118 : 'NVM_SMALL100', 119 : 'NVM_SMALL101', 120 : 'NVM_SMALL102', 121 : 'NVM_SMALL103', 122 : 'NVM_SMALL104', 123 : 'NVM_SMALL105', 124 : 'NVM_SMALL106', 125 : 'NVM_SMALL107', 126 : 'NVM_SMALL108', 127 : 'NVM_SMALL109', 128 : 'NVM_SMALL110', 129 : 'NVM_SMALL111', 130 : 'NVM_SMALL112', 131 : 'NVM_SMALL113', 132 : 'NVM_SMALL114', 133 : 'NVM_SMALL115', 134 : 'NVM_SMALL116', 135 : 'NVM_SMALL117', 136 : 'NVM_SMALL118', 137 : 'NVM_SMALL119', 138 : 'NVM_SMALL120', 139 : 'NVM_SMALL121', 140 : 'NVM_SMALL122', 141 : 'NVM_SMALL123', 142 : 'NVM_SMALL124', 143 : 'NVM_SMALL125', 144 : 'NVM_SMALL126', 145 : 'NVM_SMALL127', 146 : 'NVM_MED0', 147 : 'NVM_MED1', 148 : 'NVM_MED2', 149 : 'NVM_MED3', 150 : 'NVM_MED4', 151 : 'NVM_LARGE0', 152 : 'NVM_LARGE1', 153 : 'NVM_LARGE2', 154 : 'NVM_LARGE3', 155 : 'NVM_LARGE4', 156 : 'HOLDING0',}
def CONVERT_sw_seq_exec_buf_op3(val):
    try:
        return CONVERT_sw_seq_exec_buf_op3_dict[val]
    except:
        return val
CONVERT_sw_cmd_fail_code_dict = { 0 : 'SUCCESS', 1 : 'MODE', 2 : 'ARM', 3 : 'SOURCE', 4 : 'OPCODE', 5 : 'METHOD', 6 : 'LENGTH', 7 : 'RANGE', 8 : 'CHECKSUM', 9 : 'PKT_TYPE',}
def CONVERT_sw_cmd_fail_code(val):
    try:
        return CONVERT_sw_cmd_fail_code_dict[val]
    except:
        return val
CONVERT_REUSABLE_SPARE_1_dict = {}
def CONVERT_REUSABLE_SPARE_1(val):
    try:
        return CONVERT_REUSABLE_SPARE_1_dict[val]
    except:
        return val
CONVERT_REUSABLE_SPARE_1_dict = {}
def CONVERT_REUSABLE_SPARE_1(val):
    try:
        return CONVERT_REUSABLE_SPARE_1_dict[val]
    except:
        return val
CONVERT_REUSABLE_SPARE_1_dict = {}
def CONVERT_REUSABLE_SPARE_1(val):
    try:
        return CONVERT_REUSABLE_SPARE_1_dict[val]
    except:
        return val
CONVERT_REUSABLE_SPARE_1_dict = {}
def CONVERT_REUSABLE_SPARE_1(val):
    try:
        return CONVERT_REUSABLE_SPARE_1_dict[val]
    except:
        return val
CONVERT_REUSABLE_SPARE_1_dict = {}
def CONVERT_REUSABLE_SPARE_1(val):
    try:
        return CONVERT_REUSABLE_SPARE_1_dict[val]
    except:
        return val
CONVERT_sw_cmd_arm_state_uhf_dict = { 0 : 'OFF', 1 : 'ARMED',}
def CONVERT_sw_cmd_arm_state_uhf(val):
    try:
        return CONVERT_sw_cmd_arm_state_uhf_dict[val]
    except:
        return val
CONVERT_sw_cmd_arm_state_seq_dict = { 0 : 'OFF', 1 : 'ARMED',}
def CONVERT_sw_cmd_arm_state_seq(val):
    try:
        return CONVERT_sw_cmd_arm_state_seq_dict[val]
    except:
        return val
CONVERT_sw_cmd_arm_state_dbg_dict = { 0 : 'OFF', 1 : 'ARMED',}
def CONVERT_sw_cmd_arm_state_dbg(val):
    try:
        return CONVERT_sw_cmd_arm_state_dbg_dict[val]
    except:
        return val
CONVERT_REUSABLE_SPARE_1_dict = {}
def CONVERT_REUSABLE_SPARE_1(val):
    try:
        return CONVERT_REUSABLE_SPARE_1_dict[val]
    except:
        return val
CONVERT_sw_eps_pwr_state_inst4_dict = { 0 : 'OFF', 1 : 'ON',}
def CONVERT_sw_eps_pwr_state_inst4(val):
    try:
        return CONVERT_sw_eps_pwr_state_inst4_dict[val]
    except:
        return val
CONVERT_sw_eps_pwr_state_inst3_dict = { 0 : 'OFF', 1 : 'ON',}
def CONVERT_sw_eps_pwr_state_inst3(val):
    try:
        return CONVERT_sw_eps_pwr_state_inst3_dict[val]
    except:
        return val
CONVERT_sw_eps_pwr_state_inst2_dict = { 0 : 'OFF', 1 : 'ON',}
def CONVERT_sw_eps_pwr_state_inst2(val):
    try:
        return CONVERT_sw_eps_pwr_state_inst2_dict[val]
    except:
        return val
CONVERT_sw_eps_pwr_state_dsps_dict = { 0 : 'OFF', 1 : 'ON',}
def CONVERT_sw_eps_pwr_state_dsps(val):
    try:
        return CONVERT_sw_eps_pwr_state_dsps_dict[val]
    except:
        return val
CONVERT_sw_eps_pwr_state_xband_dict = { 0 : 'OFF', 1 : 'ON',}
def CONVERT_sw_eps_pwr_state_xband(val):
    try:
        return CONVERT_sw_eps_pwr_state_xband_dict[val]
    except:
        return val
CONVERT_sw_eps_pwr_state_uhf_dict = { 0 : 'OFF', 1 : 'ON',}
def CONVERT_sw_eps_pwr_state_uhf(val):
    try:
        return CONVERT_sw_eps_pwr_state_uhf_dict[val]
    except:
        return val
CONVERT_sw_eps_pwr_state_adcs_dict = { 0 : 'OFF', 1 : 'ON',}
def CONVERT_sw_eps_pwr_state_adcs(val):
    try:
        return CONVERT_sw_eps_pwr_state_adcs_dict[val]
    except:
        return val
CONVERT_REUSABLE_SPARE_1_dict = {}
def CONVERT_REUSABLE_SPARE_1(val):
    try:
        return CONVERT_REUSABLE_SPARE_1_dict[val]
    except:
        return val
CONVERT_REUSABLE_SPARE_1_dict = {}
def CONVERT_REUSABLE_SPARE_1(val):
    try:
        return CONVERT_REUSABLE_SPARE_1_dict[val]
    except:
        return val
CONVERT_REUSABLE_SPARE_1_dict = {}
def CONVERT_REUSABLE_SPARE_1(val):
    try:
        return CONVERT_REUSABLE_SPARE_1_dict[val]
    except:
        return val
CONVERT_REUSABLE_SPARE_1_dict = {}
def CONVERT_REUSABLE_SPARE_1(val):
    try:
        return CONVERT_REUSABLE_SPARE_1_dict[val]
    except:
        return val
CONVERT_REUSABLE_SPARE_1_dict = {}
def CONVERT_REUSABLE_SPARE_1(val):
    try:
        return CONVERT_REUSABLE_SPARE_1_dict[val]
    except:
        return val
CONVERT_REUSABLE_SPARE_1_dict = {}
def CONVERT_REUSABLE_SPARE_1(val):
    try:
        return CONVERT_REUSABLE_SPARE_1_dict[val]
    except:
        return val
CONVERT_REUSABLE_SPARE_1_dict = {}
def CONVERT_REUSABLE_SPARE_1(val):
    try:
        return CONVERT_REUSABLE_SPARE_1_dict[val]
    except:
        return val
CONVERT_sw_bat_alive_state_battery0_dict = { 0 : 'DEAD', 1 : 'ALIVE',}
def CONVERT_sw_bat_alive_state_battery0(val):
    try:
        return CONVERT_sw_bat_alive_state_battery0_dict[val]
    except:
        return val
CONVERT_sw_mode_system_mode_dict = { 0 : 'PHOENIX', 1 : 'SAFE', 2 : 'SCIENCE', 3 : 'DOWNLINK',}
def CONVERT_sw_mode_system_mode(val):
    try:
        return CONVERT_sw_mode_system_mode_dict[val]
    except:
        return val
CONVERT_sw_seq_state_auto_dict = { 0 : 'IDLE', 1 : 'ACTIVE', 2 : 'SUSPEND', 3 : 'PAUSE', 4 : 'STALE',}
def CONVERT_sw_seq_state_auto(val):
    try:
        return CONVERT_sw_seq_state_auto_dict[val]
    except:
        return val
CONVERT_sw_seq_state_op1_dict = { 0 : 'IDLE', 1 : 'ACTIVE', 2 : 'SUSPEND', 3 : 'PAUSE', 4 : 'STALE',}
def CONVERT_sw_seq_state_op1(val):
    try:
        return CONVERT_sw_seq_state_op1_dict[val]
    except:
        return val
CONVERT_sw_seq_state_op2_dict = { 0 : 'IDLE', 1 : 'ACTIVE', 2 : 'SUSPEND', 3 : 'PAUSE', 4 : 'STALE',}
def CONVERT_sw_seq_state_op2(val):
    try:
        return CONVERT_sw_seq_state_op2_dict[val]
    except:
        return val
CONVERT_sw_seq_state_op3_dict = { 0 : 'IDLE', 1 : 'ACTIVE', 2 : 'SUSPEND', 3 : 'PAUSE', 4 : 'STALE',}
def CONVERT_sw_seq_state_op3(val):
    try:
        return CONVERT_sw_seq_state_op3_dict[val]
    except:
        return val
CONVERT_sw_fp_task_state_dict = { 0 : 'DISABLED', 1 : 'PASSIVE', 2 : 'ENABLED',}
def CONVERT_sw_fp_task_state(val):
    try:
        return CONVERT_sw_fp_task_state_dict[val]
    except:
        return val
CONVERT_sw_fp_wp_state_wp15_dict = { 0 : 'DISABLED', 1 : 'PASSIVE', 2 : 'ENABLED',}
def CONVERT_sw_fp_wp_state_wp15(val):
    try:
        return CONVERT_sw_fp_wp_state_wp15_dict[val]
    except:
        return val
CONVERT_sw_fp_wp_state_wp14_dict = { 0 : 'DISABLED', 1 : 'PASSIVE', 2 : 'ENABLED',}
def CONVERT_sw_fp_wp_state_wp14(val):
    try:
        return CONVERT_sw_fp_wp_state_wp14_dict[val]
    except:
        return val
CONVERT_sw_fp_wp_state_wp13_dict = { 0 : 'DISABLED', 1 : 'PASSIVE', 2 : 'ENABLED',}
def CONVERT_sw_fp_wp_state_wp13(val):
    try:
        return CONVERT_sw_fp_wp_state_wp13_dict[val]
    except:
        return val
CONVERT_sw_fp_wp_state_wp12_dict = { 0 : 'DISABLED', 1 : 'PASSIVE', 2 : 'ENABLED',}
def CONVERT_sw_fp_wp_state_wp12(val):
    try:
        return CONVERT_sw_fp_wp_state_wp12_dict[val]
    except:
        return val
CONVERT_sw_fp_wp_state_wp11_dict = { 0 : 'DISABLED', 1 : 'PASSIVE', 2 : 'ENABLED',}
def CONVERT_sw_fp_wp_state_wp11(val):
    try:
        return CONVERT_sw_fp_wp_state_wp11_dict[val]
    except:
        return val
CONVERT_sw_fp_wp_state_wp10_dict = { 0 : 'DISABLED', 1 : 'PASSIVE', 2 : 'ENABLED',}
def CONVERT_sw_fp_wp_state_wp10(val):
    try:
        return CONVERT_sw_fp_wp_state_wp10_dict[val]
    except:
        return val
CONVERT_sw_fp_wp_state_wp9_dict = { 0 : 'DISABLED', 1 : 'PASSIVE', 2 : 'ENABLED',}
def CONVERT_sw_fp_wp_state_wp9(val):
    try:
        return CONVERT_sw_fp_wp_state_wp9_dict[val]
    except:
        return val
CONVERT_sw_fp_wp_state_wp8_dict = { 0 : 'DISABLED', 1 : 'PASSIVE', 2 : 'ENABLED',}
def CONVERT_sw_fp_wp_state_wp8(val):
    try:
        return CONVERT_sw_fp_wp_state_wp8_dict[val]
    except:
        return val
CONVERT_sw_fp_wp_state_wp7_dict = { 0 : 'DISABLED', 1 : 'PASSIVE', 2 : 'ENABLED',}
def CONVERT_sw_fp_wp_state_wp7(val):
    try:
        return CONVERT_sw_fp_wp_state_wp7_dict[val]
    except:
        return val
CONVERT_sw_fp_wp_state_wp6_dict = { 0 : 'DISABLED', 1 : 'PASSIVE', 2 : 'ENABLED',}
def CONVERT_sw_fp_wp_state_wp6(val):
    try:
        return CONVERT_sw_fp_wp_state_wp6_dict[val]
    except:
        return val
CONVERT_sw_fp_wp_state_wp5_dict = { 0 : 'DISABLED', 1 : 'PASSIVE', 2 : 'ENABLED',}
def CONVERT_sw_fp_wp_state_wp5(val):
    try:
        return CONVERT_sw_fp_wp_state_wp5_dict[val]
    except:
        return val
CONVERT_sw_fp_wp_state_wp4_dict = { 0 : 'DISABLED', 1 : 'PASSIVE', 2 : 'ENABLED',}
def CONVERT_sw_fp_wp_state_wp4(val):
    try:
        return CONVERT_sw_fp_wp_state_wp4_dict[val]
    except:
        return val
CONVERT_sw_fp_wp_state_wp3_dict = { 0 : 'DISABLED', 1 : 'PASSIVE', 2 : 'ENABLED',}
def CONVERT_sw_fp_wp_state_wp3(val):
    try:
        return CONVERT_sw_fp_wp_state_wp3_dict[val]
    except:
        return val
CONVERT_sw_fp_wp_state_wp2_dict = { 0 : 'DISABLED', 1 : 'PASSIVE', 2 : 'ENABLED',}
def CONVERT_sw_fp_wp_state_wp2(val):
    try:
        return CONVERT_sw_fp_wp_state_wp2_dict[val]
    except:
        return val
CONVERT_sw_fp_wp_state_wp1_dict = { 0 : 'DISABLED', 1 : 'PASSIVE', 2 : 'ENABLED',}
def CONVERT_sw_fp_wp_state_wp1(val):
    try:
        return CONVERT_sw_fp_wp_state_wp1_dict[val]
    except:
        return val
CONVERT_sw_fp_wp_state_wp0_dict = { 0 : 'DISABLED', 1 : 'PASSIVE', 2 : 'ENABLED',}
def CONVERT_sw_fp_wp_state_wp0(val):
    try:
        return CONVERT_sw_fp_wp_state_wp0_dict[val]
    except:
        return val
CONVERT_sw_adcs_alive_dict = { 0 : 'OFF', 1 : 'DEAD', 2 : 'ALIVE',}
def CONVERT_sw_adcs_alive(val):
    try:
        return CONVERT_sw_adcs_alive_dict[val]
    except:
        return val
CONVERT_sw_adcs_att_valid_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_sw_adcs_att_valid(val):
    try:
        return CONVERT_sw_adcs_att_valid_dict[val]
    except:
        return val
CONVERT_sw_adcs_ref_valid_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_sw_adcs_ref_valid(val):
    try:
        return CONVERT_sw_adcs_ref_valid_dict[val]
    except:
        return val
CONVERT_sw_adcs_time_valid_dict = { 1 : 'YES', 0 : 'NO',}
def CONVERT_sw_adcs_time_valid(val):
    try:
        return CONVERT_sw_adcs_time_valid_dict[val]
    except:
        return val
CONVERT_sw_adcs_mode_dict = { 0 : 'SUN_POINT', 1 : 'FINE_REF_POINT',}
def CONVERT_sw_adcs_mode(val):
    try:
        return CONVERT_sw_adcs_mode_dict[val]
    except:
        return val
CONVERT_sw_adcs_recommend_sun_point_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_sw_adcs_recommend_sun_point(val):
    try:
        return CONVERT_sw_adcs_recommend_sun_point_dict[val]
    except:
        return val
CONVERT_sw_adcs_sun_point_state_dict = { 0 : 'SUN_POINT', 1 : 'FINE_REF_POINT', 2 : 'SEARCH_INIT', 3 : 'SEARCHING', 4 : 'WAITING', 5 : 'CONVERGING', 6 : 'ON_SUN', 7 : 'NOT_ACTIVE',}
def CONVERT_sw_adcs_sun_point_state(val):
    try:
        return CONVERT_sw_adcs_sun_point_state_dict[val]
    except:
        return val
CONVERT_sw_dsps_heater_enable_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_sw_dsps_heater_enable(val):
    try:
        return CONVERT_sw_dsps_heater_enable_dict[val]
    except:
        return val
CONVERT_sw_csie_heater_enable_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_sw_csie_heater_enable(val):
    try:
        return CONVERT_sw_csie_heater_enable_dict[val]
    except:
        return val
CONVERT_sw_battery_heater_enable_dict = { 0 : 'NO', 1 : 'YES',}
def CONVERT_sw_battery_heater_enable(val):
    try:
        return CONVERT_sw_battery_heater_enable_dict[val]
    except:
        return val
CONVERT_mode_system_mode_dict = { 0 : 'PHOENIX', 1 : 'SAFE', 2 : 'SCIENCE', 3 : 'DOWNLINK',}
def CONVERT_mode_system_mode(val):
    try:
        return CONVERT_mode_system_mode_dict[val]
    except:
        return val
CONVERT_xband_hk_rf_data_src_dict = { 0 : 'TEST_PAT', 1 : 'CDH',}
def CONVERT_xband_hk_rf_data_src(val):
    try:
        return CONVERT_xband_hk_rf_data_src_dict[val]
    except:
        return val
